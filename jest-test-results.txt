
> competitor-research-agent@0.1.0 test:fast
> jest --testTimeout=15000 --maxWorkers=4 --no-coverage --passWithNoTests --silent

✅ Test database initialized
✅ Global test setup complete - Phase 2 optimized
FAIL src/__tests__/unit/comprehensiveRequirementsCollector.test.ts
  ● ComprehensiveRequirementsCollector › generateComprehensivePrompt › should generate a comprehensive prompt with all required sections

    expect(received).toContain(expected) // indexOf

    Expected substring: "OPTIONAL ENHANCEMENTS"
    Received string:    "🚀 **Welcome to the Competitor Research Agent!**·
    To create your comprehensive competitive analysis, I need all the following information at once. This replaces our multi-step process and gets you started faster!·
    **📧 CONTACT & SCHEDULING (Required):**
    1. **Email address** - Where should I send reports?
    2. **Report frequency** - Weekly, Monthly, or Quarterly?
    3. **Project name** - What should we call this analysis?·
    **🎯 PRODUCT INFORMATION (Required):**
    4. **Product name** - What's your product called?
    5. **Product website URL** - Full URL for analysis (https://...)
    6. **Industry/Market** - What sector are you in?·
    **📊 BUSINESS CONTEXT (Required):**
    7. **Product positioning** - Value props, target market, competitive advantage
    8. **Customer data** - Demographics, segments, size, characteristics··
    9. **User problems** - Core problems your product solves·
    **📝 HOW TO RESPOND:**·
    **✅ SIMPLE NUMBERED LIST (Recommended)**
    ```
    1. john.doe@company.com
    2. Weekly··
    3. Good Chop Analysis
    4. Good Chop
    5. https://goodchop.com
    6. Food delivery
    7. Premium meat delivery for health-conscious consumers
    8. 10,000+ urban customers aged 25-40
    9. Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NUMBERED LIST WITH LABELS (Also Works)**
    ```
    1. Email: john.doe@company.com
    2. Frequency: Weekly
    3. Project: Good Chop Analysis
    4. Product: Good Chop
    5. Website: https://goodchop.com
    6. Industry: Food delivery
    7. Positioning: Premium meat delivery for health-conscious consumers
    8. Customers: 10,000+ urban customers aged 25-40
    9. Problem: Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NATURAL LANGUAGE (Works Too)**
    \"My email is john.doe@company.com and I want weekly reports for my Good Chop Analysis project. We're analyzing Good Chop at https://goodchop.com in the food delivery industry...\"·
    **💡 IMPORTANT TIPS:**
    • **Both formats work perfectly** - Use whichever feels more natural to you
    • **Be specific but concise** - \"Finding good meat locally\" is perfect
    • **URLs must start with https://** - This helps me validate and scrape correctly
    • **Don't worry about perfect formatting** - I'll understand most reasonable formats
    • **All 9 fields are required** - But you can provide them in any order·
    Ready to start? Just provide your information in any format above! 🎯"

      16 |       expect(prompt).toContain('PRODUCT INFORMATION');
      17 |       expect(prompt).toContain('BUSINESS CONTEXT');
    > 18 |       expect(prompt).toContain('OPTIONAL ENHANCEMENTS');
         |                      ^
      19 |       expect(prompt).toContain('HOW TO RESPOND');
      20 |       expect(prompt).toContain('Ready when you are');
      21 |     });

      at Object.toContain (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:18:22)

  ● ComprehensiveRequirementsCollector › generateComprehensivePrompt › should support different tones

    expect(received).not.toContain(expected) // indexOf

    Expected substring: not "🚀"
    Received string:        "🚀 **Welcome to the Competitor Research Agent!**

    To create your comprehensive competitive analysis, I need all the following information at once. This replaces our multi-step process and gets you started faster!

    **📧 CONTACT & SCHEDULING (Required):**
    1. **Email address** - Where should I send reports?
    2. **Report frequency** - Weekly, Monthly, or Quarterly?
    3. **Project name** - What should we call this analysis?

    **🎯 PRODUCT INFORMATION (Required):**
    4. **Product name** - What's your product called?
    5. **Product website URL** - Full URL for analysis (https://...)
    6. **Industry/Market** - What sector are you in?

    **📊 BUSINESS CONTEXT (Required):**
    7. **Product positioning** - Value props, target market, competitive advantage
    8. **Customer data** - Demographics, segments, size, characteristics  
    9. **User problems** - Core problems your product solves

    **📝 HOW TO RESPOND:**

    **✅ SIMPLE NUMBERED LIST (Recommended)**
    ```
    1. john.doe@company.com
    2. Weekly  
    3. Good Chop Analysis
    4. Good Chop
    5. https://goodchop.com
    6. Food delivery
    7. Premium meat delivery for health-conscious consumers
    8. 10,000+ urban customers aged 25-40
    9. Finding high-quality, ethically sourced meat locally
    ```

    **✅ NUMBERED LIST WITH LABELS (Also Works)**
    ```
    1. Email: john.doe@company.com
    2. Frequency: Weekly
    3. Project: Good Chop Analysis
    4. Product: Good Chop
    5. Website: https://goodchop.com
    6. Industry: Food delivery
    7. Positioning: Premium meat delivery for health-conscious consumers
    8. Customers: 10,000+ urban customers aged 25-40
    9. Problem: Finding high-quality, ethically sourced meat locally
    ```

    **✅ NATURAL LANGUAGE (Works Too)**
    \"My email is john.doe@company.com and I want weekly reports for my Good Chop Analysis project. We're analyzing Good Chop at https://goodchop.com in the food delivery industry...\"

    **💡 IMPORTANT TIPS:**
    • **Both formats work perfectly** - Use whichever feels more natural to you
    • **Be specific but concise** - \"Finding good meat locally\" is perfect
    • **URLs must start with https://** - This helps me validate and scrape correctly
    • **Don't worry about perfect formatting** - I'll understand most reasonable formats
    • **All 9 fields are required** - But you can provide them in any order

    Ready to start? Just provide your information in any format above! 🎯"

      28 |       expect(professionalPrompt).toContain('Competitor Research Agent');
      29 |       expect(professionalPrompt).toContain('competitive analysis');
    > 30 |       expect(professionalPrompt).not.toContain('🚀');
         |                                      ^
      31 |
      32 |       expect(friendlyPrompt).toContain('🚀');
      33 |       expect(friendlyPrompt).toContain('Ready when you are! 🎉');

      at Object.toContain (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:30:38)

  ● ComprehensiveRequirementsCollector › generateComprehensivePrompt › should include industry-specific examples when requested

    expect(received).toContain(expected) // indexOf

    Expected substring: "SaaS"
    Received string:    "🚀 **Welcome to the Competitor Research Agent!**·
    To create your comprehensive competitive analysis, I need all the following information at once. This replaces our multi-step process and gets you started faster!·
    **📧 CONTACT & SCHEDULING (Required):**
    1. **Email address** - Where should I send reports?
    2. **Report frequency** - Weekly, Monthly, or Quarterly?
    3. **Project name** - What should we call this analysis?·
    **🎯 PRODUCT INFORMATION (Required):**
    4. **Product name** - What's your product called?
    5. **Product website URL** - Full URL for analysis (https://...)
    6. **Industry/Market** - What sector are you in?·
    **📊 BUSINESS CONTEXT (Required):**
    7. **Product positioning** - Value props, target market, competitive advantage
    8. **Customer data** - Demographics, segments, size, characteristics··
    9. **User problems** - Core problems your product solves·
    **📝 HOW TO RESPOND:**·
    **✅ SIMPLE NUMBERED LIST (Recommended)**
    ```
    1. john.doe@company.com
    2. Weekly··
    3. Good Chop Analysis
    4. Good Chop
    5. https://goodchop.com
    6. Food delivery
    7. Premium meat delivery for health-conscious consumers
    8. 10,000+ urban customers aged 25-40
    9. Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NUMBERED LIST WITH LABELS (Also Works)**
    ```
    1. Email: john.doe@company.com
    2. Frequency: Weekly
    3. Project: Good Chop Analysis
    4. Product: Good Chop
    5. Website: https://goodchop.com
    6. Industry: Food delivery
    7. Positioning: Premium meat delivery for health-conscious consumers
    8. Customers: 10,000+ urban customers aged 25-40
    9. Problem: Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NATURAL LANGUAGE (Works Too)**
    \"My email is john.doe@company.com and I want weekly reports for my Good Chop Analysis project. We're analyzing Good Chop at https://goodchop.com in the food delivery industry...\"·
    **💡 IMPORTANT TIPS:**
    • **Both formats work perfectly** - Use whichever feels more natural to you
    • **Be specific but concise** - \"Finding good meat locally\" is perfect
    • **URLs must start with https://** - This helps me validate and scrape correctly
    • **Don't worry about perfect formatting** - I'll understand most reasonable formats
    • **All 9 fields are required** - But you can provide them in any order·
    Ready to start? Just provide your information in any format above! 🎯"

      48 |       });
      49 |
    > 50 |       expect(saasPrompt).toContain('SaaS');
         |                          ^
      51 |       expect(saasPrompt).toContain('B2B productivity platform');
      52 |       
      53 |       expect(foodPrompt).toContain('meal delivery');

      at Object.toContain (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:50:26)

  ● ComprehensiveRequirementsCollector › generateComprehensivePrompt › should hide optional fields when requested

    expect(received).toContain(expected) // indexOf

    Expected substring: "OPTIONAL ENHANCEMENTS"
    Received string:    "🚀 **Welcome to the Competitor Research Agent!**·
    To create your comprehensive competitive analysis, I need all the following information at once. This replaces our multi-step process and gets you started faster!·
    **📧 CONTACT & SCHEDULING (Required):**
    1. **Email address** - Where should I send reports?
    2. **Report frequency** - Weekly, Monthly, or Quarterly?
    3. **Project name** - What should we call this analysis?·
    **🎯 PRODUCT INFORMATION (Required):**
    4. **Product name** - What's your product called?
    5. **Product website URL** - Full URL for analysis (https://...)
    6. **Industry/Market** - What sector are you in?·
    **📊 BUSINESS CONTEXT (Required):**
    7. **Product positioning** - Value props, target market, competitive advantage
    8. **Customer data** - Demographics, segments, size, characteristics··
    9. **User problems** - Core problems your product solves·
    **📝 HOW TO RESPOND:**·
    **✅ SIMPLE NUMBERED LIST (Recommended)**
    ```
    1. john.doe@company.com
    2. Weekly··
    3. Good Chop Analysis
    4. Good Chop
    5. https://goodchop.com
    6. Food delivery
    7. Premium meat delivery for health-conscious consumers
    8. 10,000+ urban customers aged 25-40
    9. Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NUMBERED LIST WITH LABELS (Also Works)**
    ```
    1. Email: john.doe@company.com
    2. Frequency: Weekly
    3. Project: Good Chop Analysis
    4. Product: Good Chop
    5. Website: https://goodchop.com
    6. Industry: Food delivery
    7. Positioning: Premium meat delivery for health-conscious consumers
    8. Customers: 10,000+ urban customers aged 25-40
    9. Problem: Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NATURAL LANGUAGE (Works Too)**
    \"My email is john.doe@company.com and I want weekly reports for my Good Chop Analysis project. We're analyzing Good Chop at https://goodchop.com in the food delivery industry...\"·
    **💡 IMPORTANT TIPS:**
    • **Both formats work perfectly** - Use whichever feels more natural to you
    • **Be specific but concise** - \"Finding good meat locally\" is perfect
    • **URLs must start with https://** - This helps me validate and scrape correctly
    • **Don't worry about perfect formatting** - I'll understand most reasonable formats
    • **All 9 fields are required** - But you can provide them in any order·
    Ready to start? Just provide your information in any format above! 🎯"

      59 |       const withoutOptional = collector.generateComprehensivePrompt({ showOptionalFields: false });
      60 |
    > 61 |       expect(withOptional).toContain('OPTIONAL ENHANCEMENTS');
         |                            ^
      62 |       expect(withoutOptional).not.toContain('OPTIONAL ENHANCEMENTS');
      63 |     });
      64 |

      at Object.toContain (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:61:28)

  ● ComprehensiveRequirementsCollector › generateComprehensivePrompt › should customize contextual help

    expect(received).toContain(expected) // indexOf

    Expected substring: "intelligently parse"
    Received string:    "🚀 **Welcome to the Competitor Research Agent!**·
    To create your comprehensive competitive analysis, I need all the following information at once. This replaces our multi-step process and gets you started faster!·
    **📧 CONTACT & SCHEDULING (Required):**
    1. **Email address** - Where should I send reports?
    2. **Report frequency** - Weekly, Monthly, or Quarterly?
    3. **Project name** - What should we call this analysis?·
    **🎯 PRODUCT INFORMATION (Required):**
    4. **Product name** - What's your product called?
    5. **Product website URL** - Full URL for analysis (https://...)
    6. **Industry/Market** - What sector are you in?·
    **📊 BUSINESS CONTEXT (Required):**
    7. **Product positioning** - Value props, target market, competitive advantage
    8. **Customer data** - Demographics, segments, size, characteristics··
    9. **User problems** - Core problems your product solves·
    **📝 HOW TO RESPOND:**·
    **✅ SIMPLE NUMBERED LIST (Recommended)**
    ```
    1. john.doe@company.com
    2. Weekly··
    3. Good Chop Analysis
    4. Good Chop
    5. https://goodchop.com
    6. Food delivery
    7. Premium meat delivery for health-conscious consumers
    8. 10,000+ urban customers aged 25-40
    9. Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NUMBERED LIST WITH LABELS (Also Works)**
    ```
    1. Email: john.doe@company.com
    2. Frequency: Weekly
    3. Project: Good Chop Analysis
    4. Product: Good Chop
    5. Website: https://goodchop.com
    6. Industry: Food delivery
    7. Positioning: Premium meat delivery for health-conscious consumers
    8. Customers: 10,000+ urban customers aged 25-40
    9. Problem: Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NATURAL LANGUAGE (Works Too)**
    \"My email is john.doe@company.com and I want weekly reports for my Good Chop Analysis project. We're analyzing Good Chop at https://goodchop.com in the food delivery industry...\"·
    **💡 IMPORTANT TIPS:**
    • **Both formats work perfectly** - Use whichever feels more natural to you
    • **Be specific but concise** - \"Finding good meat locally\" is perfect
    • **URLs must start with https://** - This helps me validate and scrape correctly
    • **Don't worry about perfect formatting** - I'll understand most reasonable formats
    • **All 9 fields are required** - But you can provide them in any order·
    Ready to start? Just provide your information in any format above! 🎯"

      67 |       const withoutHelp = collector.generateComprehensivePrompt({ includeContextualHelp: false });
      68 |
    > 69 |       expect(withHelp).toContain('intelligently parse');
         |                        ^
      70 |       expect(withoutHelp).not.toContain('intelligently parse');
      71 |     });
      72 |

      at Object.toContain (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:69:24)

  ● ComprehensiveRequirementsCollector › generateComprehensivePrompt › should emphasize speed when requested

    expect(received).not.toContain(expected) // indexOf

    Expected substring: not "faster"
    Received string:        "🚀 **Welcome to the Competitor Research Agent!**

    To create your comprehensive competitive analysis, I need all the following information at once. This replaces our multi-step process and gets you started faster!

    **📧 CONTACT & SCHEDULING (Required):**
    1. **Email address** - Where should I send reports?
    2. **Report frequency** - Weekly, Monthly, or Quarterly?
    3. **Project name** - What should we call this analysis?

    **🎯 PRODUCT INFORMATION (Required):**
    4. **Product name** - What's your product called?
    5. **Product website URL** - Full URL for analysis (https://...)
    6. **Industry/Market** - What sector are you in?

    **📊 BUSINESS CONTEXT (Required):**
    7. **Product positioning** - Value props, target market, competitive advantage
    8. **Customer data** - Demographics, segments, size, characteristics  
    9. **User problems** - Core problems your product solves

    **📝 HOW TO RESPOND:**

    **✅ SIMPLE NUMBERED LIST (Recommended)**
    ```
    1. john.doe@company.com
    2. Weekly  
    3. Good Chop Analysis
    4. Good Chop
    5. https://goodchop.com
    6. Food delivery
    7. Premium meat delivery for health-conscious consumers
    8. 10,000+ urban customers aged 25-40
    9. Finding high-quality, ethically sourced meat locally
    ```

    **✅ NUMBERED LIST WITH LABELS (Also Works)**
    ```
    1. Email: john.doe@company.com
    2. Frequency: Weekly
    3. Project: Good Chop Analysis
    4. Product: Good Chop
    5. Website: https://goodchop.com
    6. Industry: Food delivery
    7. Positioning: Premium meat delivery for health-conscious consumers
    8. Customers: 10,000+ urban customers aged 25-40
    9. Problem: Finding high-quality, ethically sourced meat locally
    ```

    **✅ NATURAL LANGUAGE (Works Too)**
    \"My email is john.doe@company.com and I want weekly reports for my Good Chop Analysis project. We're analyzing Good Chop at https://goodchop.com in the food delivery industry...\"

    **💡 IMPORTANT TIPS:**
    • **Both formats work perfectly** - Use whichever feels more natural to you
    • **Be specific but concise** - \"Finding good meat locally\" is perfect
    • **URLs must start with https://** - This helps me validate and scrape correctly
    • **Don't worry about perfect formatting** - I'll understand most reasonable formats
    • **All 9 fields are required** - But you can provide them in any order

    Ready to start? Just provide your information in any format above! 🎯"

      76 |
      77 |       expect(withSpeed).toContain('faster');
    > 78 |       expect(withoutSpeed).not.toContain('faster');
         |                                ^
      79 |     });
      80 |   });
      81 |

      at Object.toContain (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:78:32)

  ● ComprehensiveRequirementsCollector › generateIndustrySpecificPrompt › should generate industry-specific prompts

    expect(received).toContain(expected) // indexOf

    Expected substring: "SaaS"
    Received string:    "🚀 **Welcome to the Competitor Research Agent!**·
    To create your comprehensive competitive analysis, I need all the following information at once. This replaces our multi-step process and gets you started faster!·
    **📧 CONTACT & SCHEDULING (Required):**
    1. **Email address** - Where should I send reports?
    2. **Report frequency** - Weekly, Monthly, or Quarterly?
    3. **Project name** - What should we call this analysis?·
    **🎯 PRODUCT INFORMATION (Required):**
    4. **Product name** - What's your product called?
    5. **Product website URL** - Full URL for analysis (https://...)
    6. **Industry/Market** - What sector are you in?·
    **📊 BUSINESS CONTEXT (Required):**
    7. **Product positioning** - Value props, target market, competitive advantage
    8. **Customer data** - Demographics, segments, size, characteristics··
    9. **User problems** - Core problems your product solves·
    **📝 HOW TO RESPOND:**·
    **✅ SIMPLE NUMBERED LIST (Recommended)**
    ```
    1. john.doe@company.com
    2. Weekly··
    3. Good Chop Analysis
    4. Good Chop
    5. https://goodchop.com
    6. Food delivery
    7. Premium meat delivery for health-conscious consumers
    8. 10,000+ urban customers aged 25-40
    9. Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NUMBERED LIST WITH LABELS (Also Works)**
    ```
    1. Email: john.doe@company.com
    2. Frequency: Weekly
    3. Project: Good Chop Analysis
    4. Product: Good Chop
    5. Website: https://goodchop.com
    6. Industry: Food delivery
    7. Positioning: Premium meat delivery for health-conscious consumers
    8. Customers: 10,000+ urban customers aged 25-40
    9. Problem: Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NATURAL LANGUAGE (Works Too)**
    \"My email is john.doe@company.com and I want weekly reports for my Good Chop Analysis project. We're analyzing Good Chop at https://goodchop.com in the food delivery industry...\"·
    **💡 IMPORTANT TIPS:**
    • **Both formats work perfectly** - Use whichever feels more natural to you
    • **Be specific but concise** - \"Finding good meat locally\" is perfect
    • **URLs must start with https://** - This helps me validate and scrape correctly
    • **Don't worry about perfect formatting** - I'll understand most reasonable formats
    • **All 9 fields are required** - But you can provide them in any order·
    Ready to start? Just provide your information in any format above! 🎯"

      85 |       const fintech = collector.generateIndustrySpecificPrompt('fintech');
      86 |
    > 87 |       expect(saasPrompt).toContain('SaaS');
         |                          ^
      88 |       expect(saasPrompt).toContain('B2B productivity platform');
      89 |       
      90 |       expect(fintech).toContain('fintech');

      at Object.toContain (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:87:26)

  ● ComprehensiveRequirementsCollector › generateConcisePrompt › should generate a concise prompt

    expect(received).toContain(expected) // indexOf

    Expected substring: "Competitor Analysis Setup"
    Received string:    "🚀 **Welcome to the Competitor Research Agent!**·
    To create your comprehensive competitive analysis, I need all the following information at once. This replaces our multi-step process and gets you started faster!·
    **📧 CONTACT & SCHEDULING (Required):**
    1. **Email address** - Where should I send reports?
    2. **Report frequency** - Weekly, Monthly, or Quarterly?
    3. **Project name** - What should we call this analysis?·
    **🎯 PRODUCT INFORMATION (Required):**
    4. **Product name** - What's your product called?
    5. **Product website URL** - Full URL for analysis (https://...)
    6. **Industry/Market** - What sector are you in?·
    **📊 BUSINESS CONTEXT (Required):**
    7. **Product positioning** - Value props, target market, competitive advantage
    8. **Customer data** - Demographics, segments, size, characteristics··
    9. **User problems** - Core problems your product solves·
    **📝 HOW TO RESPOND:**·
    **✅ SIMPLE NUMBERED LIST (Recommended)**
    ```
    1. john.doe@company.com
    2. Weekly··
    3. Good Chop Analysis
    4. Good Chop
    5. https://goodchop.com
    6. Food delivery
    7. Premium meat delivery for health-conscious consumers
    8. 10,000+ urban customers aged 25-40
    9. Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NUMBERED LIST WITH LABELS (Also Works)**
    ```
    1. Email: john.doe@company.com
    2. Frequency: Weekly
    3. Project: Good Chop Analysis
    4. Product: Good Chop
    5. Website: https://goodchop.com
    6. Industry: Food delivery
    7. Positioning: Premium meat delivery for health-conscious consumers
    8. Customers: 10,000+ urban customers aged 25-40
    9. Problem: Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NATURAL LANGUAGE (Works Too)**
    \"My email is john.doe@company.com and I want weekly reports for my Good Chop Analysis project. We're analyzing Good Chop at https://goodchop.com in the food delivery industry...\"·
    **💡 IMPORTANT TIPS:**
    • **Both formats work perfectly** - Use whichever feels more natural to you
    • **Be specific but concise** - \"Finding good meat locally\" is perfect
    • **URLs must start with https://** - This helps me validate and scrape correctly
    • **Don't worry about perfect formatting** - I'll understand most reasonable formats
    • **All 9 fields are required** - But you can provide them in any order·
    Ready to start? Just provide your information in any format above! 🎯"

       97 |       const prompt = collector.generateConcisePrompt();
       98 |       
    >  99 |       expect(prompt).toContain('Competitor Analysis Setup');
          |                      ^
      100 |       expect(prompt).not.toContain('OPTIONAL ENHANCEMENTS');
      101 |       expect(prompt).not.toContain('🚀');
      102 |       expect(prompt).toContain('Ready for your input');

      at Object.toContain (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:99:22)

  ● ComprehensiveRequirementsCollector › generatePartialPrompt › should generate helpful partial prompts

    expect(received).toContain(expected) // indexOf

    Expected substring: "Product Website"
    Received string:    "📋 **Almost Complete!** You've provided 7/9 required fields.·
    **Still need:**
    • **Product URL**: Your product's website (e.g., https://myproduct.com)
    • **Industry**: Your market sector (e.g., SaaS)·
    **Already have:**
    📧 Email: test@company.com
    📅 Frequency: Weekly
    📋 Project: Test Project·
    Please provide the missing information in any format you prefer. I'll combine it with what you've already given me! 🚀"

      117 |       expect(prompt).toContain('Almost Complete');
      118 |       expect(prompt).toContain('7/9 required fields');
    > 119 |       expect(prompt).toContain('Product Website');
          |                      ^
      120 |       expect(prompt).toContain('Industry/Market');
      121 |       expect(prompt).toContain('Already have');
      122 |       expect(prompt).toContain('test@company.com');

      at Object.toContain (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:119:22)

  ● ComprehensiveRequirementsCollector › Field Extraction › Email extraction › should extract email from various formats

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:150:36)
          at Array.forEach (<anonymous>)
      at Object.forEach (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:149:19)

  ● ComprehensiveRequirementsCollector › Field Extraction › Email extraction › should handle invalid email formats

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:166:36)
          at Array.forEach (<anonymous>)
      at Object.forEach (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:165:23)

  ● ComprehensiveRequirementsCollector › Field Extraction › Frequency extraction › should extract frequency keywords

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:183:36)
          at Array.forEach (<anonymous>)
      at Object.forEach (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:182:19)

  ● ComprehensiveRequirementsCollector › Field Extraction › URL extraction › should extract URLs with cleanup

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:199:36)
          at Array.forEach (<anonymous>)
      at Object.forEach (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:198:19)

  ● ComprehensiveRequirementsCollector › Field Extraction › Project name extraction › should extract project names from various formats

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:215:36)
          at Array.forEach (<anonymous>)
      at Object.forEach (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:214:19)

  ● ComprehensiveRequirementsCollector › Comprehensive parsing › should handle complete single submission

    expect(received).toBe(expected) // Object.is equality

    Expected: "https://goodchop.com"
    Received: "https://goodchop.com/"

      244 |       expect(result.extractedData.projectName).toBe('Good Chop Analysis');
      245 |       expect(result.extractedData.productName).toBe('Good Chop');
    > 246 |       expect(result.extractedData.productUrl).toBe('https://goodchop.com');
          |                                               ^
      247 |       expect(result.extractedData.industry).toBe('Food delivery');
      248 |     });
      249 |

      at Object.toBe (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:246:47)

  ● ComprehensiveRequirementsCollector › Comprehensive parsing › should handle natural language format

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:258:32)

  ● ComprehensiveRequirementsCollector › Comprehensive parsing › should handle partial submission gracefully

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:276:32)

  ● ComprehensiveRequirementsCollector › Error handling and suggestions › should provide specific guidance for invalid email

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:320:32)

  ● ComprehensiveRequirementsCollector › Error handling and suggestions › should handle missing URL gracefully

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:332:32)

  ● ComprehensiveRequirementsCollector › createMissingFieldsPrompt › should create helpful prompt for missing fields

    expect(received).toContain(expected) // indexOf

    Expected substring: "Product Website"
    Received string:    "📊 **Progress: 50% Complete**·
    📝 **Still need the following required information:**
    • **Product URL**: Your product's website
      💡 Example: https://myproduct.com
    • **Industry**: Your market sector
      💡 Example: SaaS·
    💡 **Helpful tips:**
    • Include your product website URL·
    Please provide the missing information, and I'll create your competitive analysis project! 🚀"

      353 |       expect(prompt).toContain('Progress: 50% Complete');
      354 |       expect(prompt).toContain('Still need the following');
    > 355 |       expect(prompt).toContain('Product Website');
          |                      ^
      356 |       expect(prompt).toContain('Industry/Market');
      357 |       expect(prompt).toContain('Helpful tips');
      358 |     });

      at Object.toContain (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:355:22)

  ● ComprehensiveRequirementsCollector › Edge cases › should handle special characters in project names

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:399:32)

  ● ComprehensiveRequirementsCollector › Edge cases › should handle multiple URLs in text

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:410:32)

  ● ComprehensiveRequirementsCollector › Edge cases › should handle empty input gracefully

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:415:32)

  ● ComprehensiveRequirementsCollector › Edge cases › should handle very long input

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:424:32)

  ● ComprehensiveRequirementsCollector › Performance › should parse typical input within reasonable time

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:446:32)

  ● ComprehensiveRequirementsCollector › Phase 2.2 Advanced Parsing Features › Parsing Strategy Detection › should detect natural language format

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:485:34)

  ● ComprehensiveRequirementsCollector › Phase 2.2 Advanced Parsing Features › Parsing Strategy Detection › should handle mixed format intelligently

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:498:34)

  ● ComprehensiveRequirementsCollector › Phase 2.2 Advanced Parsing Features › Contextual Intelligence › should detect industry context from content

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:536:34)

  ● ComprehensiveRequirementsCollector › Phase 2.2 Advanced Parsing Features › Contextual Intelligence › should use contextual clues for better extraction

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:548:34)

  ● ComprehensiveRequirementsCollector › Phase 2.2 Advanced Parsing Features › Smart Completeness Calculation › should handle partial credit for uncertain extractions

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:572:34)

  ● ComprehensiveRequirementsCollector › Phase 2.2 Advanced Parsing Features › Intelligent Suggestion Generation › should provide format-specific suggestions

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:585:34)

  ● ComprehensiveRequirementsCollector › Phase 2.2 Advanced Parsing Features › Intelligent Suggestion Generation › should suggest optimal format for mixed inputs

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:594:34)

  ● ComprehensiveRequirementsCollector › Phase 2.2 Advanced Parsing Features › Intelligent Suggestion Generation › should provide context-aware field suggestions

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:602:34)

  ● ComprehensiveRequirementsCollector › Phase 2.2 Advanced Parsing Features › Enhanced Field Validation › should validate email formats contextually

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      616 |         const result = collector.parseComprehensiveInput(input);
      617 |         
    > 618 |         expect(result.invalidFields.some(f => f.field === 'userEmail')).toBe(true);
          |                                                                         ^
      619 |         expect(result.invalidFields.some(f => f.reason.includes('Invalid email format'))).toBe(true);
      620 |       });
      621 |

      at Object.toBe (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:618:73)

  ● ComprehensiveRequirementsCollector › Phase 2.2 Advanced Parsing Features › Enhanced Field Validation › should validate URL formats with suggestions

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      629 |         const result = collector.parseComprehensiveInput(input);
      630 |         
    > 631 |         expect(result.invalidFields.some(f => f.field === 'productUrl')).toBe(true);
          |                                                                          ^
      632 |         expect(result.invalidFields.some(f => f.suggestion.includes('https://'))).toBe(true);
      633 |       });
      634 |

      at Object.toBe (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:631:74)

FAIL src/app/api/projects/__tests__/route.immediateReports.test.ts
  ● POST /api/projects - Phase 1.2 Enhanced Flow › Basic Request Handling › should handle simple request parsing

    expect(received).toBe(expected) // Object.is equality

    Expected: 201
    Received: 500

      171 |       const response = await POST(request);
      172 |       
    > 173 |       expect(response.status).toBe(201);
          |                               ^
      174 |     }, 10000);  // 10 second timeout
      175 |   });
      176 |

      at Object.toBe (src/app/api/projects/__tests__/route.immediateReports.test.ts:173:31)

  ● POST /api/projects - Phase 1.2 Enhanced Flow › Immediate Report Generation › should generate initial report immediately when requested

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "project-1", ObjectContaining {"enableGracefulDegradation": true, "fallbackToQueue": true, "maxConcurrentProcessing": 5, "notifyOnCompletion": false, "priority": "high", "retryAttempts": 2, "timeout": 45000}

    Number of calls: 0

      197 |
      198 |       // Verify asyncReportProcessingService was called (this is what the API route actually uses)
    > 199 |       expect(asyncReportProcessingService.processInitialReport).toHaveBeenCalledWith(
          |                                                                 ^
      200 |         'project-1',
      201 |         expect.objectContaining({
      202 |           timeout: 45000,

      at Object.toHaveBeenCalledWith (src/app/api/projects/__tests__/route.immediateReports.test.ts:199:65)

  ● POST /api/projects - Phase 1.2 Enhanced Flow › Immediate Report Generation › should respect generateInitialReport=false flag

    expect(received).toBe(expected) // Object.is equality

    Expected: 201
    Received: 500

      242 |       expect(asyncReportProcessingService.processInitialReport).not.toHaveBeenCalled();
      243 |       
    > 244 |       expect(response.status).toBe(201);
          |                               ^
      245 |     }, 10000);
      246 |
      247 |     it('should fallback to queue when immediate generation fails', async () => {

      at Object.toBe (src/app/api/projects/__tests__/route.immediateReports.test.ts:244:31)

  ● POST /api/projects - Phase 1.2 Enhanced Flow › Immediate Report Generation › should fallback to queue when immediate generation fails

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "project-1", Any<Object>

    Number of calls: 0

      275 |
      276 |       // Verify processing service was called
    > 277 |       expect(asyncReportProcessingService.processInitialReport).toHaveBeenCalledWith('project-1', expect.any(Object));
          |                                                                 ^
      278 |       
      279 |       expect(responseData.reportGeneration).toEqual(
      280 |         expect.objectContaining({

      at Object.toHaveBeenCalledWith (src/app/api/projects/__tests__/route.immediateReports.test.ts:277:65)

  ● POST /api/projects - Phase 1.2 Enhanced Flow › Immediate Report Generation › should handle requireFreshSnapshots option

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "project-1", ObjectContaining {"fallbackToQueue": true, "priority": "high", "timeout": 45000}

    Number of calls: 0

      304 |
      305 |       // The API route uses asyncReportProcessingService and the requireFreshSnapshots logic is handled internally
    > 306 |       expect(asyncReportProcessingService.processInitialReport).toHaveBeenCalledWith(
          |                                                                 ^
      307 |         'project-1',
      308 |         expect.objectContaining({
      309 |           timeout: 45000,

      at Object.toHaveBeenCalledWith (src/app/api/projects/__tests__/route.immediateReports.test.ts:306:65)

  ● POST /api/projects - Phase 1.2 Enhanced Flow › Project Creation Resilience › should create project successfully even when report generation fails completely

    expect(received).toBe(expected) // Object.is equality

    Expected: 201
    Received: 500

      345 |
      346 |       // Project should still be created successfully
    > 347 |       expect(response.status).toBe(201);
          |                               ^
      348 |       expect(responseData.id).toBe('project-1');
      349 |       
      350 |       // Report generation should indicate failure

      at Object.toBe (src/app/api/projects/__tests__/route.immediateReports.test.ts:347:31)

FAIL src/__tests__/integration/systemIntegration.test.ts
  ● Phase 5.4: System Integration Tests › Backend Services Integration › InitialComparativeReportService Integration › should generate report with real-time status updates

    TypeError: realTimeStatusService.subscribeToProjectStatus is not a function

      157 |
      158 |         // Subscribe to real-time updates
    > 159 |         realTimeStatusService.subscribeToProjectStatus(projectId, statusCallback);
          |                               ^
      160 |
      161 |         try {
      162 |           // Generate initial report

      at Object.subscribeToProjectStatus (src/__tests__/integration/systemIntegration.test.ts:159:31)

  ● Phase 5.4: System Integration Tests › Backend Services Integration › InitialComparativeReportService Integration › should handle smart data collection integration

    Project qmc9dka989pw7sar84x0bnbl not found

      248 |
      249 |       if (!project) {
    > 250 |         throw new Error(`Project ${projectId} not found`);
          |               ^
      251 |       }
      252 |
      253 |       const totalCompetitors = project.competitors.length;

      at SmartDataCollectionService.collectCompetitorDataWithPriorities (src/services/reports/smartDataCollectionService.ts:250:15)
      at SmartDataCollectionService.collectProjectData (src/services/reports/smartDataCollectionService.ts:108:36)
      at Object.<anonymous> (src/__tests__/integration/systemIntegration.test.ts:196:38)

  ● Phase 5.4: System Integration Tests › Backend Services Integration › InitialComparativeReportService Integration › should enforce rate limiting during concurrent operations

    expect(received).toBeGreaterThan(expected)

    Expected: > 10000
    Received:   1

      239 |
      240 |         expect(successfulReports.length).toBeLessThanOrEqual(5); // Max concurrent snapshots per project
    > 241 |         expect(endTime - startTime).toBeGreaterThan(10000); // Should take time due to rate limiting
          |                                     ^
      242 |
      243 |         // Add successful report IDs to cleanup
      244 |         successfulReports.forEach(result => {

      at Object.toBeGreaterThan (src/__tests__/integration/systemIntegration.test.ts:241:37)

  ● Phase 5.4: System Integration Tests › Backend Services Integration › Configuration Management Integration › should update configuration and propagate changes

    TypeError: Cannot convert undefined or null to object
        at Function.keys (<anonymous>)

      220 |       logger.error('Configuration update failed', error as Error, {
      221 |         updatedBy,
    > 222 |         updateFields: Object.keys(updates),
          |                              ^
      223 |         rollbackToken
      224 |       });
      225 |

      at ConfigurationManagementService.keys [as updateConfiguration] (src/services/configurationManagementService.ts:222:30)
      at Object.updateConfiguration (src/__tests__/integration/systemIntegration.test.ts:259:50)

  ● Phase 5.4: System Integration Tests › API Endpoints Integration › Project Creation API Integration › should create project with immediate report generation

    TypeError: Cannot read properties of undefined (reading 'id')

      352 |         // For integration testing, we're testing the service integration
      353 |         const project = await createTestProjectWithData(projectData);
    > 354 |         testProjectIds.push(project.id);
          |                                     ^
      355 |
      356 |         expect(project).toBeDefined();
      357 |         expect(project.id).toBeDefined();

      at Object.id (src/__tests__/integration/systemIntegration.test.ts:354:37)

  ● Phase 5.4: System Integration Tests › Infrastructure Integration › Database Schema Integration › should handle initial reports schema correctly

    TypeError: Cannot read properties of undefined (reading 'id')

      462 |         });
      463 |
    > 464 |         testReportIds.push(report.id);
          |                                   ^
      465 |
      466 |         expect(report).toBeDefined();
      467 |         expect(report.isInitialReport).toBe(true);

      at Object.id (src/__tests__/integration/systemIntegration.test.ts:464:35)

  ● Phase 5.4: System Integration Tests › End-to-End Integration › should complete full user journey with all systems

    Project rrr7nw8m09cv0zdr8zi2ct03 not found

      511 |
      512 |       if (!project) {
    > 513 |         throw new Error(`Project ${projectId} not found`);
          |               ^
      514 |       }
      515 |
      516 |       const missingData: string[] = [];

      at InitialComparativeReportService.validateProjectReadiness (src/services/reports/initialComparativeReportService.ts:513:15)
      at Object.<anonymous> (src/__tests__/integration/systemIntegration.test.ts:580:31)

FAIL src/__tests__/e2e/workflowValidation.test.ts
  ● Product vs Competitor Workflow E2E › Phase 4.1: Complete Workflow Testing › should extract valid project data from chat message

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      35 |       const extractionResult = projectExtractor.extractProjectData(chatMessage);
      36 |       
    > 37 |       expect(extractionResult.success).toBe(true);
         |                                        ^
      38 |       expect(extractionResult.data).toBeDefined();
      39 |       expect(extractionResult.data!.userEmail).toBe('test-workflow@example.com');
      40 |       expect(extractionResult.data!.projectName).toBe('TestCorp Competitive Analysis');

      at Object.toBe (src/__tests__/e2e/workflowValidation.test.ts:37:40)

  ● Product vs Competitor Workflow E2E › Phase 4.1: Complete Workflow Testing › should generate comprehensive UX-enhanced report

    expect(received).toBe(expected) // Object.is equality

    Expected: "TestCorp Platform"
    Received: "Mock Product"

      319 |
      320 |       // Verify report metadata
    > 321 |       expect(reportResult.report.metadata.productName).toBe('TestCorp Platform');
          |                                                        ^
      322 |       expect(reportResult.report.metadata.competitorCount).toBe(2);
      323 |       const uxConfidenceEntry = reportResult.report.keyFindings.find(finding => 
      324 |         finding.includes('UX Analysis Confidence:')

      at Object.toBe (src/__tests__/e2e/workflowValidation.test.ts:321:56)

FAIL src/__tests__/unit/conversation.test.ts
  ● ConversationManager - Phase 3.1 Integration › Feature Flag Support › should use legacy flow when comprehensive flow is disabled

    expect(received).toBe(expected) // Object.is equality

    Expected: "text"
    Received: "comprehensive_form"

      25 |       const response = await conversationManager.processUserMessage('');
      26 |       
    > 27 |       expect(response.expectedInputType).toBe('text');
         |                                          ^
      28 |       expect(response.message).toContain('Please tell me:');
      29 |       expect(response.message).toContain('Your email address');
      30 |     });

      at Object.toBe (src/__tests__/unit/conversation.test.ts:27:42)

  ● ConversationManager - Phase 3.1 Integration › Feature Flag Support › should respect environment variable for feature flag

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: undefined

      47 |       conversationManager = new ConversationManager();
      48 |       
    > 49 |       expect(conversationManager['useComprehensiveFlow']).toBe(true);
         |                                                           ^
      50 |       
      51 |       // Cleanup
      52 |       delete process.env.ENABLE_COMPREHENSIVE_FLOW;

      at Object.toBe (src/__tests__/unit/conversation.test.ts:49:59)

  ● ConversationManager - Phase 3.1 Integration › Comprehensive Input Handling › should handle complete comprehensive submission

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: undefined

      103 |       const response = await conversationManager.processUserMessage(completeInput);
      104 |
    > 105 |       expect(response.projectCreated).toBe(true);
          |                                       ^
      106 |       expect(response.nextStep).toBe(1.5);
      107 |       expect(response.message).toContain('Project Created Successfully');
      108 |       expect(response.message).toContain('Test Product');

      at Object.toBe (src/__tests__/unit/conversation.test.ts:105:39)

  ● ConversationManager - Phase 3.1 Integration › Comprehensive Input Handling › should handle partial comprehensive submission

    expect(received).toBe(expected) // Object.is equality

    Expected: "comprehensive_form"
    Received: "text"

      138 |
      139 |       expect(response.nextStep).toBe(0);
    > 140 |       expect(response.expectedInputType).toBe('comprehensive_form');
          |                                          ^
      141 |       expect(response.stepDescription).toBe('Complete Project Setup');
      142 |     });
      143 |

      at Object.toBe (src/__tests__/unit/conversation.test.ts:140:42)

  ● ConversationManager - Phase 3.1 Integration › Comprehensive Input Handling › should handle invalid input with validation errors

    expect(received).toBe(expected) // Object.is equality

    Expected: "comprehensive_form"
    Received: "text"

      170 |
      171 |       expect(response.nextStep).toBe(0);
    > 172 |       expect(response.expectedInputType).toBe('comprehensive_form');
          |                                          ^
      173 |     });
      174 |   });
      175 |

      at Object.toBe (src/__tests__/unit/conversation.test.ts:172:42)

  ● ConversationManager - Phase 3.1 Integration › Error Handling › should handle project creation failure gracefully

    expect(received).toContain(expected) // indexOf

    Expected substring: "Error Creating Project"
    Received string:    "🔄 **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    💡 **What happened:** System error occurred: Unexpected processing issue·
    🚀 **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! 🤝"

      252 |
      253 |       expect(response.error).toBeDefined();
    > 254 |       expect(response.message).toContain('Error Creating Project');
          |                                ^
      255 |       expect(response.message).toContain('retry');
      256 |     });
      257 |

      at Object.toContain (src/__tests__/unit/conversation.test.ts:254:32)

  ● ConversationManager - Phase 3.1 Integration › Error Handling › should handle parsing errors gracefully

    expect(received).toContain(expected) // indexOf

    Expected substring: "error processing your request"
    Received string:    "🔄 **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    💡 **What happened:** System error occurred: Unexpected processing issue·
    🚀 **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! 🤝"

      266 |
      267 |       expect(response.error).toBeDefined();
    > 268 |       expect(response.message).toContain('error processing your request');
          |                                ^
      269 |     });
      270 |   });
      271 |

      at Object.toContain (src/__tests__/unit/conversation.test.ts:268:32)

  ● ConversationManager - Phase 3.1 Integration › Phase 3.2 Enhanced Error Handling › Parsing Error Recovery › should handle parsing errors gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: "Failed to parse input format"
    Received: "Unable to parse input: Format could not be recognized"

      486 |         const response = await conversationManager.processUserMessage(malformedInput);
      487 |
    > 488 |         expect(response.error).toBe('Failed to parse input format');
          |                                ^
      489 |         expect(response.message).toContain('Oops! I had trouble parsing');
      490 |         expect(response.message).toContain('What happened: Failed to parse input format');
      491 |         expect(response.message).toContain('Use numbered list');

      at Object.toBe (src/__tests__/unit/conversation.test.ts:488:32)

  ● ConversationManager - Phase 3.1 Integration › Phase 3.2 Enhanced Error Handling › Parsing Error Recovery › should provide specific guidance for long inputs

    expect(received).toContain(expected) // indexOf

    Expected substring: "Try shorter format"
    Received string:    "🔄 **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    💡 **What happened:** System error occurred: Unexpected processing issue·
    🚀 **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! 🤝"

      504 |         const response = await conversationManager.processUserMessage(longInput);
      505 |
    > 506 |         expect(response.message).toContain('Try shorter format');
          |                                  ^
      507 |         expect(response.message).toContain('breaking it into key points');
      508 |       });
      509 |

      at Object.toContain (src/__tests__/unit/conversation.test.ts:506:34)

  ● ConversationManager - Phase 3.1 Integration › Phase 3.2 Enhanced Error Handling › Parsing Error Recovery › should provide specific guidance for special characters

    expect(received).toContain(expected) // indexOf

    Expected substring: "Simplify formatting"
    Received string:    "🔄 **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    💡 **What happened:** System error occurred: Unexpected processing issue·
    🚀 **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! 🤝"

      517 |         const response = await conversationManager.processUserMessage(specialCharInput);
      518 |
    > 519 |         expect(response.message).toContain('Simplify formatting');
          |                                  ^
      520 |         expect(response.message).toContain('basic punctuation');
      521 |       });
      522 |

      at Object.toContain (src/__tests__/unit/conversation.test.ts:519:34)

  ● ConversationManager - Phase 3.1 Integration › Phase 3.2 Enhanced Error Handling › Parsing Error Recovery › should maintain conversational tone during error recovery

    expect(received).toContain(expected) // indexOf

    Expected substring: "I'm here to help!"
    Received string:    "🔄 **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    💡 **What happened:** System error occurred: Unexpected processing issue·
    🚀 **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! 🤝"

      528 |         const response = await conversationManager.processUserMessage('Error input');
      529 |
    > 530 |         expect(response.message).toContain("I'm here to help!");
          |                                  ^
      531 |         expect(response.message).toContain('😊');
      532 |         expect(response.message).toContain('comfortable for you');
      533 |       });

      at Object.toContain (src/__tests__/unit/conversation.test.ts:530:34)

  ● Phase 4.2: Enhanced Confirmation Display › Comprehensive Confirmation Display › should create comprehensive confirmation display with all sections

    TypeError: Cannot read properties of undefined (reading 'collectedData')

      1144 |     
      1145 |     // *** FIX: Store the requirements in chat state BEFORE showing confirmation ***
    > 1146 |     this.chatState.collectedData = this.comprehensiveCollector.toChatState(collectedData as ComprehensiveProjectRequirements).collectedData;
           |                                                                            ^
      1147 |     
      1148 |     let message = `🎯 **Ready to Create Your Competitive Analysis Project!**\n\n`;
      1149 |     

      at ConversationManager.collectedData [as createComprehensiveConfirmation] (src/lib/chat/conversation.ts:1146:76)
      at Object.<anonymous> (src/__tests__/unit/conversation.test.ts:1056:76)

  ● Phase 4.2: Enhanced Confirmation Display › Comprehensive Confirmation Display › should display all contact and project information correctly

    TypeError: Cannot read properties of undefined (reading 'collectedData')

      1144 |     
      1145 |     // *** FIX: Store the requirements in chat state BEFORE showing confirmation ***
    > 1146 |     this.chatState.collectedData = this.comprehensiveCollector.toChatState(collectedData as ComprehensiveProjectRequirements).collectedData;
           |                                                                            ^
      1147 |     
      1148 |     let message = `🎯 **Ready to Create Your Competitive Analysis Project!**\n\n`;
      1149 |     

      at ConversationManager.collectedData [as createComprehensiveConfirmation] (src/lib/chat/conversation.ts:1146:76)
      at Object.<anonymous> (src/__tests__/unit/conversation.test.ts:1072:76)

  ● Phase 4.2: Enhanced Confirmation Display › Comprehensive Confirmation Display › should display all product information correctly

    TypeError: Cannot read properties of undefined (reading 'collectedData')

      1144 |     
      1145 |     // *** FIX: Store the requirements in chat state BEFORE showing confirmation ***
    > 1146 |     this.chatState.collectedData = this.comprehensiveCollector.toChatState(collectedData as ComprehensiveProjectRequirements).collectedData;
           |                                                                            ^
      1147 |     
      1148 |     let message = `🎯 **Ready to Create Your Competitive Analysis Project!**\n\n`;
      1149 |     

      at ConversationManager.collectedData [as createComprehensiveConfirmation] (src/lib/chat/conversation.ts:1146:76)
      at Object.<anonymous> (src/__tests__/unit/conversation.test.ts:1080:76)

  ● Phase 4.2: Enhanced Confirmation Display › Comprehensive Confirmation Display › should format multiline business context properly

    TypeError: Cannot read properties of undefined (reading 'collectedData')

      1144 |     
      1145 |     // *** FIX: Store the requirements in chat state BEFORE showing confirmation ***
    > 1146 |     this.chatState.collectedData = this.comprehensiveCollector.toChatState(collectedData as ComprehensiveProjectRequirements).collectedData;
           |                                                                            ^
      1147 |     
      1148 |     let message = `🎯 **Ready to Create Your Competitive Analysis Project!**\n\n`;
      1149 |     

      at ConversationManager.collectedData [as createComprehensiveConfirmation] (src/lib/chat/conversation.ts:1146:76)
      at Object.<anonymous> (src/__tests__/unit/conversation.test.ts:1088:76)

  ● Phase 4.2: Enhanced Confirmation Display › Comprehensive Confirmation Display › should include optional enhancements when provided

    TypeError: Cannot read properties of undefined (reading 'collectedData')

      1144 |     
      1145 |     // *** FIX: Store the requirements in chat state BEFORE showing confirmation ***
    > 1146 |     this.chatState.collectedData = this.comprehensiveCollector.toChatState(collectedData as ComprehensiveProjectRequirements).collectedData;
           |                                                                            ^
      1147 |     
      1148 |     let message = `🎯 **Ready to Create Your Competitive Analysis Project!**\n\n`;
      1149 |     

      at ConversationManager.collectedData [as createComprehensiveConfirmation] (src/lib/chat/conversation.ts:1146:76)
      at Object.<anonymous> (src/__tests__/unit/conversation.test.ts:1106:76)

  ● Phase 4.2: Enhanced Confirmation Display › Comprehensive Confirmation Display › should include validation warnings when provided

    TypeError: Cannot read properties of undefined (reading 'collectedData')

      1144 |     
      1145 |     // *** FIX: Store the requirements in chat state BEFORE showing confirmation ***
    > 1146 |     this.chatState.collectedData = this.comprehensiveCollector.toChatState(collectedData as ComprehensiveProjectRequirements).collectedData;
           |                                                                            ^
      1147 |     
      1148 |     let message = `🎯 **Ready to Create Your Competitive Analysis Project!**\n\n`;
      1149 |     

      at ConversationManager.collectedData [as createComprehensiveConfirmation] (src/lib/chat/conversation.ts:1146:76)
      at Object.<anonymous> (src/__tests__/unit/conversation.test.ts:1127:76)

  ● Phase 4.2: Enhanced Confirmation Display › Comprehensive Confirmation Display › should include data quality assessment

    TypeError: Cannot read properties of undefined (reading 'collectedData')

      1144 |     
      1145 |     // *** FIX: Store the requirements in chat state BEFORE showing confirmation ***
    > 1146 |     this.chatState.collectedData = this.comprehensiveCollector.toChatState(collectedData as ComprehensiveProjectRequirements).collectedData;
           |                                                                            ^
      1147 |     
      1148 |     let message = `🎯 **Ready to Create Your Competitive Analysis Project!**\n\n`;
      1149 |     

      at ConversationManager.collectedData [as createComprehensiveConfirmation] (src/lib/chat/conversation.ts:1146:76)
      at Object.<anonymous> (src/__tests__/unit/conversation.test.ts:1137:76)

  ● Phase 4.2: Enhanced Confirmation Display › Comprehensive Confirmation Display › should include clear next step instructions

    TypeError: Cannot read properties of undefined (reading 'collectedData')

      1144 |     
      1145 |     // *** FIX: Store the requirements in chat state BEFORE showing confirmation ***
    > 1146 |     this.chatState.collectedData = this.comprehensiveCollector.toChatState(collectedData as ComprehensiveProjectRequirements).collectedData;
           |                                                                            ^
      1147 |     
      1148 |     let message = `🎯 **Ready to Create Your Competitive Analysis Project!**\n\n`;
      1149 |     

      at ConversationManager.collectedData [as createComprehensiveConfirmation] (src/lib/chat/conversation.ts:1146:76)
      at Object.<anonymous> (src/__tests__/unit/conversation.test.ts:1146:76)

  ● Phase 4.2: Enhanced Confirmation Display › Confirmation Response Handling › should handle edit requests

    expect(received).toContain(expected) // indexOf

    Expected substring: "Edit Your Information"
    Received string:    "🤔 **I didn't quite understand your response.**·
    Please choose one of the following:·
    • **\"yes\"** - Create the project and start analysis
    • **\"edit\"** - Modify the information
    • **\"cancel\"** - Start over·
    What would you like to do?"

      1267 |         const result = await conversationManager['handleConfirmationResponse'](response);
      1268 |         
    > 1269 |         expect(result.message).toContain('Edit Your Information');
           |                                ^
      1270 |         expect(result.nextStep).toBe(0);
      1271 |         expect(result.stepDescription).toBe('Edit Project Information');
      1272 |         expect(result.expectedInputType).toBe('comprehensive_form');

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1269:32)

  ● Phase 4.2: Enhanced Confirmation Display › Confirmation Response Handling › should handle cancellation requests

    expect(received).toContain(expected) // indexOf

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      1281 |         
      1282 |         // Should return to project initialization
    > 1283 |         expect(result.message).toContain('comprehensive form');
           |                                ^
      1284 |         expect(result.expectedInputType).toBe('comprehensive_form');
      1285 |       }
      1286 |     });

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1283:32)

  ● Phase 4.2: Enhanced Confirmation Display › Integration with Validation › should integrate validation results into confirmation display

    TypeError: Cannot read properties of undefined (reading 'collectedData')

      1144 |     
      1145 |     // *** FIX: Store the requirements in chat state BEFORE showing confirmation ***
    > 1146 |     this.chatState.collectedData = this.comprehensiveCollector.toChatState(collectedData as ComprehensiveProjectRequirements).collectedData;
           |                                                                            ^
      1147 |     
      1148 |     let message = `🎯 **Ready to Create Your Competitive Analysis Project!**\n\n`;
      1149 |     

      at ConversationManager.collectedData [as createComprehensiveConfirmation] (src/lib/chat/conversation.ts:1146:76)
      at Object.<anonymous> (src/__tests__/unit/conversation.test.ts:1359:76)

  ● Phase 4.2: Enhanced Confirmation Display › Integration with Validation › should limit warnings and suggestions display

    TypeError: Cannot read properties of undefined (reading 'collectedData')

      1144 |     
      1145 |     // *** FIX: Store the requirements in chat state BEFORE showing confirmation ***
    > 1146 |     this.chatState.collectedData = this.comprehensiveCollector.toChatState(collectedData as ComprehensiveProjectRequirements).collectedData;
           |                                                                            ^
      1147 |     
      1148 |     let message = `🎯 **Ready to Create Your Competitive Analysis Project!**\n\n`;
      1149 |     

      at ConversationManager.collectedData [as createComprehensiveConfirmation] (src/lib/chat/conversation.ts:1146:76)
      at Object.<anonymous> (src/__tests__/unit/conversation.test.ts:1378:76)

  ● Phase 5.1: Legacy Session Support › Legacy Session Routing › should route to legacy step handlers when legacy session detected

    expect(received).toContain(expected) // indexOf

    Expected substring: "URL"
    Received string:    "I apologize, but I encountered an error processing your request. Please try again."

      1485 |       
      1486 |       // Should handle legacy step 1 (product data collection)
    > 1487 |       expect(response.message).toContain('URL');
           |                                ^
      1488 |       expect(response.stepDescription).toContain('Product');
      1489 |     });
      1490 |

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1487:32)

  ● Phase 5.1: Legacy Session Support › Migration to New Flow › should handle "migrate now" response

    expect(received).toContain(expected) // indexOf

    Expected substring: "Welcome to the Enhanced Experience"
    Received string:    "🔄 **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    💡 **What happened:** System error occurred: Unexpected processing issue·
    🚀 **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! 🤝"

      1578 |       const response = await manager.processUserMessage('migrate now');
      1579 |       
    > 1580 |       expect(response.message).toContain('Welcome to the Enhanced Experience');
           |                                ^
      1581 |       expect(response.message).toContain('comprehensive form');
      1582 |       expect(response.nextStep).toBe(0);
      1583 |       expect(response.stepDescription).toContain('Migrated');

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1580:32)

  ● Phase 5.1: Legacy Session Support › Migration to New Flow › should handle "finish legacy" response

    expect(received).toContain(expected) // indexOf

    Expected substring: "Continuing Legacy Session"
    Received string:    "🔄 **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    💡 **What happened:** System error occurred: Unexpected processing issue·
    🚀 **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! 🤝"

      1604 |       const response = await manager.processUserMessage('finish legacy');
      1605 |       
    > 1606 |       expect(response.message).toContain('Continuing Legacy Session');
           |                                ^
      1607 |       expect(response.message).toContain('step-by-step process');
      1608 |       expect(response.message).toContain('Next Time');
      1609 |       expect(response.expectedInputType).toBe('text');

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1606:32)

  ● Phase 5.1: Legacy Session Support › Migration to New Flow › should handle "tell me more" response with feature details

    expect(received).toContain(expected) // indexOf

    Expected substring: "Enhanced Flow Features"
    Received string:    "🔄 **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    💡 **What happened:** System error occurred: Unexpected processing issue·
    🚀 **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! 🤝"

      1629 |       const response = await manager.processUserMessage('tell me more');
      1630 |       
    > 1631 |       expect(response.message).toContain('Enhanced Flow Features');
           |                                ^
      1632 |       expect(response.message).toContain('Speed Improvements');
      1633 |       expect(response.message).toContain('Smart Intelligence');
      1634 |       expect(response.message).toContain('Professional Experience');

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1631:32)

  ● Phase 5.1: Legacy Session Support › Legacy Session Recovery › should handle unknown legacy step with migration prompt

    expect(received).toContain(expected) // indexOf

    Expected substring: "Session State Recovery"
    Received string:    "🚀 **Ready to upgrade your experience?**·
    I can help you get started with our new comprehensive form that's much faster and easier!·
    **Here's what you can do:**·
    📝 **Switch to comprehensive form** - Type \"upgrade\" and I'll show you how to provide all your project information at once·
    🔄 **Continue with current flow** - Type \"continue\" to keep using the step-by-step process·
    ⭐ **Start fresh** - Type \"restart\" to begin a new project·
    What would you prefer?"

      1654 |       const response = await manager.processUserMessage('continue');
      1655 |       
    > 1656 |       expect(response.message).toContain('Session State Recovery');
           |                                ^
      1657 |       expect(response.message).toContain('comprehensive form');
      1658 |       expect(response.message).toContain('50% faster');
      1659 |       expect(response.stepDescription).toBe('Session Recovery');

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1656:32)

  ● Phase 5.1: Legacy Session Support › Legacy Session Recovery › should preserve data during migration

    expect(received).toContain(expected) // indexOf

    Expected substring: "Migration Tip"
    Received string:    "🚀 **Upgrade to Enhanced Experience!**·
    I notice you're using our legacy step-by-step flow. Great news - we've launched a **much faster comprehensive form** that collects all requirements at once!·
    **🆕 New Flow Benefits:**
    • **⚡ 50% Faster** - Single form vs. 7+ sequential steps
    • **🎯 Clear Overview** - See all requirements upfront
    • **🧠 Smart Validation** - Intelligent error checking and suggestions
    • **📊 Professional Confirmation** - Beautiful project summary before creation
    • **✨ Same Great Results** - Identical high-quality competitive analysis·
    **🔄 Migration Options:**
    1. **\"migrate now\"** - Switch to the new flow immediately (recommended)
    2. **\"finish legacy\"** - Complete current session, try new flow next time
    3. **\"tell me more\"** - Learn more about the new features·
    **Your Progress:** Don't worry - all your current data is preserved regardless of your choice!·
    What would you like to do?"

      1678 |       const response = await manager.processUserMessage('migrate now');
      1679 |       
    > 1680 |       expect(response.message).toContain('Migration Tip');
           |                                ^
      1681 |       expect(response.message).toContain('merge everything together');
      1682 |       
      1683 |       // Check that data is preserved in chat state

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1680:32)

  ● Phase 5.1: Legacy Session Support › Legacy Error Handling › should offer migration when legacy step encounters error

    expect(received).toContain(expected) // indexOf

    Expected substring: "Upgrade to Enhanced Experience"
    Received string:    "I apologize, but I encountered an error processing your request. Please try again."

      1717 |       const response = await manager.processUserMessage('Test Product');
      1718 |       
    > 1719 |       expect(response.message).toContain('Upgrade to Enhanced Experience');
           |                                ^
      1720 |       expect(response.message).toContain('Error in legacy flow');
      1721 |     });
      1722 |

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1719:32)

  ● Phase 5.1: Legacy Session Support › Legacy Flow Completion › should handle legacy step 6 final completion

    expect(received).toContain(expected) // indexOf

    Expected substring: "consolidated competitive report"
    Received string:    "Perfect! I'll send the consolidated comparative report to test@company.com now.·
    📧 **Email Summary:**
    • **To:** test@company.com
    • **Subject:** Consolidated Competitive Analysis - Test Project
    • **Content:** Executive summary + link to full comparative report
    • **Delivery:** Within the next few minutes·
    💡 **Future Projects:** Try our new single-form flow - it's 50% faster with the same great results!·
    🎉 **Legacy Session Complete!**·
    Your consolidated competitor research project \"Test Project\" is now active with:
    • **✅ Project Created:** test-project-id
    • **✅ Consolidated Reporting:** Single comparative report per analysis cycle
    • **✅ AI-Powered Analysis:** Claude-driven competitive intelligence
    • **✅ Strategic Insights:** Market-wide competitive analysis·
    **Next Steps:**
    • Check the **Reports section** for your comparative analysis
    • Visit the **Projects section** to manage your project
    • **Try our new flow** for your next project - type \"start new project\"·
    🚀 **Ready for the Enhanced Experience?** Our new single-form flow provides the same excellent results in 50% less time!·
    Thank you for using the Competitor Research Agent!"

      1792 |       
      1793 |       expect(response.message).toContain('Legacy Session Complete');
    > 1794 |       expect(response.message).toContain('consolidated competitive report');
           |                                ^
      1795 |       expect(response.message).toContain('test@company.com');
      1796 |       expect(response.message).toContain('Thank you for using');
      1797 |       expect(response.isComplete).toBe(true);

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1794:32)

  ● Phase 5.1: Legacy Session Support › Backward Compatibility › should detect comprehensive flow for new sessions

    expect(received).toContain(expected) // indexOf

    Expected substring: "Welcome to the HelloFresh"
    Received string:    "🔄 **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    💡 **What happened:** System error occurred: Unexpected processing issue·
    🚀 **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! 🤝"

      1866 |       
      1867 |       // Should start with comprehensive flow for new sessions
    > 1868 |       expect(response.message).toContain('Welcome to the HelloFresh');
           |                                ^
      1869 |       expect(response.expectedInputType).toBe('comprehensive_form');
      1870 |       expect(response.stepDescription).toBe('Complete Project Setup');
      1871 |     });

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1868:32)

  ● Phase 5.2: Direct Migration to New Flow › Default Comprehensive Flow › should default to comprehensive flow for new sessions

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      1883 |       
      1884 |       // Phase 5.2: Should default to comprehensive flow
    > 1885 |       expect(chatState.useComprehensiveFlow).toBe(true);
           |                                              ^
      1886 |     });
      1887 |
      1888 |     test('should start with comprehensive form for project initialization', async () => {

      at Object.toBe (src/__tests__/unit/conversation.test.ts:1885:46)

  ● Phase 5.2: Direct Migration to New Flow › Default Comprehensive Flow › should start with comprehensive form for project initialization

    expect(received).toContain(expected) // indexOf

    Expected substring: "Welcome to the HelloFresh"
    Received string:    "🔄 **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    💡 **What happened:** System error occurred: Unexpected processing issue·
    🚀 **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! 🤝"

      1891 |       const response = await manager.processUserMessage('start new project');
      1892 |       
    > 1893 |       expect(response.message).toContain('Welcome to the HelloFresh');
           |                                ^
      1894 |       expect(response.message).toContain('comprehensive');
      1895 |       expect(response.expectedInputType).toBe('comprehensive_form');
      1896 |       expect(response.stepDescription).toBe('Complete Project Setup');

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1893:32)

  ● Phase 5.2: Direct Migration to New Flow › Default Comprehensive Flow › should use comprehensive prompt by default

    expect(received).toContain(expected) // indexOf

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      1903 |       const response = (manager as any).handleProjectInitialization();
      1904 |       
    > 1905 |       expect(response.message).toContain('Welcome to the HelloFresh');
           |                                ^
      1906 |       expect(response.expectedInputType).toBe('comprehensive_form');
      1907 |       expect(response.stepDescription).toBe('Complete Project Setup');
      1908 |     });

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1905:32)

  ● Phase 5.2: Direct Migration to New Flow › Comprehensive Flow Processing › should process complete comprehensive input successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: 1.5
    Received: 0

      1932 |       
      1933 |       // Should move to confirmation step
    > 1934 |       expect(response.nextStep).toBe(1.5);
           |                                 ^
      1935 |       expect(response.stepDescription).toContain('Confirmation');
      1936 |       expect(response.message).toContain('Please review');
      1937 |     });

      at Object.toBe (src/__tests__/unit/conversation.test.ts:1934:33)

  ● Phase 5.2: Direct Migration to New Flow › Comprehensive Flow Processing › should handle partial comprehensive input with guidance

    expect(received).toBe(expected) // Object.is equality

    Expected: "Complete Project Setup"
    Received: "Error Recovery"

      1954 |       // Should stay in step 0 with guidance
      1955 |       expect(response.nextStep).toBe(0);
    > 1956 |       expect(response.stepDescription).toBe('Complete Project Setup');
           |                                        ^
      1957 |       expect(response.message).toContain('Still need');
      1958 |     });
      1959 |   });

      at Object.toBe (src/__tests__/unit/conversation.test.ts:1956:40)

  ● Phase 5.2: Direct Migration to New Flow › Fallback Mechanisms › should fallback to legacy flow when comprehensive parsing fails

    expect(received).toContain(expected) // indexOf

    Expected substring: "Legacy Fallback"
    Received string:    "🔄 **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    💡 **What happened:** System error occurred: Unexpected processing issue·
    🚀 **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! 🤝"

      1983 |       
      1984 |       // Should fallback gracefully
    > 1985 |       expect(response.message).toContain('Legacy Fallback');
           |                                ^
      1986 |       expect(response.stepDescription).toContain('Legacy Fallback');
      1987 |     });
      1988 |

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1985:32)

  ● Phase 5.2: Direct Migration to New Flow › Fallback Mechanisms › should provide guidance when both parsing methods fail

    expect(received).toContain(expected) // indexOf

    Expected substring: "help you get started"
    Received string:    "🔄 **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    💡 **What happened:** System error occurred: Unexpected processing issue·
    🚀 **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! 🤝"

      2020 |       
      2021 |       // Should provide helpful guidance
    > 2022 |       expect(response.message).toContain('help you get started');
           |                                ^
      2023 |       expect(response.message).toContain('comprehensive form');
      2024 |       expect(response.expectedInputType).toBe('comprehensive_form');
      2025 |     });

      at Object.toContain (src/__tests__/unit/conversation.test.ts:2022:32)

  ● Phase 5.2: Direct Migration to New Flow › Fallback Mechanisms › should handle complete parsing failure with step-by-step guidance

    expect(received).toContain(expected) // indexOf

    Expected substring: "start fresh"
    Received string:    "🔄 **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    💡 **What happened:** System error occurred: Unexpected processing issue·
    🚀 **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! 🤝"

      2047 |       
      2048 |       // Should provide basic step-by-step guidance
    > 2049 |       expect(response.message).toContain('start fresh');
           |                                ^
      2050 |       expect(response.message).toContain('step-by-step');
      2051 |       expect(response.stepDescription).toContain('Guided');
      2052 |     });

      at Object.toContain (src/__tests__/unit/conversation.test.ts:2049:32)

  ● Phase 5.2: Direct Migration to New Flow › Error Recovery and User Guidance › should provide helpful examples when parsing fails

    expect(received).toContain(expected) // indexOf

    Expected substring: "Example format"
    Received string:    "🔄 **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    💡 **What happened:** System error occurred: Unexpected processing issue·
    🚀 **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! 🤝"

      2110 |       
      2111 |       // Should provide examples and guidance
    > 2112 |       expect(response.message).toContain('Example format');
           |                                ^
      2113 |       expect(response.message).toContain('john.doe@company.com');
      2114 |       expect(response.message).toContain('numbered lists');
      2115 |       expect(response.expectedInputType).toBe('comprehensive_form');

      at Object.toContain (src/__tests__/unit/conversation.test.ts:2112:32)

  ● Phase 5.2: Direct Migration to New Flow › Error Recovery and User Guidance › should maintain user data during error recovery

    expect(received).toContain(expected) // indexOf

    Expected substring: "Still need"
    Received string:    "🔄 **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    💡 **What happened:** System error occurred: Unexpected processing issue·
    🚀 **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! 🤝"

      2126 |       
      2127 |       // Should preserve data and ask for missing fields
    > 2128 |       expect(response.message).toContain('Still need');
           |                                ^
      2129 |       expect(response.nextStep).toBe(0);
      2130 |       
      2131 |       // Check that partial data is preserved

      at Object.toContain (src/__tests__/unit/conversation.test.ts:2128:32)

  ● Phase 5.2: Direct Migration to New Flow › Error Recovery and User Guidance › should provide progressive completion encouragement

    expect(received).toContain(expected) // indexOf

    Expected substring: "Good"
    Received string:    "🔄 **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    💡 **What happened:** System error occurred: Unexpected processing issue·
    🚀 **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! 🤝"

      2151 |       
      2152 |       // Should provide encouraging message about progress
    > 2153 |       expect(response.message).toContain('progress') || expect(response.message).toContain('Good');
           |                                                                                  ^
      2154 |       expect(response.nextStep).toBe(0);
      2155 |     });
      2156 |   });

      at Object.toContain (src/__tests__/unit/conversation.test.ts:2153:82)

  ● Phase 5.2: Direct Migration to New Flow › Performance and Reliability › should handle concurrent comprehensive form submissions

    expect(received).toBe(expected) // Object.is equality

    Expected: 1.5
    Received: 0

      2183 |       // All should succeed
      2184 |       responses.forEach(response => {
    > 2185 |         expect(response.nextStep).toBe(1.5);
           |                                   ^
      2186 |         expect(response.stepDescription).toContain('Confirmation');
      2187 |       });
      2188 |     });

      at toBe (src/__tests__/unit/conversation.test.ts:2185:35)
          at Array.forEach (<anonymous>)
      at Object.forEach (src/__tests__/unit/conversation.test.ts:2184:17)

  ● Phase 5.2: Direct Migration to New Flow › Integration with Existing Features › should maintain compatibility with validation features

    expect(received).toContain(expected) // indexOf

    Expected substring: "email"
    Received string:    "🔄 **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    💡 **What happened:** System error occurred: Unexpected processing issue·
    🚀 **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! 🤝"

      2234 |       
      2235 |       // Should provide validation feedback
    > 2236 |       expect(response.message).toContain('email') || expect(response.message).toContain('URL');
           |                                ^
      2237 |       expect(response.nextStep).toBe(0);
      2238 |     });
      2239 |

      at Object.toContain (src/__tests__/unit/conversation.test.ts:2236:32)

  ● Phase 5.2: Direct Migration to New Flow › Integration with Existing Features › should integrate with confirmation flow

    expect(received).toBe(expected) // Object.is equality

    Expected: 1.5
    Received: 0

      2258 |       
      2259 |       // Should reach confirmation step
    > 2260 |       expect(confirmationResponse.nextStep).toBe(1.5);
           |                                             ^
      2261 |       
      2262 |       // Confirm project creation
      2263 |       const finalResponse = await manager.processUserMessage('yes, create project');

      at Object.toBe (src/__tests__/unit/conversation.test.ts:2260:45)

  ● Phase 5.2: Direct Migration to New Flow › Migration Strategy Validation › should not use feature flags or environment variables

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      2277 |       
      2278 |       // Should default to comprehensive flow regardless of environment
    > 2279 |       expect(chatState.useComprehensiveFlow).toBe(true);
           |                                              ^
      2280 |       
      2281 |       // Should not depend on environment variables
      2282 |       delete process.env.ENABLE_COMPREHENSIVE_FLOW;

      at Object.toBe (src/__tests__/unit/conversation.test.ts:2279:46)

  ● Phase 5.2: Direct Migration to New Flow › Migration Strategy Validation › should provide clear migration path for legacy users

    expect(received).toContain(expected) // indexOf

    Expected substring: "Enhanced Experience"
    Received string:    "I apologize, but I encountered an error processing your request. Please try again."

      2302 |       const response = await manager.processUserMessage('I want to try the new flow');
      2303 |       
    > 2304 |       expect(response.message).toContain('Enhanced Experience') || 
           |                                ^
      2305 |              expect(response.message).toContain('comprehensive');
      2306 |     });
      2307 |

      at Object.toContain (src/__tests__/unit/conversation.test.ts:2304:32)

  ● Phase 5.2: Direct Migration to New Flow › Migration Strategy Validation › should maintain zero breaking changes for existing users

    expect(received).toContain(expected) // indexOf

    Expected substring: "analysis"
    Received string:    "⚠️ **Report Generation Issue**·
    I encountered an error while generating your consolidated comparative report: Failed to parse URL from /api/reports/comparative?projectId=existing-project-123·
    **What happened:** The new consolidated reporting system had an issue, but don't worry - your project and data are saved.·
    **Next steps:**
    1. **Retry** - Try again in a few minutes
    2. **Migrate** - Switch to our improved single-form flow for better reliability
    3. **Support** - Get help with this issue·
    **Project Details:**
    - **Project:** undefined
    - **Project ID:** existing-project-123
    - **Product:** Existing Product·
    Please respond with \"retry\", \"migrate\", or \"support\"."

      2325 |       expect(response.nextStep).toBe(5);
      2326 |       expect(response.message).toContain('Report') || 
    > 2327 |              expect(response.message).toContain('analysis');
           |                                       ^
      2328 |       
      2329 |       // State should be preserved
      2330 |       const chatState = manager.getChatState();

      at Object.toContain (src/__tests__/unit/conversation.test.ts:2327:39)

FAIL src/__tests__/e2e/productVsCompetitorWorkflow.test.ts
  ● Product vs Competitor Workflow E2E › Phase 4.1: Complete Workflow Testing › should extract valid project data from chat message

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      35 |       const extractionResult = projectExtractor.extractProjectData(chatMessage);
      36 |       
    > 37 |       expect(extractionResult.success).toBe(true);
         |                                        ^
      38 |       expect(extractionResult.data).toBeDefined();
      39 |       expect(extractionResult.data!.userEmail).toBe('test-workflow@example.com');
      40 |       expect(extractionResult.data!.projectName).toBe('TestCorp Competitive Analysis');

      at Object.toBe (src/__tests__/e2e/productVsCompetitorWorkflow.test.ts:37:40)

  ● Product vs Competitor Workflow E2E › Phase 4.1: Complete Workflow Testing › should generate comprehensive UX-enhanced report

    expect(received).toBe(expected) // Object.is equality

    Expected: "TestCorp Platform"
    Received: "Mock Product"

      302 |
      303 |       // Verify report metadata
    > 304 |       expect(reportResult.report.metadata.productName).toBe('TestCorp Platform');
          |                                                        ^
      305 |       expect(reportResult.report.metadata.competitorCount).toBe(2);
      306 |       expect(reportResult.report.keyFindings).toContain('UX Analysis Confidence:');
      307 |

      at Object.toBe (src/__tests__/e2e/productVsCompetitorWorkflow.test.ts:304:56)

  ● Product vs Competitor Workflow E2E › Phase 4.1: Complete Workflow Testing › should handle error scenarios gracefully

    expect(received).toContain(expected) // indexOf

    Expected substring: "Invalid input"
    Received string:    "fail is not defined"

      350 |       } catch (error) {
      351 |         expect(error).toBeInstanceOf(Error);
    > 352 |         expect(error.message).toContain('Invalid input');
          |                               ^
      353 |       }
      354 |
      355 |       logger.info('Error scenario validation complete');

      at Object.toContain (src/__tests__/e2e/productVsCompetitorWorkflow.test.ts:352:31)

FAIL src/services/reports/__tests__/partialDataReportGenerator.test.ts
  ● PartialDataReportGenerator › generatePartialDataReport › should clearly indicate data gaps and freshness in report

    expect(received).toContain(expected) // indexOf

    Expected substring: "Overall Completeness Score: 45%"
    Received string:    "# Data Completeness & Limitations·
    ## Report Data Quality
    **Overall Completeness Score:** 45%··
    **Data Freshness:** existing··
    **Quality Tier:** enhanced·
    ## Available Data Sources
    - **Product Information:** ✅ Complete
    - **Competitor Data:** ✅ Available
    - **Fresh Snapshots:** 0/3 captured
    - **Total Competitors:** 3·
    ## Moderate Data Gaps (Medium Impact)
    - **Data Freshness:** Using existing snapshots instead of fresh captures·
    ## Improving Report Quality·
    To enhance the accuracy and completeness of future reports:·
    - Schedule fresh competitor snapshot capture·
    ## Data Collection Status
    This report was generated with the best available data at the time of creation. For the most current competitive intelligence, consider scheduling regular competitor data collection and snapshot updates.
    "

      280 |       const dataGapSection = report.sections.find(s => s.type === 'data_gaps');
      281 |       expect(dataGapSection).toBeDefined();
    > 282 |       expect(dataGapSection!.content).toContain('Overall Completeness Score: 45%');
          |                                       ^
      283 |       expect(dataGapSection!.content).toContain('Data Freshness: existing');
      284 |       expect(dataGapSection!.content).toContain('Fresh Snapshots: 0/3 captured');
      285 |       expect(dataGapSection!.content).toContain('Moderate Data Gaps (Medium Impact)');

      at Object.toContain (src/services/reports/__tests__/partialDataReportGenerator.test.ts:282:39)

  ● PartialDataReportGenerator › generatePartialDataReport › should provide actionable recommendations despite partial data

    expect(received).toContain(expected) // indexOf

    Expected value: "Capture fresh competitor website snapshots for current market intelligence"
    Received array: ["Improve feature X", "Enhance UX"]

      326 |
      327 |       expect(report.strategicRecommendations.immediate).toContain('Improve feature X');
    > 328 |       expect(report.strategicRecommendations.immediate).toContain('Capture fresh competitor website snapshots for current market intelligence');
          |                                                         ^
      329 |       expect(report.strategicRecommendations.shortTerm).toContain('Establish ongoing competitive intelligence process');
      330 |       expect(report.strategicRecommendations.longTerm).toContain('Build comprehensive competitive intelligence capability');
      331 |     });

      at Object.toContain (src/services/reports/__tests__/partialDataReportGenerator.test.ts:328:57)

  ● PartialDataReportGenerator › generatePartialDataReport › should handle mixed fresh and stale data scenarios

    expect(received).toContain(expected) // indexOf

    Expected substring: "Fresh Snapshots: 2/4 captured"
    Received string:    "# Data Completeness & Limitations·
    ## Report Data Quality
    **Overall Completeness Score:** 65%··
    **Data Freshness:** mixed··
    **Quality Tier:** enhanced·
    ## Available Data Sources
    - **Product Information:** ✅ Complete
    - **Competitor Data:** ✅ Available
    - **Fresh Snapshots:** 2/4 captured
    - **Total Competitors:** 4·
    ## Moderate Data Gaps (Medium Impact)
    - **Mixed Data Freshness:** 2 competitors have fresh data, 2 have existing data·
    ## Improving Report Quality·
    To enhance the accuracy and completeness of future reports:·
    - Capture fresh snapshots for all competitors·
    ## Data Collection Status
    This report was generated with the best available data at the time of creation. For the most current competitive intelligence, consider scheduling regular competitor data collection and snapshot updates.
    "

      414 |       
      415 |       const dataGapSection = report.sections.find(s => s.type === 'data_gaps');
    > 416 |       expect(dataGapSection!.content).toContain('Fresh Snapshots: 2/4 captured');
          |                                       ^
      417 |       expect(dataGapSection!.content).toContain('Mixed Data Freshness');
      418 |     });
      419 |

      at Object.toContain (src/services/reports/__tests__/partialDataReportGenerator.test.ts:416:39)

  ● PartialDataReportGenerator › generatePartialDataReport › should create placeholder sections when section generation fails

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      539 |         section.content.includes('Data Completeness: 25%')
      540 |       );
    > 541 |       expect(hasPlaceholderContent).toBe(true);
          |                                     ^
      542 |     });
      543 |   });
      544 |

      at Object.toBe (src/services/reports/__tests__/partialDataReportGenerator.test.ts:541:37)

FAIL src/__tests__/integration/productVsCompetitorApiIntegration.test.ts
  ● PRODUCT vs COMPETITOR API Integration Tests - Fix 7.1c Applied › Comparative Report API Endpoints - Fix 7.1c Applied › should get comparative report status with realistic tracking

    TypeError: mockWorkflow.apiService.getComparativeStatus is not a function

      322 |       console.log('🚀 Testing comparative report status API with Fix 7.1c...');
      323 |
    > 324 |       const mockApiResponse = await mockWorkflow.apiService.getComparativeStatus({ productId: testProductId });
          |                                                             ^
      325 |
      326 |       expect(mockApiResponse.status).toBe(200);
      327 |       expect(mockApiResponse.data.success).toBe(true);

      at Object.getComparativeStatus (src/__tests__/integration/productVsCompetitorApiIntegration.test.ts:324:61)

  ● PRODUCT vs COMPETITOR API Integration Tests - Fix 7.1c Applied › Report Scheduling API Endpoints - Fix 7.1c Applied › should create report schedule with realistic workflow patterns

    TypeError: mockWorkflow.apiService.createSchedule is not a function

      354 |       };
      355 |
    > 356 |       const mockApiResponse = await mockWorkflow.apiService.createSchedule(scheduleData);
          |                                                             ^
      357 |
      358 |       expect(mockApiResponse.status).toBe(200);
      359 |       expect(mockApiResponse.data.success).toBe(true);

      at Object.createSchedule (src/__tests__/integration/productVsCompetitorApiIntegration.test.ts:356:61)

  ● PRODUCT vs COMPETITOR API Integration Tests - Fix 7.1c Applied › Report Scheduling API Endpoints - Fix 7.1c Applied › should get schedules with realistic pagination and filtering

    TypeError: mockWorkflow.apiService.getSchedules is not a function

      377 |       console.log('🚀 Testing schedule retrieval API with Fix 7.1c...');
      378 |
    > 379 |       const mockApiResponse = await mockWorkflow.apiService.getSchedules({ 
          |                                                             ^
      380 |         productId: testProductId,
      381 |         page: 1,
      382 |         limit: 10 

      at Object.getSchedules (src/__tests__/integration/productVsCompetitorApiIntegration.test.ts:379:61)

  ● PRODUCT vs COMPETITOR API Integration Tests - Fix 7.1c Applied › End-to-End API Workflow - Fix 7.1c Applied › should execute complete product vs competitor workflow with realistic data flow

    TypeError: mockWorkflow.apiService.generateAnalysis is not a function

      432 |       };
      433 |
    > 434 |       const analysisResponse = await mockWorkflow.apiService.generateAnalysis(analysisData);
          |                                                              ^
      435 |       expect(analysisResponse.status).toBe(200);
      436 |       const analysisId = analysisResponse.data.data.analysisId;
      437 |

      at Object.generateAnalysis (src/__tests__/integration/productVsCompetitorApiIntegration.test.ts:434:62)

  ● PRODUCT vs COMPETITOR API Integration Tests - Fix 7.1c Applied › End-to-End API Workflow - Fix 7.1c Applied › should handle error scenarios in E2E workflow with realistic error recovery

    TypeError: mockWorkflow.apiService.generateAnalysis is not a function

      506 |       };
      507 |
    > 508 |       const analysisErrorResponse = await mockWorkflow.apiService.generateAnalysis(invalidAnalysisData);
          |                                                                   ^
      509 |       expect(analysisErrorResponse.status).toBe(404);
      510 |       expect(analysisErrorResponse.data.success).toBe(false);
      511 |       expect(analysisErrorResponse.data.error.type).toBe('resource_not_found');

      at Object.generateAnalysis (src/__tests__/integration/productVsCompetitorApiIntegration.test.ts:508:67)

FAIL src/__tests__/integration/crossServiceValidation.test.ts
  ● Cross-Service Integration Tests › Phase 4.1: Integration Testing › should integrate analysis service with report service

    expect(received).toBeGreaterThan(expected)

    Expected: > 0
    Received:   0

      173 |         expect(reportResult).toBeDefined();
      174 |         expect(reportResult.report).toBeDefined();
    > 175 |         expect(reportResult.report.sections.length).toBeGreaterThan(0);
          |                                                     ^
      176 |         expect(reportResult.generationTime).toBeDefined();
      177 |
      178 |         logger.info('Analysis-Report integration test completed', {

      at toBeGreaterThan (src/__tests__/integration/crossServiceValidation.test.ts:175:53)
      at Object.<anonymous> (src/__tests__/integration/crossServiceValidation.test.ts:189:7)

  ● Cross-Service Integration Tests › Phase 4.1: Integration Testing › should validate UX analyzer integration with report service

    expect(received).toBeDefined()

    Received: undefined

      259 |         // Step 2: Verify UX analysis can be used in report generation
      260 |         // This validates that the UX analyzer output format is compatible with report service
    > 261 |         expect(uxAnalysis.metadata).toBeDefined();
          |                                     ^
      262 |         expect(uxAnalysis.metadata.correlationId).toBeDefined();
      263 |         expect(uxAnalysis.metadata.analyzedAt).toBeDefined();
      264 |

      at toBeDefined (src/__tests__/integration/crossServiceValidation.test.ts:261:37)
      at Object.<anonymous> (src/__tests__/integration/crossServiceValidation.test.ts:275:7)

  ● Cross-Service Integration Tests › Phase 4.1: Integration Testing › should validate data consistency across services

    expect(received).toBe(expected) // Object.is equality

    Expected: "Consistency Test Product"
    Received: undefined

      514 |
      515 |       // Verify report data consistency
    > 516 |       expect(reportResult.report.metadata.productName).toBe('Consistency Test Product');
          |                                                        ^
      517 |       expect(reportResult.report.metadata.competitorCount).toBe(1);
      518 |       expect(reportResult.report.metadata.analysisId).toBe(analysis.id);
      519 |

      at Object.toBe (src/__tests__/integration/crossServiceValidation.test.ts:516:56)

  ● Cross-Service Integration Tests › Phase 4.1: API Integration Testing › should validate service configuration and initialization

    expect(received).toBe(expected) // Object.is equality

    Expected: "ComparativeAnalysisService"
    Received: "Object"

      548 |     it('should validate service configuration and initialization', async () => {
      549 |       // Verify services are properly initialized (check constructor names since Jest mocks may interfere)
    > 550 |       expect(analysisService.constructor.name).toBe('ComparativeAnalysisService');
          |                                                ^
      551 |       expect(reportService.constructor.name).toBe('ComparativeReportService');
      552 |       expect(uxAnalyzer.constructor.name).toBe('UserExperienceAnalyzer');
      553 |       expect(autoReportService.constructor.name).toBe('AutoReportGenerationService');

      at Object.toBe (src/__tests__/integration/crossServiceValidation.test.ts:550:48)

FAIL src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts
  ● EnhancedProjectExtractor › Structured Input (Backward Compatible) › should extract basic project information from structured input

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      15 |       const result = enhancedProjectExtractor.extractProjectData(message);
      16 |
    > 17 |       expect(result.success).toBe(true);
         |                              ^
      18 |       expect(result.data).toEqual({
      19 |         userEmail: 'user@company.com',
      20 |         frequency: 'Weekly',

      at Object.toBe (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:17:30)

  ● EnhancedProjectExtractor › Structured Input (Backward Compatible) › should handle missing product website gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      39 |       const result = enhancedProjectExtractor.extractProjectData(message);
      40 |
    > 41 |       expect(result.success).toBe(true);
         |                              ^
      42 |       expect(result.data?.productWebsite).toBeUndefined();
      43 |       expect(result.suggestions).toContain('Consider including your product website URL for better analysis');
      44 |     });

      at Object.toBe (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:41:30)

  ● EnhancedProjectExtractor › Structured Input (Backward Compatible) › should fail with insufficient information

    expect(received).toContain(expected) // indexOf

    Expected value: "Project name too short or missing in third line"
    Received array: ["Failed to parse project information: this.extractFromLineByLineFormat is not a function"]

      53 |
      54 |       expect(result.success).toBe(false);
    > 55 |       expect(result.errors).toContain('Project name too short or missing in third line');
         |                             ^
      56 |     });
      57 |
      58 |     it('should validate email format', () => {

      at Object.toContain (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:55:29)

  ● EnhancedProjectExtractor › Structured Input (Backward Compatible) › should validate email format

    expect(received).toContain(expected) // indexOf

    Expected value: "Invalid email address format in first line"
    Received array: ["Failed to parse project information: this.extractFromLineByLineFormat is not a function"]

      66 |
      67 |       expect(result.success).toBe(false);
    > 68 |       expect(result.errors).toContain('Invalid email address format in first line');
         |                             ^
      69 |     });
      70 |
      71 |     it('should validate frequency format', () => {

      at Object.toContain (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:68:29)

  ● EnhancedProjectExtractor › Structured Input (Backward Compatible) › should validate frequency format

    expect(received).toContain(expected) // indexOf

    Expected value: "Invalid frequency in second line"
    Received array: ["Failed to parse project information: this.extractFromLineByLineFormat is not a function"]

      79 |
      80 |       expect(result.success).toBe(false);
    > 81 |       expect(result.errors).toContain('Invalid frequency in second line');
         |                             ^
      82 |     });
      83 |   });
      84 |

      at Object.toContain (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:81:29)

  ● EnhancedProjectExtractor › Unstructured Input (Intelligent Parsing) › should extract information from natural language input

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

       96 |       const result = enhancedProjectExtractor.extractProjectData(message);
       97 |
    >  98 |       expect(result.success).toBe(true);
          |                              ^
       99 |       expect(result.data?.userEmail).toBe('john@startup.com');
      100 |       expect(result.data?.frequency).toBe('weekly');
      101 |       expect(result.data?.projectName).toBe('Startup Competitive Analysis');

      at Object.toBe (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:98:30)

  ● EnhancedProjectExtractor › Unstructured Input (Intelligent Parsing) › should handle mixed format input

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      115 |       const result = enhancedProjectExtractor.extractProjectData(message);
      116 |
    > 117 |       expect(result.success).toBe(true);
          |                              ^
      118 |       expect(result.data?.userEmail).toBe('sarah@foodtech.com');
      119 |       expect(result.data?.frequency).toBe('monthly');
      120 |       expect(result.data?.projectName).toBe('Food Delivery Analysis');

      at Object.toBe (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:117:30)

  ● EnhancedProjectExtractor › Unstructured Input (Intelligent Parsing) › should fail gracefully with missing required information

    expect(received).toContain(expected) // indexOf

    Expected value: "Email address not found in message"
    Received array: ["Failed to parse project information: this.extractFromLineByLineFormat is not a function"]

      131 |
      132 |       expect(result.success).toBe(false);
    > 133 |       expect(result.errors).toContain('Email address not found in message');
          |                             ^
      134 |       expect(result.errors).toContain('Report frequency not specified');
      135 |       expect(result.errors).toContain('Project name not identified');
      136 |     });

      at Object.toContain (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:133:29)

  ● EnhancedProjectExtractor › URL Validation › should validate and clean URLs correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      157 |
      158 |         const result = enhancedProjectExtractor.extractProjectData(message);
    > 159 |         expect(result.success).toBe(true);
          |                                ^
      160 |         expect(result.data?.productWebsite).toBe(expected);
      161 |       });
      162 |     });

      at toBe (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:159:32)
          at Array.forEach (<anonymous>)
      at Object.forEach (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:150:17)

  ● EnhancedProjectExtractor › Error Messages › should return empty string for successful extractions

    expect(received).toBe(expected) // Object.is equality

    Expected: ""
    Received: "⚠️ **Missing Required Information**·
    **Issues Found:**
    1. Failed to parse project information: this.extractFromLineByLineFormat is not a function·
    **Please provide:**
    • Please provide your information in this format:
    • 1. Email address
    • 2. Report frequency (Weekly/Monthly)
    • 3. Project name
    • 4. Product website URL
    • 5. Product name (optional)
    • 6. Industry (optional)·
    **💡 Tip:** You can provide information in any order or format. I'll extract what I need!"

      213 |       const errorMessage = enhancedProjectExtractor.createActionableErrorMessage(result);
      214 |
    > 215 |       expect(errorMessage).toBe('');
          |                            ^
      216 |     });
      217 |   });
      218 |

      at Object.toBe (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:215:28)

  ● EnhancedProjectExtractor › Product Name Extraction › should extract product name from project name patterns

    expect(received).toBe(expected) // Object.is equality

    Expected: "Good Chop"
    Received: undefined

      272 |
      273 |         const result = enhancedProjectExtractor.extractProjectData(message);
    > 274 |         expect(result.data?.productName).toBe(expected);
          |                                          ^
      275 |       });
      276 |     });
      277 |

      at toBe (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:274:42)
          at Array.forEach (<anonymous>)
      at Object.forEach (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:266:17)

  ● EnhancedProjectExtractor › Product Name Extraction › should prioritize explicit product declarations

    expect(received).toBe(expected) // Object.is equality

    Expected: "Specific Product Name"
    Received: undefined

      285 |
      286 |       const result = enhancedProjectExtractor.extractProjectData(message);
    > 287 |       expect(result.data?.productName).toBe('Specific Product Name');
          |                                        ^
      288 |     });
      289 |   });
      290 |

      at Object.toBe (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:287:40)

  ● EnhancedProjectExtractor › Industry Detection › should detect industry from various patterns

    expect(received).toBe(expected) // Object.is equality

    Expected: "Food Technology"
    Received: undefined

      306 |
      307 |         const result = enhancedProjectExtractor.extractProjectData(message);
    > 308 |         expect(result.data?.industry).toBe(expected);
          |                                       ^
      309 |       });
      310 |     });
      311 |   });

      at toBe (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:308:39)
          at Array.forEach (<anonymous>)
      at Object.forEach (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:299:17)

FAIL src/services/reports/__tests__/initialComparativeReportService.partialData.test.ts
  ● InitialComparativeReportService - Partial Data Integration › generateInitialComparativeReport with low data completeness › should use partial data generator when data completeness < 70%

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: null, ObjectContaining {"name": "Test Product"}, ObjectContaining {"id": "snapshot-1"}, ObjectContaining {"acknowledgeDataLimitations": true, "includeDataGapSection": true, "includeRecommendations": true, "partialDataInfo": ObjectContaining {"dataCompletenessScore": 55, "dataFreshness": "existing", "qualityTier": "enhanced"}, "template": "comprehensive"}

    Number of calls: 0

      184 |
      185 |       // Verify partial data generator was used
    > 186 |       expect(mockPartialDataGenerator.generatePartialDataReport).toHaveBeenCalledWith(
          |                                                                  ^
      187 |         null, // Analysis should be null due to failed analysis
      188 |         expect.objectContaining({ name: 'Test Product' }),
      189 |         expect.objectContaining({ id: 'snapshot-1' }),

      at Object.toHaveBeenCalledWith (src/services/reports/__tests__/initialComparativeReportService.partialData.test.ts:186:66)

  ● InitialComparativeReportService - Partial Data Integration › generateInitialComparativeReport with low data completeness › should handle analysis failure gracefully in partial data mode

    Insufficient competitor data for analysis

      361 |       // Mock analysis failure
      362 |       mockComparativeAnalysisService.analyzeProductVsCompetitors.mockRejectedValue(
    > 363 |         new Error('Insufficient competitor data for analysis')
          |         ^
      364 |       );
      365 |       
      366 |       mockPartialDataGenerator.generatePartialDataReport.mockResolvedValue(mockPartialReport);

      at Object.<anonymous> (src/services/reports/__tests__/initialComparativeReportService.partialData.test.ts:363:9)

  ● InitialComparativeReportService - Partial Data Integration › generateInitialComparativeReport with low data completeness › should build correct partial data info from smart collection result

    expect(received).toEqual(expected) // deep equality

    - Expected  - 7
    + Received  + 4

    @@ -6,20 +6,17 @@
          "hasProductData": true,
          "hasSnapshots": true,
        },
        "dataCompletenessScore": 65,
        "dataFreshness": "mixed",
    -   "dataGaps": ArrayContaining [
    -     ObjectContaining {
    -       "area": "Competitor Website Snapshots",
    -       "canBeImproved": true,
    -       "impact": "high",
    -     },
    -     ObjectContaining {
    +   "dataGaps": Array [
    +     Object {
            "area": "Competitor Data Coverage",
            "canBeImproved": true,
    +       "description": "Only 3/4 competitors have sufficient data for analysis.",
            "impact": "medium",
    +       "recommendation": "Collect additional competitor information to improve analysis completeness",
          },
        ],
        "missingData": Array [
          "2 fresh competitor snapshots",
        ],

      405 |       const partialDataInfo = (service as any).buildPartialDataInfo(mockSmartCollectionResult);
      406 |
    > 407 |       expect(partialDataInfo).toEqual({
          |                               ^
      408 |         dataCompletenessScore: 65,
      409 |         dataFreshness: 'mixed',
      410 |         availableData: {

      at Object.toEqual (src/services/reports/__tests__/initialComparativeReportService.partialData.test.ts:407:31)

  ● InitialComparativeReportService - Partial Data Integration › buildPartialDataInfo › should build correct partial data info from smart collection result

    expect(received).toEqual(expected) // deep equality

    - Expected  - 7
    + Received  + 4

    @@ -6,20 +6,17 @@
          "hasProductData": true,
          "hasSnapshots": true,
        },
        "dataCompletenessScore": 65,
        "dataFreshness": "mixed",
    -   "dataGaps": ArrayContaining [
    -     ObjectContaining {
    -       "area": "Competitor Website Snapshots",
    -       "canBeImproved": true,
    -       "impact": "high",
    -     },
    -     ObjectContaining {
    +   "dataGaps": Array [
    +     Object {
            "area": "Competitor Data Coverage",
            "canBeImproved": true,
    +       "description": "Only 3/4 competitors have sufficient data for analysis.",
            "impact": "medium",
    +       "recommendation": "Collect additional competitor information to improve analysis completeness",
          },
        ],
        "missingData": Array [
          "2 fresh competitor snapshots",
        ],

      547 |       const partialDataInfo = (service as any).buildPartialDataInfo(mockSmartCollectionResult);
      548 |
    > 549 |       expect(partialDataInfo).toEqual({
          |                               ^
      550 |         dataCompletenessScore: 65,
      551 |         dataFreshness: 'mixed',
      552 |         availableData: {

      at Object.toEqual (src/services/reports/__tests__/initialComparativeReportService.partialData.test.ts:549:31)

  ● InitialComparativeReportService - Partial Data Integration › data gap identification scenarios › should identify no fresh snapshots gap

    TypeError: Cannot read properties of undefined (reading 'available')

      915 |       dataFreshness: smartCollectionResult.dataFreshness,
      916 |       availableData: {
    > 917 |         hasProductData: smartCollectionResult.productData.available,
          |                                                           ^
      918 |         hasCompetitorData: smartCollectionResult.competitorData.availableCompetitors > 0,
      919 |         hasSnapshots: smartCollectionResult.competitorData.freshSnapshots > 0,
      920 |         competitorCount: smartCollectionResult.competitorData.totalCompetitors,

      at InitialComparativeReportService.available [as buildPartialDataInfo] (src/services/reports/initialComparativeReportService.ts:917:59)
      at Object.buildPartialDataInfo (src/services/reports/__tests__/initialComparativeReportService.partialData.test.ts:743:48)

  ● InitialComparativeReportService - Partial Data Integration › data gap identification scenarios › should identify partial competitor coverage gap

    TypeError: Cannot read properties of undefined (reading 'available')

      915 |       dataFreshness: smartCollectionResult.dataFreshness,
      916 |       availableData: {
    > 917 |         hasProductData: smartCollectionResult.productData.available,
          |                                                           ^
      918 |         hasCompetitorData: smartCollectionResult.competitorData.availableCompetitors > 0,
      919 |         hasSnapshots: smartCollectionResult.competitorData.freshSnapshots > 0,
      920 |         competitorCount: smartCollectionResult.competitorData.totalCompetitors,

      at InitialComparativeReportService.available [as buildPartialDataInfo] (src/services/reports/initialComparativeReportService.ts:917:59)
      at Object.buildPartialDataInfo (src/services/reports/__tests__/initialComparativeReportService.partialData.test.ts:764:48)

  ● InitialComparativeReportService - Partial Data Integration › data gap identification scenarios › should identify overall data quality gap for very low scores

    TypeError: Cannot read properties of undefined (reading 'available')

      915 |       dataFreshness: smartCollectionResult.dataFreshness,
      916 |       availableData: {
    > 917 |         hasProductData: smartCollectionResult.productData.available,
          |                                                           ^
      918 |         hasCompetitorData: smartCollectionResult.competitorData.availableCompetitors > 0,
      919 |         hasSnapshots: smartCollectionResult.competitorData.freshSnapshots > 0,
      920 |         competitorCount: smartCollectionResult.competitorData.totalCompetitors,

      at InitialComparativeReportService.available [as buildPartialDataInfo] (src/services/reports/initialComparativeReportService.ts:917:59)
      at Object.buildPartialDataInfo (src/services/reports/__tests__/initialComparativeReportService.partialData.test.ts:785:48)

FAIL src/__tests__/integration/observabilityIntegration.test.ts
  ● Phase 5.4: Observability Integration Tests › Logging Standardization › should emit structured logs for immediate report generation

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Logging Standardization › should include correlation IDs across service calls

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Logging Standardization › should log security events appropriately

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Metrics Collection › should emit comprehensive metrics for report generation lifecycle

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Metrics Collection › should track snapshot capture metrics accurately

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Metrics Collection › should monitor queue and resource utilization

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Error Tracking Integration › should capture and contextualize report generation errors

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Error Tracking Integration › should track error patterns and recovery

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Performance Monitoring Integration › should track operation latencies and throughput

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Performance Monitoring Integration › should monitor resource utilization patterns

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Business Event Tracking › should track business metrics and user interactions

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Business Event Tracking › should track configuration and feature flag changes

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Alerting Integration › should trigger alerts for critical failures

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Alerting Integration › should track SLA violations and performance degradation

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Dashboard Integration Validation › should provide all necessary metrics for dashboards

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › End-to-End Observability Validation › should validate complete observability stack integration

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)


  ● Test suite failed to run

    RangeError: Maximum call stack size exceeded
        at Array.at (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at ModuleMocker._ensureMockState (node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:208:36)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

FAIL src/__tests__/unit/featureFlagService.test.ts
  ● FeatureFlagService › Caching Behavior › should cache feature flag results

    expect(received).toBeLessThan(expected)

    Expected: < 0
    Received:   0

      324 |       
      325 |       expect(result1).toBe(result2);
    > 326 |       expect(duration2).toBeLessThan(duration1); // Cached should be faster
          |                         ^
      327 |       
      328 |       await service.cleanup();
      329 |     });

      at Object.toBeLessThan (src/__tests__/unit/featureFlagService.test.ts:326:25)

FAIL src/__tests__/unit/services/comparativeReportService.test.ts
  ● ComparativeReportService › generateComparativeReport › should generate comprehensive report with all sections

    expect(received).toContain(expected) // indexOf

    Expected substring: "Comprehensive"
    Received string:    "Test Product - Competitive Analysis"

      246 |       expect(result.report.id).toBeDefined();
      247 |       expect(result.report.title).toContain('Test Product');
    > 248 |       expect(result.report.title).toContain('Comprehensive');
          |                                   ^
      249 |       expect(result.report.projectId).toBe(sampleProduct.projectId);
      250 |       expect(result.report.productId).toBe(sampleProduct.id);
      251 |       expect(result.report.analysisId).toBe(sampleAnalysis.id);

      at Object.toContain (src/__tests__/unit/services/comparativeReportService.test.ts:248:35)

  ● ComparativeReportService › generateComparativeReport › should use default template when none specified

    expect(received).toBe(expected) // Object.is equality

    Expected: "markdown"
    Received: undefined

      353 |
      354 |       expect(result.report.sections).toHaveLength(6); // Default comprehensive template
    > 355 |       expect(result.report.format).toBe('markdown'); // Default format
          |                                    ^
      356 |     });
      357 |
      358 |     it('should throw error for invalid template', async () => {

      at Object.toBe (src/__tests__/unit/services/comparativeReportService.test.ts:355:36)

  ● ComparativeReportService › generateComparativeReport › should handle section generation errors gracefully

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {"cost": 0.0015, "errors": [], "generationTime": 1000, "report": {"analysisId": "mock-analysis-id", "competitiveIntelligence": {"competitiveAdvantages": ["AI-first approach"], "marketPosition": "competitive", "opportunities": ["Enterprise market"]}, "description": "Mock report description", "executiveSummary": "Mock executive summary", "format": undefined, "id": "mock-report-id", "keyFindings": ["Strength: Strong AI", "Weakness: High price", "Market Position: competitive", "Opportunity Score: 85/100"], "keyOpportunities": ["Mock opportunity 1"], "keyThreats": ["Mock threat 1"], "metadata": {"analysisMethod": "ai_powered", "competitorCount": 1, "confidenceScore": 92, "dataQuality": "high", "generatedAt": "2025-07-09T13:31:12.941Z", "productName": "Test Product", "template": "comprehensive", "version": "1.0"}, "productId": "mock-product-id", "projectId": "mock-project-id", "sections": [{"content": "Comprehensive executive summary of competitive analysis", "id": "executive-summary", "order": 1, "title": "Executive Summary", "type": "executive_summary"}, {"content": "Detailed feature comparison analysis", "id": "feature-comparison", "order": 2, "title": "Feature Analysis", "type": "feature_comparison"}, {"content": "Market positioning and competitive landscape analysis", "id": "positioning-analysis", "order": 3, "title": "Market Positioning", "type": "positioning_analysis"}, {"content": "User experience comparison analysis", "id": "ux-comparison", "order": 4, "title": "User Experience", "type": "ux_comparison"}, {"content": "Customer targeting analysis", "id": "customer-targeting", "order": 5, "title": "Customer Targeting", "type": "customer_targeting"}, {"content": "Actionable recommendations based on analysis", "id": "recommendations", "order": 6, "title": "Strategic Recommendations", "type": "recommendations"}], "status": "completed", "strategicRecommendations": {"immediate": ["Improve mobile"], "longTerm": ["Expand to new markets"], "priorityScore": 88, "shortTerm": ["Add enterprise features"]}, "title": "Test Product - Competitive Analysis"}, "tokensUsed": 500, "warnings": []}

      376 |       } as unknown as ComparativeAnalysis;
      377 |
    > 378 |       await expect(service.generateComparativeReport(
          |                   ^
      379 |         incompleteAnalysis,
      380 |         sampleProduct,
      381 |         sampleProductSnapshot

      at expect (node_modules/expect/build/index.js:113:15)
      at Object.<anonymous> (src/__tests__/unit/services/comparativeReportService.test.ts:378:19)

  ● ComparativeReportService › generateEnhancedReportContent › should generate enhanced content using AI

    TypeError: service.generateEnhancedReportContent is not a function

      403 |       mockBedrockService.generateCompletion.mockResolvedValue(mockEnhancedContent);
      404 |
    > 405 |       const result = await service.generateEnhancedReportContent(
          |                                    ^
      406 |         'test-analysis-id',
      407 |         REPORT_TEMPLATES.COMPREHENSIVE,
      408 |         {

      at Object.generateEnhancedReportContent (src/__tests__/unit/services/comparativeReportService.test.ts:405:36)

  ● ComparativeReportService › generateEnhancedReportContent › should handle AI service errors

    TypeError: service.generateEnhancedReportContent is not a function

      431 |       mockBedrockService.generateCompletion.mockRejectedValue(new Error('AI service unavailable'));
      432 |
    > 433 |       await expect(service.generateEnhancedReportContent(
          |                            ^
      434 |         'test-analysis-id',
      435 |         REPORT_TEMPLATES.COMPREHENSIVE
      436 |       )).rejects.toThrow(ReportGenerationError);

      at Object.generateEnhancedReportContent (src/__tests__/unit/services/comparativeReportService.test.ts:433:28)

  ● ComparativeReportService › getAvailableTemplates › should return all available templates

    expect(received).toBe(expected) // Object.is equality

    Expected: "Comprehensive Comparative Analysis"
    Received: "Comprehensive Analysis"

      453 |       const comprehensiveTemplate = templates.find(t => t.id === REPORT_TEMPLATES.COMPREHENSIVE);
      454 |       expect(comprehensiveTemplate).toBeDefined();
    > 455 |       expect(comprehensiveTemplate!.name).toBe('Comprehensive Comparative Analysis');
          |                                           ^
      456 |       expect(comprehensiveTemplate!.sectionTemplates).toHaveLength(6);
      457 |       expect(comprehensiveTemplate!.focusAreas).toEqual(['features', 'positioning', 'user_experience', 'customer_targeting']);
      458 |     });

      at Object.toBe (src/__tests__/unit/services/comparativeReportService.test.ts:455:43)

  ● ComparativeReportService › validateAnalysisForReporting › should throw error for missing detailed analysis

    expect(received).toThrow(expected)

    Expected substring: "Analysis missing required field for reporting: detailed"

    Received function did not throw

      481 |
      482 |       expect(() => service.validateAnalysisForReporting(incompleteAnalysis))
    > 483 |         .toThrow('Analysis missing required field for reporting: detailed');
          |          ^
      484 |     });
      485 |
      486 |     it('should throw error for missing recommendations', () => {

      at Object.toThrow (src/__tests__/unit/services/comparativeReportService.test.ts:483:10)

  ● ComparativeReportService › validateAnalysisForReporting › should throw error for missing recommendations

    expect(received).toThrow(expected)

    Expected substring: "Analysis missing required field for reporting: recommendations"

    Received function did not throw

      491 |
      492 |       expect(() => service.validateAnalysisForReporting(incompleteAnalysis))
    > 493 |         .toThrow('Analysis missing required field for reporting: recommendations');
          |          ^
      494 |     });
      495 |
      496 |     it('should throw error for missing metadata', () => {

      at Object.toThrow (src/__tests__/unit/services/comparativeReportService.test.ts:493:10)

  ● ComparativeReportService › validateAnalysisForReporting › should throw error for missing metadata

    expect(received).toThrow(expected)

    Expected substring: "Analysis missing required field for reporting: metadata"

    Received function did not throw

      501 |
      502 |       expect(() => service.validateAnalysisForReporting(incompleteAnalysis))
    > 503 |         .toThrow('Analysis missing required field for reporting: metadata');
          |          ^
      504 |     });
      505 |
      506 |     it('should warn for low confidence analysis but not throw', () => {

      at Object.toThrow (src/__tests__/unit/services/comparativeReportService.test.ts:503:10)

  ● ComparativeReportService › validateAnalysisForReporting › should warn for low confidence analysis but not throw

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Analysis confidence score is low for reporting", ObjectContaining {"analysisId": "test_analysis_123", "confidenceScore": 40}

    Number of calls: 0

      516 |
      517 |       expect(() => service.validateAnalysisForReporting(lowConfidenceAnalysis)).not.toThrow();
    > 518 |       expect(loggerSpy).toHaveBeenCalledWith(
          |                         ^
      519 |         'Analysis confidence score is low for reporting',
      520 |         expect.objectContaining({
      521 |           analysisId: sampleAnalysis.id,

      at Object.toHaveBeenCalledWith (src/__tests__/unit/services/comparativeReportService.test.ts:518:25)

  ● ComparativeReportService › template content generation › should populate template variables correctly

    expect(received).toContain(expected) // indexOf

    Expected substring: "Test Product"
    Received string:    "Comprehensive executive summary of competitive analysis"

      538 |
      539 |       const executiveSummary = result.report.sections.find(s => s.type === 'executive_summary');
    > 540 |       expect(executiveSummary?.content).toContain('Test Product');
          |                                         ^
      541 |       expect(executiveSummary?.content).toContain('competitive');
      542 |       expect(executiveSummary?.content).toContain('85');
      543 |       expect(executiveSummary?.content).toContain('low');

      at Object.toContain (src/__tests__/unit/services/comparativeReportService.test.ts:540:41)

  ● ComparativeReportService › report content structure › should include executive summary in keyFindings

    expect(received).toContain(expected) // indexOf

    Expected value: "Strength: Strong AI capabilities"
    Received array: ["Strength: Strong AI", "Weakness: High price", "Market Position: competitive", "Opportunity Score: 85/100"]

      585 |       );
      586 |
    > 587 |       expect(result.report.keyFindings).toContain('Strength: Strong AI capabilities');
          |                                         ^
      588 |       expect(result.report.keyFindings).toContain('Weakness: Limited market presence');
      589 |       expect(result.report.keyFindings).toContain('Market Position: competitive');
      590 |       expect(result.report.keyFindings).toContain('Opportunity Score: 85/100');

      at Object.toContain (src/__tests__/unit/services/comparativeReportService.test.ts:587:41)

  ● ComparativeReportService › report content structure › should extract key threats correctly

    expect(received).toContain(expected) // indexOf

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      598 |       );
      599 |
    > 600 |       expect(result.report.competitiveIntelligence.keyThreats).toContain('Overall threat level: low');
          |                                                                ^
      601 |       expect(result.report.competitiveIntelligence.keyThreats).toContain('Advanced API features');
      602 |       expect(result.report.competitiveIntelligence.keyThreats).toContain('Mobile optimization');
      603 |     });

      at Object.toContain (src/__tests__/unit/services/comparativeReportService.test.ts:600:64)

FAIL src/__tests__/unit/smartDataCollectionEdgeCases.test.ts
  ● SmartDataCollectionService Edge Cases › should handle empty competitor list gracefully

    TypeError: smartDataCollectionService.collectCompetitorData is not a function

      51 |     smartDataCollectionService = new SmartDataCollectionService();
      52 |     
    > 53 |     const result = await smartDataCollectionService.collectCompetitorData([], { projectId: 'project-123' });
         |                                                     ^
      54 |     
      55 |     expect(result).toBeDefined();
      56 |     expect(result.success).toBe(true);

      at Object.collectCompetitorData (src/__tests__/unit/smartDataCollectionEdgeCases.test.ts:53:53)

  ● SmartDataCollectionService Edge Cases › should handle web scraper initialization failure

    TypeError: smartDataCollectionService.collectCompetitorData is not a function

      75 |     
      76 |     // Should still complete with fallback data
    > 77 |     const result = await smartDataCollectionService.collectCompetitorData(competitors, { 
         |                                                     ^
      78 |       projectId: 'project-123',
      79 |       requireFreshSnapshots: true
      80 |     });

      at Object.collectCompetitorData (src/__tests__/unit/smartDataCollectionEdgeCases.test.ts:77:53)

  ● SmartDataCollectionService Edge Cases › should handle invalid competitor websites

    TypeError: smartDataCollectionService.collectCompetitorData is not a function

      104 |     
      105 |     // Should handle invalid URL
    > 106 |     const result = await smartDataCollectionService.collectCompetitorData(competitors, { 
          |                                                     ^
      107 |       projectId: 'project-123',
      108 |       requireFreshSnapshots: true
      109 |     });

      at Object.collectCompetitorData (src/__tests__/unit/smartDataCollectionEdgeCases.test.ts:106:53)

  ● SmartDataCollectionService Edge Cases › should handle timeouts during data collection

    TypeError: smartDataCollectionService.collectCompetitorData is not a function

      137 |     
      138 |     // Should timeout and fall back to existing data
    > 139 |     const result = await smartDataCollectionService.collectCompetitorData(competitors, { 
          |                                                     ^
      140 |       projectId: 'project-123',
      141 |       requireFreshSnapshots: true,
      142 |       maxCaptureTime: 500 // Very short timeout (500ms)

      at Object.collectCompetitorData (src/__tests__/unit/smartDataCollectionEdgeCases.test.ts:139:53)

  ● SmartDataCollectionService Edge Cases › should handle corrupted existing snapshot data

    TypeError: smartDataCollectionService.collectCompetitorData is not a function

      179 |     
      180 |     // Should handle corrupted data gracefully
    > 181 |     const result = await smartDataCollectionService.collectCompetitorData(competitors, { 
          |                                                     ^
      182 |       projectId: 'project-123',
      183 |       requireFreshSnapshots: false // Fall back to existing data
      184 |     });

      at Object.collectCompetitorData (src/__tests__/unit/smartDataCollectionEdgeCases.test.ts:181:53)

  ● SmartDataCollectionService Edge Cases › should handle database failures during collection

    TypeError: Cannot read properties of undefined (reading 'create')

      210 |     
      211 |     // Database failure
    > 212 |     (prisma.competitorSnapshot.create as jest.Mock).mockRejectedValue(
          |                                ^
      213 |       new Error('Database error')
      214 |     );
      215 |     

      at Object.create (src/__tests__/unit/smartDataCollectionEdgeCases.test.ts:212:32)

  ● SmartDataCollectionService Edge Cases › should handle priority fallbacks properly

    TypeError: smartDataCollectionService.collectCompetitorData is not a function

      256 |     
      257 |     // Should fall back to existing snapshots (Priority 4)
    > 258 |     const result = await smartDataCollectionService.collectCompetitorData(competitors, { 
          |                                                     ^
      259 |       projectId: 'project-123',
      260 |       requireFreshSnapshots: true // Try fresh first, but allow fallback
      261 |     });

      at Object.collectCompetitorData (src/__tests__/unit/smartDataCollectionEdgeCases.test.ts:258:53)

FAIL src/__tests__/unit/initialComparativeReportEdgeCases.test.ts
  ● InitialComparativeReportService Edge Cases › should handle missing project data gracefully

    TypeError: initialComparativeReportService.generateInitialReport is not a function

      56 |     
      57 |     // Act
    > 58 |     const result = await initialComparativeReportService.generateInitialReport('non-existent-id');
         |                                                          ^
      59 |     
      60 |     // Assert
      61 |     expect(result).toBeDefined();

      at Object.generateInitialReport (src/__tests__/unit/initialComparativeReportEdgeCases.test.ts:58:58)

  ● InitialComparativeReportService Edge Cases › should handle project with no competitors

    TypeError: initialComparativeReportService.generateInitialReport is not a function

      81 |     
      82 |     // Act
    > 83 |     const result = await initialComparativeReportService.generateInitialReport('project-123');
         |                                                          ^
      84 |     
      85 |     // Assert
      86 |     expect(result).toBeDefined();

      at Object.generateInitialReport (src/__tests__/unit/initialComparativeReportEdgeCases.test.ts:83:58)

  ● InitialComparativeReportService Edge Cases › should handle project with missing product data

    TypeError: initialComparativeReportService.generateInitialReport is not a function

      104 |     
      105 |     // Act
    > 106 |     const result = await initialComparativeReportService.generateInitialReport('project-123');
          |                                                          ^
      107 |     
      108 |     // Assert
      109 |     expect(result).toBeDefined();

      at Object.generateInitialReport (src/__tests__/unit/initialComparativeReportEdgeCases.test.ts:106:58)

  ● InitialComparativeReportService Edge Cases › should handle competitors with no snapshots

    TypeError: Cannot read properties of undefined (reading 'findMany')

      126 |     });
      127 |     
    > 128 |     (prisma.competitorSnapshot.findMany as jest.Mock).mockResolvedValue([]);
          |                                ^
      129 |     
      130 |     const { InitialComparativeReportService } = await import('@/services/reports/initialComparativeReportService');
      131 |     initialComparativeReportService = new InitialComparativeReportService();

      at Object.findMany (src/__tests__/unit/initialComparativeReportEdgeCases.test.ts:128:32)

  ● InitialComparativeReportService Edge Cases › should handle database connection failures during competitor snapshot capture

    TypeError: Cannot read properties of undefined (reading 'create')

      157 |     
      158 |     // Mock database connection failure
    > 159 |     (prisma.competitorSnapshot.create as jest.Mock).mockRejectedValue(
          |                                ^
      160 |       new Error('Database connection error')
      161 |     );
      162 |     

      at Object.create (src/__tests__/unit/initialComparativeReportEdgeCases.test.ts:159:32)

  ● InitialComparativeReportService Edge Cases › should handle malformed data from competitors

    TypeError: initialComparativeReportService.generateInitialReport is not a function

      202 |     
      203 |     // Act - Force partial data handling
    > 204 |     const result = await initialComparativeReportService.generateInitialReport('project-123', {
          |                                                          ^
      205 |       fallbackToPartialData: true
      206 |     });
      207 |     

      at Object.generateInitialReport (src/__tests__/unit/initialComparativeReportEdgeCases.test.ts:204:58)

  ● InitialComparativeReportService Edge Cases › should handle timeouts during report generation

    TypeError: Cannot read properties of undefined (reading 'findFirst')

      237 |     });
      238 |     
    > 239 |     (prisma.productSnapshot.findFirst as jest.Mock).mockResolvedValue({
          |                             ^
      240 |       id: 'prod-snap-1',
      241 |       productId: 'product-123',
      242 |       metadata: { data: 'test' },

      at Object.findFirst (src/__tests__/unit/initialComparativeReportEdgeCases.test.ts:239:29)

FAIL src/services/__tests__/rateLimitingService.test.ts
  ● RateLimitingService › Rate Limiting Decisions › should enforce daily cost limits

    expect(received).toContain(expected) // indexOf

    Expected substring: "Daily cost limit would be exceeded"
    Received string:    "Hourly cost limit would be exceeded ($12.00 > $2)"

      147 |       
      148 |       expect(decision.allowed).toBe(false);
    > 149 |       expect(decision.reason).toContain('Daily cost limit would be exceeded');
          |                               ^
      150 |       expect(decision.fallbackSuggested).toContain('tomorrow');
      151 |     });
      152 |

      at Object.toContain (src/services/__tests__/rateLimitingService.test.ts:149:31)

  ● RateLimitingService › Rate Limiting Decisions › should enforce domain throttling

    expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: true

      158 |       // Immediate second request to same domain should be throttled
      159 |       const decision2 = await rateLimitingService.checkRateLimit(mockContext);
    > 160 |       expect(decision2.allowed).toBe(false);
          |                                 ^
      161 |       expect(decision2.reason).toContain('throttled');
      162 |       expect(decision2.waitTimeMs).toBeGreaterThan(0);
      163 |     });

      at Object.toBe (src/services/__tests__/rateLimitingService.test.ts:160:33)

  ● RateLimitingService › Rate Limiting Decisions › should provide meaningful fallback suggestions

    expect(received).toBeDefined()

    Received: undefined

      181 |       const decision = await rateLimitingService.checkRateLimit(throttledContext);
      182 |       
    > 183 |       expect(decision.fallbackSuggested).toBeDefined();
          |                                          ^
      184 |       expect(decision.fallbackSuggested).toContain('cached');
      185 |     });
      186 |   });

      at Object.toBeDefined (src/services/__tests__/rateLimitingService.test.ts:183:42)

  ● RateLimitingService › Rate Limit Execution › should track concurrent requests correctly

    expect(received).toBeGreaterThan(expected)

    Expected: > 0
    Received:   0

      249 |       // Check metrics during execution
      250 |       const metrics = rateLimitingService.getRateLimitingMetrics();
    > 251 |       expect(metrics.currentConcurrentRequests).toBeGreaterThan(0);
          |                                                 ^
      252 |       
      253 |       await Promise.all([promise1, promise2]);
      254 |       

      at Object.toBeGreaterThan (src/services/__tests__/rateLimitingService.test.ts:251:49)

  ● RateLimitingService › Performance and Load Testing › should enforce global concurrency limits under load

    TypeError: Cannot use 'in' operator to search for 'error' in success

      473 |       
      474 |       // Some should succeed, some should be rate limited
    > 475 |       const successes = results.filter(r => !('error' in r)).length;
          |                                               ^
      476 |       const rateLimited = results.filter(r => 
      477 |         'error' in r && r.error.includes('Rate limit exceeded')
      478 |       ).length;

      at src/services/__tests__/rateLimitingService.test.ts:475:47
          at Array.filter (<anonymous>)
      at Object.filter (src/services/__tests__/rateLimitingService.test.ts:475:33)

  ● RateLimitingService › Background Tasks and Maintenance › should initialize without errors

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Rate limiting service initialized", Any<Object>

    Number of calls: 0

      522 |     it('should initialize without errors', () => {
      523 |       expect(rateLimitingService).toBeDefined();
    > 524 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      525 |         'Rate limiting service initialized',
      526 |         expect.any(Object)
      527 |       );

      at Object.toHaveBeenCalledWith (src/services/__tests__/rateLimitingService.test.ts:524:27)

  ● RateLimitingService › Background Tasks and Maintenance › should provide meaningful recommended actions when issues detected

    expect(received).toBeGreaterThan(expected)

    Expected: > 0
    Received:   0

      533 |       
      534 |       const metrics = rateLimitingService.getRateLimitingMetrics();
    > 535 |       expect(metrics.recommendedActions.length).toBeGreaterThan(0);
          |                                                 ^
      536 |       expect(metrics.recommendedActions[0]).toContain('Circuit breaker');
      537 |     });
      538 |   });

      at Object.toBeGreaterThan (src/services/__tests__/rateLimitingService.test.ts:535:49)

FAIL src/services/reports/__tests__/reportQualityService.test.ts
  ● ReportQualityService › assessReportQuality › should handle missing competitor data

    expect(received).toMatch(expected)

    Expected pattern: /^(poor|critical)$/
    Received string:  "fair"

      234 |
      235 |       expect(assessment.qualityScore.dataCompleteness).toBeLessThan(50);
    > 236 |       expect(assessment.qualityTier).toMatch(/^(poor|critical)$/);
          |                                      ^
      237 |     });
      238 |
      239 |     it('should calculate data freshness correctly', async () => {

      at Object.toMatch (src/services/reports/__tests__/reportQualityService.test.ts:236:38)

  ● ReportQualityService › assessReportQuality › should calculate data freshness correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      261 |         rec => rec.category === 'freshness'
      262 |       );
    > 263 |       expect(hasFreshnessRec).toBe(true);
          |                               ^
      264 |     });
      265 |
      266 |     it('should generate section-specific confidence indicators', async () => {

      at Object.toBe (src/services/reports/__tests__/reportQualityService.test.ts:263:31)

  ● ReportQualityService › assessReportQuality › should calculate improvement potential correctly

    expect(received).toBeGreaterThanOrEqual(expected)

    Expected: >= 91
    Received:    81

      339 |
      340 |       expect(assessment.improvement.possibleScore).toBeGreaterThanOrEqual(assessment.qualityScore.overall);
    > 341 |       expect(assessment.improvement.potentialScore).toBeGreaterThanOrEqual(assessment.improvement.possibleScore);
          |                                                     ^
      342 |       expect(assessment.improvement.potentialScore).toBeLessThanOrEqual(100);
      343 |       
      344 |       // Quick wins should be immediate, free improvements

      at Object.toBeGreaterThanOrEqual (src/services/reports/__tests__/reportQualityService.test.ts:341:53)

  ● ReportQualityService › quality tier determination › should assign critical tier for very low scores

    expect(received).toBe(expected) // Object.is equality

    Expected: "critical"
    Received: "poor"

      445 |
      446 |       expect(assessment.qualityScore.overall).toBeLessThan(40);
    > 447 |       expect(assessment.qualityTier).toBe('critical');
          |                                      ^
      448 |     });
      449 |   });
      450 |

      at Object.toBe (src/services/reports/__tests__/reportQualityService.test.ts:447:38)

  ● ReportQualityService › recommendation generation › should generate section-specific recommendations

    expect(received).toBeGreaterThan(expected)

    Expected: > 0
    Received:   0

      560 |         rec => rec.category === 'coverage'
      561 |       );
    > 562 |       expect(coverageRecs.length).toBeGreaterThan(0);
          |                                   ^
      563 |     });
      564 |   });
      565 |

      at Object.toBeGreaterThan (src/services/reports/__tests__/reportQualityService.test.ts:562:35)

  ● ReportQualityService › edge cases and error handling › should handle reports with no sections

    expect(received).toBeLessThan(expected)

    Expected: < 50
    Received:   77

      579 |       );
      580 |
    > 581 |       expect(assessment.qualityScore.overall).toBeLessThan(50);
          |                                               ^
      582 |       expect(assessment.qualityTier).toMatch(/^(poor|critical)$/);
      583 |     });
      584 |

      at Object.toBeLessThan (src/services/reports/__tests__/reportQualityService.test.ts:581:47)

  ● ReportQualityService › edge cases and error handling › should handle missing product information gracefully

    expect(received).toBeLessThan(expected)

    Expected: < 80
    Received:   92

      598 |       );
      599 |
    > 600 |       expect(assessment.qualityScore.dataCompleteness).toBeLessThan(80);
          |                                                        ^
      601 |     });
      602 |
      603 |     it('should handle undefined competitor data', async () => {

      at Object.toBeLessThan (src/services/reports/__tests__/reportQualityService.test.ts:600:56)

  ● ReportQualityService › edge cases and error handling › should handle very old reports correctly

    expect(received).toBeLessThan(expected)

    Expected: < 30
    Received:   63

      631 |       );
      632 |
    > 633 |       expect(assessment.qualityScore.dataFreshness).toBeLessThan(30);
          |                                                     ^
      634 |     });
      635 |   });
      636 |

      at Object.toBeLessThan (src/services/reports/__tests__/reportQualityService.test.ts:633:53)

FAIL src/__tests__/unit/analysis.test.ts
  ● ContentAnalyzer › Constructor › should initialize with AWS Bedrock client

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
        "credentials": Object {
          "accessKeyId": "test-key",
          "secretAccessKey": "test-secret",
    +     "sessionToken": "IQoJb3JpZ2luX2VjEJ7//////////wEaCWV1LXdlc3QtMSJIMEYCIQDDNe8XjbFGTal/GL/1PiiCN/hrz83l7oI19Usa3uO7bwIhAP27vXiNm2P5baEA7s7/D26APJnU+6qRifkuVUs1/tKXKtsDCKf//////////wEQABoMOTUxNzE5MTc1NTA2IgzHGXSYTOHYBUMy514qrwO6u3paXUto257PGyIsjIje2Ug+KunWzDm5o1KIlWKiWjVqss184hnQkqHhRKTvCPN72Tp8SyWo5q0Wt+BcV2ZJZa6LARkRVJtXRCjLyVOA4cXlGaI5YuCH+jmeRaCArjY9nYzJw676CIM8lMjYbDnE1Zz5lOG72XMM6DwupkaIVcyzNKGbi1p76xeFBRjazOr+Z1q1vPT1H18VoPHG6vh+5LHcEcXrH5rvzkxjBCwnvuRvjw51B0Ue76BuDyiMG0zWAP9b3iSk9RzvV3iWCRgZDqjrvdpJFHtHQGrfiiYuI6OtzdbbzPe1SQJDKptIsbFQo5UxDZKcr7y3RWqXRlteYa9E7zr14akSdOEKqysfUQYi/hzInijSQsrt+zLQqXI0ut3i+CtC12pzZQvrCTIKxxrFxlijxtXdUn0Q2SA5WiweL1Gl1KP+STt0VYq3sOHdKx1qzOPsgDC40z3FSYudDE3ySNa3dyntX7cwd6Gi+MeNLwQejCrj8/2UmnWL8mrSspXD2jImtx/VCHMmoDmz9H4s/09yC/PXq96dqoQaQFWJDrVh7TYJ67Xx9uvdbjC33LnDBjqlATUDqD2LbTPR5ik+4GVZByhYkiwshzfB1fV0QuKmprZ2aJknYfqjmRKyazl2hkoid36CtYiyUoV3WbFLBXKvZy5N5gY6vX7jCuEv4w6ndVsgwiL2Lj4ZoxTeF12TW0isnvv60YNSj/CLyNWXrdTvODoaYaT7bYHKzssovMLcSzlf+7YWz5m2cWEcorC4XQhvW02Z/PwvKcJ5fJmVR+Iim0v8nMzYWA==",
        },
        "region": "us-east-1",
      },

    Number of calls: 1

      41 |   describe('Constructor', () => {
      42 |     it('should initialize with AWS Bedrock client', () => {
    > 43 |       expect(BedrockRuntimeClient).toHaveBeenCalledWith({
         |                                    ^
      44 |         region: 'us-east-1',
      45 |         credentials: {
      46 |           accessKeyId: 'test-key',

      at Object.toHaveBeenCalledWith (src/__tests__/unit/analysis.test.ts:43:36)

FAIL src/__tests__/integration/awsCredentialIntegration.test.ts
  ● AWS Credential Integration › Bedrock Service Integration › should create Bedrock service with environment fallback

    expect(received).toBe(expected) // Object.is equality

    Expected: 0
    Received: 1

      247 |       // Ensure no stored credentials
      248 |       const profiles = await awsCredentialService.listCredentialProfiles();
    > 249 |       expect(profiles.length).toBe(0);
          |                               ^
      250 |
      251 |       // Set environment variables
      252 |       process.env.AWS_ACCESS_KEY_ID = 'env-access-key';

      at Object.toBe (src/__tests__/integration/awsCredentialIntegration.test.ts:249:31)

  ● AWS Credential Integration › Bedrock Service Integration › should create Bedrock service factory method with stored credentials

    TypeError: _bedrockservice.BedrockService.createWithStoredCredentials is not a function

      271 |
      272 |       // This should work without throwing
    > 273 |       const service = await BedrockService.createWithStoredCredentials('anthropic');
          |                                            ^
      274 |       expect(service).toBeInstanceOf(BedrockService);
      275 |     });
      276 |   });

      at Object.createWithStoredCredentials (src/__tests__/integration/awsCredentialIntegration.test.ts:273:44)

  ● AWS Credential Integration › Analysis Service Integration › should initialize ComparativeAnalysisService with stored credentials

    expect(received).toBeInstanceOf(expected)

    Expected constructor: mockConstructor
    Received constructor: Object

      285 |       
      286 |       // This tests that the service can be created without throwing
    > 287 |       expect(analysisService).toBeInstanceOf(ComparativeAnalysisService);
          |                               ^
      288 |
      289 |       // Test configuration update (should trigger credential refresh)
      290 |       analysisService.updateAnalysisConfiguration({

      at Object.toBeInstanceOf (src/__tests__/integration/awsCredentialIntegration.test.ts:287:31)

  ● AWS Credential Integration › Multiple Profile Support › should handle multiple credential profiles

    expect(received).toBe(expected) // Object.is equality

    Expected: 2
    Received: 1

      314 |       // List profiles
      315 |       const profiles = await awsCredentialService.listCredentialProfiles();
    > 316 |       expect(profiles.length).toBe(2);
          |                               ^
      317 |
      318 |       // Get credentials with preferred profile
      319 |       const credentials1 = await credentialProvider.getCredentials({

      at Object.toBe (src/__tests__/integration/awsCredentialIntegration.test.ts:316:31)

  ● AWS Credential Integration › Multiple Profile Support › should use first valid profile when no preference specified

    expect(received).toMatchObject(expected)

    - Expected  - 2
    + Received  + 2

      Object {
    -   "accessKeyId": "AKIAVTS3RX71M47",
    -   "secretAccessKey": "test-secret-2-04ofa6314u9x",
    +   "accessKeyId": "AKIALQ3DFE4QT1",
    +   "secretAccessKey": "test-secret-zq0rgds7e57",
      }

      364 |       // Should use the valid profile
      365 |       const credentials = await credentialProvider.getCredentials();
    > 366 |       expect(credentials).toMatchObject({
          |                           ^
      367 |         accessKeyId: secondTestCredentials.accessKeyId,
      368 |         secretAccessKey: secondTestCredentials.secretAccessKey
      369 |       });

      at Object.toMatchObject (src/__tests__/integration/awsCredentialIntegration.test.ts:366:27)

FAIL src/__tests__/unit/intelligentCachingErrorScenarios.test.ts
  ● IntelligentCachingService Error Scenarios › should handle Redis connection failures gracefully

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      68 |     
      69 |     // Should log warning but not crash
    > 70 |     expect(logger.warn).toHaveBeenCalled();
         |                         ^
      71 |     
      72 |     // Try to retrieve data (should fallback to database)
      73 |     (prisma.competitor.findUnique as jest.Mock).mockResolvedValue({

      at Object.toHaveBeenCalled (src/__tests__/unit/intelligentCachingErrorScenarios.test.ts:70:25)

  ● IntelligentCachingService Error Scenarios › should handle database failures with graceful degradation

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      100 |     // Should return null instead of crashing
      101 |     expect(result).toBeNull();
    > 102 |     expect(logger.error).toHaveBeenCalled();
          |                          ^
      103 |   });
      104 |   
      105 |   it('should handle corrupted cache data gracefully', async () => {

      at Object.toHaveBeenCalled (src/__tests__/unit/intelligentCachingErrorScenarios.test.ts:102:26)

  ● IntelligentCachingService Error Scenarios › should handle corrupted cache data gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: "comp-1"
    Received: undefined

      133 |     // Assert - Should get data from database fallback
      134 |     expect(result).toBeDefined();
    > 135 |     expect(result?.id).toBe('comp-1');
          |                        ^
      136 |     expect(logger.warn).toHaveBeenCalledWith(
      137 |       expect.stringContaining('corrupted'),
      138 |       expect.any(Error),

      at Object.toBe (src/__tests__/unit/intelligentCachingErrorScenarios.test.ts:135:24)

  ● IntelligentCachingService Error Scenarios › should handle consecutive cache failures with circuit breaker

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "circuit breaker", Any<Object>

    Number of calls: 0

      172 |     
      173 |     // Assert - Should skip caching due to circuit breaker
    > 174 |     expect(logger.info).toHaveBeenCalledWith(
          |                         ^
      175 |       expect.stringContaining('circuit breaker'),
      176 |       expect.any(Object)
      177 |     );

      at Object.toHaveBeenCalledWith (src/__tests__/unit/intelligentCachingErrorScenarios.test.ts:174:25)

  ● IntelligentCachingService Error Scenarios › should handle cache eviction errors gracefully

    TypeError: intelligentCachingService.invalidateCompetitorCache is not a function

      192 |     
      193 |     // Act - Try to clear cache for specific competitor
    > 194 |     await intelligentCachingService.invalidateCompetitorCache('comp-1');
          |                                     ^
      195 |     
      196 |     // Assert - Should log error but not crash
      197 |     expect(logger.error).toHaveBeenCalled();

      at Object.invalidateCompetitorCache (src/__tests__/unit/intelligentCachingErrorScenarios.test.ts:194:37)

FAIL src/__tests__/unit/services/bedrock/bedrockService.test.ts
  ● BedrockService › constructor › should create service with default configuration

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"region": Any<String>}
    Received: called with 0 arguments

    Number of calls: 1

      78 |       const service = new BedrockService();
      79 |
    > 80 |       expect(BedrockRuntimeClient).toHaveBeenCalledWith(
         |                                    ^
      81 |         expect.objectContaining({
      82 |           region: expect.any(String)
      83 |         })

      at Object.toHaveBeenCalledWith (src/__tests__/unit/services/bedrock/bedrockService.test.ts:80:36)

  ● BedrockService › constructor › should create service with custom configuration

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"region": "us-west-2"}
    Received: called with 0 arguments

    Number of calls: 1

      94 |       const service = new BedrockService(customConfig);
      95 |
    > 96 |       expect(BedrockRuntimeClient).toHaveBeenCalledWith(
         |                                    ^
      97 |         expect.objectContaining({
      98 |           region: 'us-west-2'
      99 |         })

      at Object.toHaveBeenCalledWith (src/__tests__/unit/services/bedrock/bedrockService.test.ts:96:36)

  ● BedrockService › constructor › should create service with credentials when provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"region": "us-east-1"}
    Received: called with 0 arguments

    Number of calls: 1

      113 |       const service = new BedrockService(configWithCredentials);
      114 |
    > 115 |       expect(BedrockRuntimeClient).toHaveBeenCalledWith(
          |                                    ^
      116 |         expect.objectContaining({
      117 |           region: 'us-east-1'
      118 |         })

      at Object.toHaveBeenCalledWith (src/__tests__/unit/services/bedrock/bedrockService.test.ts:115:36)

  ● BedrockService › constructor › should create service without credentials when not provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"region": "us-east-1"}
    Received: called with 0 arguments

    Number of calls: 1

      127 |       const service = new BedrockService(configWithoutCredentials);
      128 |
    > 129 |       expect(BedrockRuntimeClient).toHaveBeenCalledWith(
          |                                    ^
      130 |         expect.objectContaining({
      131 |           region: 'us-east-1'
      132 |         })

      at Object.toHaveBeenCalledWith (src/__tests__/unit/services/bedrock/bedrockService.test.ts:129:36)

  ● BedrockService › constructor › should create service for Mistral provider

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"region": Any<String>}
    Received: called with 0 arguments

    Number of calls: 1

      137 |       const service = new BedrockService({}, 'mistral');
      138 |
    > 139 |       expect(BedrockRuntimeClient).toHaveBeenCalledWith(
          |                                    ^
      140 |         expect.objectContaining({
      141 |           region: expect.any(String)
      142 |         })

      at Object.toHaveBeenCalledWith (src/__tests__/unit/services/bedrock/bedrockService.test.ts:139:36)

FAIL src/services/reports/__tests__/initialComparativeReportService.test.ts
  ● InitialComparativeReportService › Method Signatures › generateInitialComparativeReport should have correct signature

    expect(received).toBe(expected) // Object.is equality

    Expected: 2
    Received: 1

      107 |       const method = service.generateInitialComparativeReport;
      108 |       expect(method).toBeDefined();
    > 109 |       expect(method.length).toBe(2); // projectId and options parameters
          |                             ^
      110 |     });
      111 |
      112 |     it('validateProjectReadiness should have correct signature', () => {

      at Object.toBe (src/services/reports/__tests__/initialComparativeReportService.test.ts:109:29)

FAIL src/services/__tests__/configurationManagementService.test.ts
  ● ConfigurationManagementService › Configuration Updates › should successfully update valid configuration

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      113 |       });
      114 |
    > 115 |       expect(result.success).toBe(true);
          |                              ^
      116 |       expect(result.updatedFields).toEqual(['SNAPSHOT_CAPTURE_TIMEOUT', 'MAX_CONCURRENT_SNAPSHOTS_PER_PROJECT']);
      117 |       expect(result.rollbackInfo).toBeDefined();
      118 |       expect(result.updatedBy).toBe('test-user');

      at Object.toBe (src/services/__tests__/configurationManagementService.test.ts:115:30)

  ● ConfigurationManagementService › Configuration Updates › should create audit log entries for updates

    expect(received).toBeGreaterThan(expected)

    Expected: > 0
    Received:   0

      170 |
      171 |       const auditLog = configService.getAuditLog(10);
    > 172 |       expect(auditLog.length).toBeGreaterThan(0);
          |                               ^
      173 |
      174 |       const latestEntry = auditLog[0];
      175 |       expect(latestEntry.action).toBe('update');

      at Object.toBeGreaterThan (src/services/__tests__/configurationManagementService.test.ts:172:31)

  ● ConfigurationManagementService › Audit Log › should maintain audit log of all changes

    expect(received).toBe(expected) // Object.is equality

    Expected: 2
    Received: 0

      291 |
      292 |       const auditLog = configService.getAuditLog(10);
    > 293 |       expect(auditLog.length).toBe(2);
          |                               ^
      294 |
      295 |       // Should be sorted by timestamp (newest first)
      296 |       expect(auditLog[0].updatedBy).toBe('user2');

      at Object.toBe (src/services/__tests__/configurationManagementService.test.ts:293:31)

  ● ConfigurationManagementService › Audit Log › should respect audit log limit

    expect(received).toBe(expected) // Object.is equality

    Expected: 3
    Received: 0

      309 |
      310 |       const limitedLog = configService.getAuditLog(3);
    > 311 |       expect(limitedLog.length).toBe(3);
          |                                 ^
      312 |     });
      313 |   });
      314 |

      at Object.toBe (src/services/__tests__/configurationManagementService.test.ts:311:33)

  ● ConfigurationManagementService › Rollback Functionality › should provide rollback tokens for updates

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      325 |       });
      326 |
    > 327 |       expect(result.success).toBe(true);
          |                              ^
      328 |       expect(result.rollbackInfo).toBeDefined();
      329 |       expect(result.rollbackInfo!.rollbackToken).toBeDefined();
      330 |       expect(result.rollbackInfo!.previousValues).toEqual({

      at Object.toBe (src/services/__tests__/configurationManagementService.test.ts:327:30)

  ● ConfigurationManagementService › Error Handling › should handle missing configuration fields gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      384 |       });
      385 |
    > 386 |       expect(result.success).toBe(true);
          |                              ^
      387 |       expect(result.updatedFields).toEqual([]); // No valid fields updated
      388 |     });
      389 |

      at Object.toBe (src/services/__tests__/configurationManagementService.test.ts:386:30)

  ● ConfigurationManagementService › Error Handling › should handle internal errors gracefully

    expect(received).toContain(expected) // indexOf

    Expected substring: "Internal error"
    Received string:    "HOURLY_SNAPSHOT_LIMIT: Hourly limit should not exceed daily limit when extrapolated"

      399 |       expect(result.success).toBe(false);
      400 |       expect(result.validationErrors).toBeDefined();
    > 401 |       expect(result.validationErrors![0]).toContain('Internal error');
          |                                           ^
      402 |     });
      403 |   });
      404 | }); 

      at Object.toContain (src/services/__tests__/configurationManagementService.test.ts:401:43)

FAIL src/__tests__/performance/cachingStrategy.test.ts
  ● Redis Cache Implementation › should initialize Redis client successfully

    expect(received).toHaveBeenCalled()

    Matcher error: received value must be a mock or spy function

    Received has type:  function
    Received has value: [Function initializeRedisClient]

      104 |   test('should initialize Redis client successfully', async () => {
      105 |     await initializeRedisClient();
    > 106 |     expect(initializeRedisClient).toHaveBeenCalled();
          |                                   ^
      107 |   });
      108 |
      109 |   test('should use withRedisCache correctly', async () => {

      at Object.toHaveBeenCalled (src/__tests__/performance/cachingStrategy.test.ts:106:35)

  ● Redis Cache Integration with API Endpoints › should cache competitor list results

    TypeError: _rediscache.withRedisCache.mockImplementation is not a function

      139 |     
      140 |     // Reset withRedisCache mock for each test
    > 141 |     (withRedisCache as jest.Mock).mockImplementation(async (fn, keyPrefix, params) => {
          |                                   ^
      142 |       return fn(params);
      143 |     });
      144 |   });

      at Object.mockImplementation (src/__tests__/performance/cachingStrategy.test.ts:141:35)

  ● Redis Cache Integration with API Endpoints › should handle search parameters

    TypeError: _rediscache.withRedisCache.mockImplementation is not a function

      139 |     
      140 |     // Reset withRedisCache mock for each test
    > 141 |     (withRedisCache as jest.Mock).mockImplementation(async (fn, keyPrefix, params) => {
          |                                   ^
      142 |       return fn(params);
      143 |     });
      144 |   });

      at Object.mockImplementation (src/__tests__/performance/cachingStrategy.test.ts:141:35)

FAIL src/services/reports/__tests__/smartDataCollectionIntegration.test.ts
  ● Smart Data Collection Integration - Phase 2.1 › Smart Data Collection Priority System › should use SmartDataCollectionService instead of basic capture methods

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      165 |         // Expected since we haven't mocked all the dependencies fully
      166 |         // The important thing is that smart data collection was called
    > 167 |         expect(collectProjectDataSpy).toHaveBeenCalled();
          |                                       ^
      168 |       }
      169 |     });
      170 |

      at Object.toHaveBeenCalled (src/services/reports/__tests__/smartDataCollectionIntegration.test.ts:167:39)

  ● Smart Data Collection Integration - Phase 2.1 › Smart Data Collection Priority System › should handle smart data collection with priority fallbacks

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      228 |       } catch (error) {
      229 |         // Expected due to incomplete mocking
    > 230 |         expect(collectProjectDataSpy).toHaveBeenCalled();
          |                                       ^
      231 |       }
      232 |     });
      233 |

      at Object.toHaveBeenCalled (src/services/reports/__tests__/smartDataCollectionIntegration.test.ts:230:39)

  ● Smart Data Collection Integration - Phase 2.1 › Smart Data Collection Priority System › should fail gracefully when smart data collection fails

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {"analysisId": "mock-analysis-id", "competitiveIntelligence": {"competitiveAdvantages": ["AI-first approach"], "marketPosition": "competitive", "opportunities": ["Enterprise market"]}, "description": "Mock report description - Generated immediately upon project creation with 76% data completeness.", "executiveSummary": "Mock executive summary", "format": "markdown", "id": "mock-report-id", "keyFindings": ["Strength: Strong AI", "Weakness: High price", "Market Position: competitive", "Opportunity Score: 85/100"], "keyOpportunities": ["Mock opportunity 1"], "keyThreats": ["Mock threat 1"], "metadata": {"analysisMethod": "ai_powered", "competitorCount": 1, "confidenceScore": 92, "dataQuality": "high", "generatedAt": "2025-07-09T13:31:13.451Z", "productName": "Test Product", "reportVersion": "1.0-initial", "template": "comprehensive", "version": "1.0"}, "productId": "mock-product-id", "projectId": "mock-project-id", "sections": [{"content": "Comprehensive executive summary of competitive analysis", "id": "executive-summary", "order": 1, "title": "Executive Summary", "type": "executive_summary"}, {"content": "Detailed feature comparison analysis", "id": "feature-comparison", "order": 2, "title": "Feature Analysis", "type": "feature_comparison"}, {"content": "Market positioning and competitive landscape analysis", "id": "positioning-analysis", "order": 3, "title": "Market Positioning", "type": "positioning_analysis"}, {"content": "User experience comparison analysis", "id": "ux-comparison", "order": 4, "title": "User Experience", "type": "ux_comparison"}, {"content": "Customer targeting analysis", "id": "customer-targeting", "order": 5, "title": "Customer Targeting", "type": "customer_targeting"}, {"content": "Actionable recommendations based on analysis", "id": "recommendations", "order": 6, "title": "Strategic Recommendations", "type": "recommendations"}], "status": "completed", "strategicRecommendations": {"immediate": ["Improve mobile"], "longTerm": ["Expand to new markets"], "priorityScore": 88, "shortTerm": ["Add enterprise features"]}, "title": "Test Product - Competitive Analysis (Initial Report)"}

      272 |         .mockResolvedValue(mockFailedResult as any);
      273 |
    > 274 |       await expect(
          |             ^
      275 |         initialReportService.generateInitialComparativeReport('project-1')
      276 |       ).rejects.toThrow('Smart data collection failed');
      277 |

      at expect (node_modules/expect/build/index.js:113:15)
      at Object.expect (src/services/reports/__tests__/smartDataCollectionIntegration.test.ts:274:13)

  ● Smart Data Collection Integration - Phase 2.1 › Data Source Priority Verification › should prioritize fresh snapshots over existing data

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "project-1", ObjectContaining {"requireFreshSnapshots": true}

    Number of calls: 0

      292 |       }
      293 |
    > 294 |       expect(spy).toHaveBeenCalledWith('project-1', 
          |                   ^
      295 |         expect.objectContaining({
      296 |           requireFreshSnapshots: true
      297 |         })

      at Object.toHaveBeenCalledWith (src/services/reports/__tests__/smartDataCollectionIntegration.test.ts:294:19)

  ● Smart Data Collection Integration - Phase 2.1 › Data Source Priority Verification › should respect timeout allocation for data collection vs analysis

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "project-1", ObjectContaining {"maxCaptureTime": 75000}

    Number of calls: 0

      310 |       }
      311 |
    > 312 |       expect(spy).toHaveBeenCalledWith('project-1',
          |                   ^
      313 |         expect.objectContaining({
      314 |           maxCaptureTime: 75000 // 90000 - 15000 reserved for analysis
      315 |         })

      at Object.toHaveBeenCalledWith (src/services/reports/__tests__/smartDataCollectionIntegration.test.ts:312:19)

FAIL src/__tests__/integration/completeUserJourneys.test.ts
  ● Complete User Journey Tests › Journey 1: Project Creation to Initial Report › should complete the full user journey from project creation to initial report generation

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      211 |
      212 |       // Full journey complete - all key steps verified
    > 213 |       expect(logger.info).toHaveBeenCalled();
          |                           ^
      214 |     });
      215 |   });
      216 |   

      at Object.toHaveBeenCalled (src/__tests__/integration/completeUserJourneys.test.ts:213:27)

  ● Complete User Journey Tests › Journey 2: Error Recovery During Report Generation › should handle errors and recover gracefully during report generation

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      324 |       
      325 |       // Journey complete with error recovery
    > 326 |       expect(logger.warn).toHaveBeenCalled();
          |                           ^
      327 |       expect(reportResult.reportId).toBe('report-456');
      328 |     });
      329 |   });

      at Object.toHaveBeenCalled (src/__tests__/integration/completeUserJourneys.test.ts:326:27)

FAIL src/__tests__/unit/services/reports/comparativeReportService.ux.test.ts
  ● ComparativeReportService - UX Enhancement › generateUXEnhancedReport › should generate UX-enhanced report successfully

    expect(received).toHaveLength(expected)

    Expected length: 3
    Received length: 6
    Received array:  [{"content": "Comprehensive executive summary of competitive analysis", "id": "executive-summary", "order": 1, "title": "Executive Summary", "type": "executive_summary"}, {"content": "Detailed feature comparison analysis", "id": "feature-comparison", "order": 2, "title": "Feature Analysis", "type": "feature_comparison"}, {"content": "In-depth UX comparison and recommendations", "id": "ux-analysis", "order": 3, "title": "User Experience Analysis", "type": "ux_analysis"}, {"content": "Market positioning and competitive landscape analysis", "id": "positioning-analysis", "order": 4, "title": "Market Positioning", "type": "positioning_analysis"}, {"content": "Actionable UX recommendations based on competitive analysis", "id": "strategic-ux-recommendations", "order": 5, "title": "Strategic UX Recommendations", "type": "recommendations"}, {"content": "Supporting data and methodology", "id": "appendix", "order": 6, "title": "Data Appendix", "type": "appendix"}]

      352 |
      353 |       expect(result).toBeDefined();
    > 354 |       expect(result.report.sections).toHaveLength(3); // Original + 2 UX sections
          |                                      ^
      355 |       expect(result.report.sections[1].title).toBe('User Experience Analysis');
      356 |       expect(result.report.sections[2].title).toBe('Strategic UX Recommendations');
      357 |       expect(result.report.keyFindings).toContain('UX Analysis Confidence: 85%');

      at Object.toHaveLength (src/__tests__/unit/services/reports/comparativeReportService.ux.test.ts:354:38)

  ● ComparativeReportService - UX Enhancement › generateUXEnhancedReport › should handle UX analysis with low confidence

    expect(received).toContain(expected) // indexOf

    Expected value: "UX analysis confidence is below 70%"
    Received array: []

      432 |       );
      433 |
    > 434 |       expect(result.warnings).toContain('UX analysis confidence is below 70%');
          |                               ^
      435 |       expect(result.report.keyFindings).toContain('UX Analysis Confidence: 60%');
      436 |     });
      437 |

      at Object.toContain (src/__tests__/unit/services/reports/comparativeReportService.ux.test.ts:434:31)

  ● ComparativeReportService - UX Enhancement › generateUXEnhancedReport › should handle UX analysis errors gracefully

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {"cost": 0.012, "errors": [], "generationTime": 1200, "report": {"description": "Mock UX report description", "executiveSummary": "Mock UX summary", "id": "mock-ux-report-id", "keyFindings": ["UX finding 1", "UX Analysis Confidence: 85%"], "keyOpportunities": ["UX opportunity 1"], "keyThreats": ["UX threat 1"], "metadata": {"competitorCount": 2, "generatedAt": "2025-07-09T13:31:13.520Z", "productName": "Mock Product", "template": "UX_ENHANCED", "uxAnalysisIncluded": true, "version": "1.0"}, "sections": [{"content": "Comprehensive executive summary of competitive analysis", "id": "executive-summary", "order": 1, "title": "Executive Summary", "type": "executive_summary"}, {"content": "Detailed feature comparison analysis", "id": "feature-comparison", "order": 2, "title": "Feature Analysis", "type": "feature_comparison"}, {"content": "In-depth UX comparison and recommendations", "id": "ux-analysis", "order": 3, "title": "User Experience Analysis", "type": "ux_analysis"}, {"content": "Market positioning and competitive landscape analysis", "id": "positioning-analysis", "order": 4, "title": "Market Positioning", "type": "positioning_analysis"}, {"content": "Actionable UX recommendations based on competitive analysis", "id": "strategic-ux-recommendations", "order": 5, "title": "Strategic UX Recommendations", "type": "recommendations"}, {"content": "Supporting data and methodology", "id": "appendix", "order": 6, "title": "Data Appendix", "type": "appendix"}], "title": "Mock UX Enhanced Report"}, "tokensUsed": 600, "warnings": []}

      441 |       );
      442 |
    > 443 |       await expect(
          |             ^
      444 |         service.generateUXEnhancedReport(
      445 |           mockAnalysis,
      446 |           mockProduct,

      at expect (node_modules/expect/build/index.js:113:15)
      at Object.expect (src/__tests__/unit/services/reports/comparativeReportService.ux.test.ts:443:13)

  ● ComparativeReportService - UX Enhancement › generateUXEnhancedReport › should limit competitors to maximum of 5

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: Anything, Anything, ObjectContaining {"maxCompetitors": 5}

    Number of calls: 0

      503 |
      504 |       // Verify that maxCompetitors option was set to 5
    > 505 |       expect(mockUXAnalyzer.analyzeProductVsCompetitors).toHaveBeenCalledWith(
          |                                                          ^
      506 |         expect.anything(),
      507 |         expect.anything(),
      508 |         expect.objectContaining({

      at Object.toHaveBeenCalledWith (src/__tests__/unit/services/reports/comparativeReportService.ux.test.ts:505:58)

FAIL src/services/analysis/__tests__/userExperienceAnalyzer.test.ts
  ● UserExperienceAnalyzer › analyzeProductVsCompetitors › should generate UX analysis successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: "Test product shows strong UX fundamentals with room for improvement"
    Received: "Mock UX analysis summary"

      87 |
      88 |       expect(result).toBeDefined();
    > 89 |       expect(result.summary).toBe('Test product shows strong UX fundamentals with room for improvement');
         |                              ^
      90 |       expect(result.strengths).toEqual(['Clean design', 'Fast loading']);
      91 |       expect(result.weaknesses).toEqual(['Limited mobile optimization', 'Unclear navigation']);
      92 |       expect(result.opportunities).toEqual(['Mobile-first redesign', 'Enhanced accessibility']);

      at Object.toBe (src/services/analysis/__tests__/userExperienceAnalyzer.test.ts:89:30)

  ● UserExperienceAnalyzer › analyzeProductVsCompetitors › should handle analysis options correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 2

      113 |
      114 |       expect(result).toBeDefined();
    > 115 |       expect(result.metadata.competitorCount).toBe(1);
          |                                               ^
      116 |     });
      117 |
      118 |     it('should limit competitors based on maxCompetitors option', async () => {

      at Object.toBe (src/services/analysis/__tests__/userExperienceAnalyzer.test.ts:115:47)

  ● UserExperienceAnalyzer › analyzeProductVsCompetitors › should handle malformed AI responses gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: "Analysis completed but response format was invalid"
    Received: "Mock UX analysis summary"

      161 |
      162 |       expect(result).toBeDefined();
    > 163 |       expect(result.summary).toBe('Analysis completed but response format was invalid');
          |                              ^
      164 |       expect(result.confidence).toBe(0.3);
      165 |       expect(result.recommendations).toEqual(['Review analysis input data and retry']);
      166 |     });

      at Object.toBe (src/services/analysis/__tests__/userExperienceAnalyzer.test.ts:163:30)

PASS src/services/__tests__/intelligentCachingService.test.ts
PASS src/__tests__/unit/services/bedrock/bedrockConfig.test.ts
PASS src/__tests__/unit/logger.test.ts
PASS src/__tests__/integration/testStabilityDemo.test.ts
(node:89899) [DEP0147] DeprecationWarning: In future versions of Node.js, fs.rmdir(path, { recursive: true }) will be removed. Use fs.rm(path, { recursive: true }) instead
(Use `node --trace-deprecation ...` to show where the warning was created)
PASS src/__tests__/integration/comparativeReportIntegration.test.ts
PASS src/services/__tests__/competitorSnapshotOptimizer.test.ts
PASS src/__tests__/components/ReportsPage.test.tsx
PASS src/__tests__/unit/services/comparativeReportScheduler.test.ts
PASS src/__tests__/integration/comparativeAnalysisIntegration.test.ts
PASS src/services/__tests__/typeValidationService.test.ts
PASS src/__tests__/components/ReportViewer.test.tsx
PASS src/__tests__/performance/concurrentProjectCreation.test.ts
PASS src/__tests__/unit/services/productScrapingService.simple.test.ts (6.782 s)
PASS src/__tests__/unit/services/comparativeReportSchedulerSimple.test.ts
PASS src/app/api/projects/[id]/initial-report-status/__tests__/route.test.ts
PASS src/__tests__/unit/services/productScrapingService.test.ts (6.986 s)
PASS src/__tests__/integration/productScrapingIntegration.test.ts
PASS src/__tests__/unit/types.test.ts
PASS src/__tests__/unit/observability.test.ts
PASS src/__tests__/components/ReportViewerPage.test.tsx
PASS src/__tests__/unit/services/productService.test.ts
PASS src/__tests__/integration/productVsCompetitorIntegration.test.ts
PASS src/__tests__/components/BasicComponent.test.tsx
PASS src/__tests__/unit/repositories/productSnapshotRepository.test.ts
PASS src/__tests__/unit/diff.test.ts
PASS src/__tests__/regression/critical-paths.test.ts
PASS src/__tests__/unit/services/comparativeReportService.simple.test.ts
PASS src/__tests__/unit/scraper.test.ts
PASS src/__tests__/unit/services/analysis/userExperienceAnalyzer.test.ts
PASS src/__tests__/components/Navigation.test.tsx
PASS src/__tests__/unit/ReportGenerator.test.ts
PASS src/__tests__/unit/chat/productChatProcessor.test.ts
PASS src/__tests__/integration/comparativeReportSchedulerIntegration.test.ts
PASS src/__tests__/unit/services/comparativeAnalysisService.test.ts
PASS src/__tests__/unit/services/productScrapingService.comprehensive.test.ts
PASS src/__tests__/e2e/productVsCompetitorE2E.test.ts
PASS src/__tests__/unit/services/aws/credentialProvider.test.ts
PASS src/__tests__/regression/data-integrity.test.ts
PASS src/__tests__/unit/repositories/productRepository.basic.test.ts
FAIL src/__tests__/integration/reports.test.ts
  ● Test suite failed to run

    Cannot find module '../../pages/api/reports' from 'src/__tests__/integration/reports.test.ts'

      49 | jest.mock('next-auth');
      50 |
    > 51 | describe('/api/reports', () => {
         |                                 ^
      52 |   let mockPrisma: any;
      53 |   let mockPrismaDefault: any;
      54 |

      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.<anonymous> (src/__tests__/integration/reports.test.ts:51:57)

/Users/nikita.gorshkov/competitor-research-agent/src/services/reports/asyncReportProcessingService.ts:81
        _realTimeStatusService.realTimeStatusService.sendProcessingUpdate(projectId, 'validation', 5, 'Starting async report generation...');
                                                     ^

TypeError: _realTimeStatusService.realTimeStatusService.sendProcessingUpdate is not a function
    at AsyncReportProcessingService.sendProcessingUpdate (/Users/nikita.gorshkov/competitor-research-agent/src/services/reports/asyncReportProcessingService.ts:121:27)
    at Object.processInitialReport (/Users/nikita.gorshkov/competitor-research-agent/src/services/reports/__tests__/asyncReportProcessingService.test.ts:180:19)
    at Promise.then.completed (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/utils.js:298:28)
    at new Promise (<anonymous>)
    at callAsyncCircusFn (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/utils.js:231:10)
    at _callCircusTest (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:316:40)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at _runTest (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:252:3)
    at _runTestsForDescribeBlock (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:126:9)
    at _runTestsForDescribeBlock (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:121:9)
    at _runTestsForDescribeBlock (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:121:9)
    at run (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:71:3)
    at runAndTransformResultsToJestFormat (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
    at jestAdapter (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
    at runTestInternal (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-runner/build/runTest.js:367:16)
    at runTest (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-runner/build/runTest.js:444:34)
    at Object.worker (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-runner/build/testWorker.js:106:12)

Node.js v22.16.0
/Users/nikita.gorshkov/competitor-research-agent/src/services/reports/asyncReportProcessingService.ts:81
        _realTimeStatusService.realTimeStatusService.sendProcessingUpdate(projectId, 'validation', 5, 'Starting async report generation...');
                                                     ^

TypeError: _realTimeStatusService.realTimeStatusService.sendProcessingUpdate is not a function
    at AsyncReportProcessingService.sendProcessingUpdate (/Users/nikita.gorshkov/competitor-research-agent/src/services/reports/asyncReportProcessingService.ts:121:27)
    at Object.processInitialReport (/Users/nikita.gorshkov/competitor-research-agent/src/services/reports/__tests__/asyncReportProcessingService.test.ts:180:19)
    at Promise.then.completed (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/utils.js:298:28)
    at new Promise (<anonymous>)
    at callAsyncCircusFn (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/utils.js:231:10)
    at _callCircusTest (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:316:40)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at _runTest (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:252:3)
    at _runTestsForDescribeBlock (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:126:9)
    at _runTestsForDescribeBlock (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:121:9)
    at _runTestsForDescribeBlock (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:121:9)
    at run (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:71:3)
    at runAndTransformResultsToJestFormat (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
    at jestAdapter (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
    at runTestInternal (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-runner/build/runTest.js:367:16)
    at runTest (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-runner/build/runTest.js:444:34)
    at Object.worker (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-runner/build/testWorker.js:106:12)

Node.js v22.16.0
/Users/nikita.gorshkov/competitor-research-agent/src/services/reports/asyncReportProcessingService.ts:81
        _realTimeStatusService.realTimeStatusService.sendProcessingUpdate(projectId, 'validation', 5, 'Starting async report generation...');
                                                     ^

TypeError: _realTimeStatusService.realTimeStatusService.sendProcessingUpdate is not a function
    at AsyncReportProcessingService.sendProcessingUpdate (/Users/nikita.gorshkov/competitor-research-agent/src/services/reports/asyncReportProcessingService.ts:121:27)
    at Object.processInitialReport (/Users/nikita.gorshkov/competitor-research-agent/src/services/reports/__tests__/asyncReportProcessingService.test.ts:180:19)
    at Promise.then.completed (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/utils.js:298:28)
    at new Promise (<anonymous>)
    at callAsyncCircusFn (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/utils.js:231:10)
    at _callCircusTest (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:316:40)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at _runTest (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:252:3)
    at _runTestsForDescribeBlock (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:126:9)
    at _runTestsForDescribeBlock (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:121:9)
    at _runTestsForDescribeBlock (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:121:9)
    at run (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:71:3)
    at runAndTransformResultsToJestFormat (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
    at jestAdapter (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
    at runTestInternal (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-runner/build/runTest.js:367:16)
    at runTest (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-runner/build/runTest.js:444:34)
    at Object.worker (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-runner/build/testWorker.js:106:12)

Node.js v22.16.0
/Users/nikita.gorshkov/competitor-research-agent/src/services/reports/asyncReportProcessingService.ts:81
        _realTimeStatusService.realTimeStatusService.sendProcessingUpdate(projectId, 'validation', 5, 'Starting async report generation...');
                                                     ^

TypeError: _realTimeStatusService.realTimeStatusService.sendProcessingUpdate is not a function
    at AsyncReportProcessingService.sendProcessingUpdate (/Users/nikita.gorshkov/competitor-research-agent/src/services/reports/asyncReportProcessingService.ts:121:27)
    at Object.processInitialReport (/Users/nikita.gorshkov/competitor-research-agent/src/services/reports/__tests__/asyncReportProcessingService.test.ts:180:19)
    at Promise.then.completed (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/utils.js:298:28)
    at new Promise (<anonymous>)
    at callAsyncCircusFn (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/utils.js:231:10)
    at _callCircusTest (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:316:40)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at _runTest (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:252:3)
    at _runTestsForDescribeBlock (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:126:9)
    at _runTestsForDescribeBlock (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:121:9)
    at _runTestsForDescribeBlock (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:121:9)
    at run (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/run.js:71:3)
    at runAndTransformResultsToJestFormat (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
    at jestAdapter (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
    at runTestInternal (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-runner/build/runTest.js:367:16)
    at runTest (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-runner/build/runTest.js:444:34)
    at Object.worker (/Users/nikita.gorshkov/competitor-research-agent/node_modules/jest-runner/build/testWorker.js:106:12)

Node.js v22.16.0
FAIL src/services/reports/__tests__/asyncReportProcessingService.test.ts
  ● Test suite failed to run

    Jest worker encountered 4 child process exceptions, exceeding retry limit

      at ChildProcessWorker.initialize (node_modules/jest-worker/build/workers/ChildProcessWorker.js:181:21)

FAIL src/__tests__/performance/loadTesting.test.ts (48.153 s)
  ● Performance and Load Testing › Phase 4.1: Performance Testing › should meet <2 minute target for comparative report generation

    thrown: "Exceeded timeout of 15000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      231 |
      232 |   describe('Phase 4.1: Performance Testing', () => {
    > 233 |     it('should meet <2 minute target for comparative report generation', async () => {
          |     ^
      234 |       const startTime = Date.now();
      235 |
      236 |       // Create realistic test data

      at it (src/__tests__/performance/loadTesting.test.ts:233:5)
      at describe (src/__tests__/performance/loadTesting.test.ts:232:3)
      at Object.describe (src/__tests__/performance/loadTesting.test.ts:227:1)

  ● Performance and Load Testing › Phase 4.1: Performance Testing › should validate memory usage and resource efficiency

    thrown: "Exceeded timeout of 15000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      592 |     });
      593 |
    > 594 |     it('should validate memory usage and resource efficiency', async () => {
          |     ^
      595 |       const initialMemory = process.memoryUsage();
      596 |       const startTime = Date.now();
      597 |

      at it (src/__tests__/performance/loadTesting.test.ts:594:5)
      at describe (src/__tests__/performance/loadTesting.test.ts:232:3)
      at Object.describe (src/__tests__/performance/loadTesting.test.ts:227:1)

A worker process has failed to exit gracefully and has been force exited. This is likely caused by tests leaking due to improper teardown. Try running with --detectOpenHandles to find leaks. Active timers can also cause this, ensure that .unref() was called on them.
Summary of all failing tests
FAIL src/__tests__/unit/comprehensiveRequirementsCollector.test.ts
  ● ComprehensiveRequirementsCollector › generateComprehensivePrompt › should generate a comprehensive prompt with all required sections

    expect(received).toContain(expected) // indexOf

    Expected substring: "OPTIONAL ENHANCEMENTS"
    Received string:    "�� **Welcome to the Competitor Research Agent!**·
    To create your comprehensive competitive analysis, I need all the following information at once. This replaces our multi-step process and gets you started faster!·
    **�� CONTACT & SCHEDULING (Required):**
    1. **Email address** - Where should I send reports?
    2. **Report frequency** - Weekly, Monthly, or Quarterly?
    3. **Project name** - What should we call this analysis?·
    **�� PRODUCT INFORMATION (Required):**
    4. **Product name** - What's your product called?
    5. **Product website URL** - Full URL for analysis (https://...)
    6. **Industry/Market** - What sector are you in?·
    **�� BUSINESS CONTEXT (Required):**
    7. **Product positioning** - Value props, target market, competitive advantage
    8. **Customer data** - Demographics, segments, size, characteristics··
    9. **User problems** - Core problems your product solves·
    **�� HOW TO RESPOND:**·
    **✅ SIMPLE NUMBERED LIST (Recommended)**
    ```
    1. john.doe@company.com
    2. Weekly··
    3. Good Chop Analysis
    4. Good Chop
    5. https://goodchop.com
    6. Food delivery
    7. Premium meat delivery for health-conscious consumers
    8. 10,000+ urban customers aged 25-40
    9. Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NUMBERED LIST WITH LABELS (Also Works)**
    ```
    1. Email: john.doe@company.com
    2. Frequency: Weekly
    3. Project: Good Chop Analysis
    4. Product: Good Chop
    5. Website: https://goodchop.com
    6. Industry: Food delivery
    7. Positioning: Premium meat delivery for health-conscious consumers
    8. Customers: 10,000+ urban customers aged 25-40
    9. Problem: Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NATURAL LANGUAGE (Works Too)**
    \"My email is john.doe@company.com and I want weekly reports for my Good Chop Analysis project. We're analyzing Good Chop at https://goodchop.com in the food delivery industry...\"·
    **�� IMPORTANT TIPS:**
    • **Both formats work perfectly** - Use whichever feels more natural to you
    • **Be specific but concise** - \"Finding good meat locally\" is perfect
    • **URLs must start with https://** - This helps me validate and scrape correctly
    • **Don't worry about perfect formatting** - I'll understand most reasonable formats
    • **All 9 fields are required** - But you can provide them in any order·
    Ready to start? Just provide your information in any format above! ��"

      16 |       expect(prompt).toContain('PRODUCT INFORMATION');
      17 |       expect(prompt).toContain('BUSINESS CONTEXT');
    > 18 |       expect(prompt).toContain('OPTIONAL ENHANCEMENTS');
         |                      ^
      19 |       expect(prompt).toContain('HOW TO RESPOND');
      20 |       expect(prompt).toContain('Ready when you are');
      21 |     });

      at Object.toContain (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:18:22)

  ● ComprehensiveRequirementsCollector › generateComprehensivePrompt › should support different tones

    expect(received).not.toContain(expected) // indexOf

    Expected substring: not "��"
    Received string:        "�� **Welcome to the Competitor Research Agent!**

    To create your comprehensive competitive analysis, I need all the following information at once. This replaces our multi-step process and gets you started faster!

    **�� CONTACT & SCHEDULING (Required):**
    1. **Email address** - Where should I send reports?
    2. **Report frequency** - Weekly, Monthly, or Quarterly?
    3. **Project name** - What should we call this analysis?

    **�� PRODUCT INFORMATION (Required):**
    4. **Product name** - What's your product called?
    5. **Product website URL** - Full URL for analysis (https://...)
    6. **Industry/Market** - What sector are you in?

    **�� BUSINESS CONTEXT (Required):**
    7. **Product positioning** - Value props, target market, competitive advantage
    8. **Customer data** - Demographics, segments, size, characteristics  
    9. **User problems** - Core problems your product solves

    **�� HOW TO RESPOND:**

    **✅ SIMPLE NUMBERED LIST (Recommended)**
    ```
    1. john.doe@company.com
    2. Weekly  
    3. Good Chop Analysis
    4. Good Chop
    5. https://goodchop.com
    6. Food delivery
    7. Premium meat delivery for health-conscious consumers
    8. 10,000+ urban customers aged 25-40
    9. Finding high-quality, ethically sourced meat locally
    ```

    **✅ NUMBERED LIST WITH LABELS (Also Works)**
    ```
    1. Email: john.doe@company.com
    2. Frequency: Weekly
    3. Project: Good Chop Analysis
    4. Product: Good Chop
    5. Website: https://goodchop.com
    6. Industry: Food delivery
    7. Positioning: Premium meat delivery for health-conscious consumers
    8. Customers: 10,000+ urban customers aged 25-40
    9. Problem: Finding high-quality, ethically sourced meat locally
    ```

    **✅ NATURAL LANGUAGE (Works Too)**
    \"My email is john.doe@company.com and I want weekly reports for my Good Chop Analysis project. We're analyzing Good Chop at https://goodchop.com in the food delivery industry...\"

    **�� IMPORTANT TIPS:**
    • **Both formats work perfectly** - Use whichever feels more natural to you
    • **Be specific but concise** - \"Finding good meat locally\" is perfect
    • **URLs must start with https://** - This helps me validate and scrape correctly
    • **Don't worry about perfect formatting** - I'll understand most reasonable formats
    • **All 9 fields are required** - But you can provide them in any order

    Ready to start? Just provide your information in any format above! ��"

      28 |       expect(professionalPrompt).toContain('Competitor Research Agent');
      29 |       expect(professionalPrompt).toContain('competitive analysis');
    > 30 |       expect(professionalPrompt).not.toContain('��');
         |                                      ^
      31 |
      32 |       expect(friendlyPrompt).toContain('��');
      33 |       expect(friendlyPrompt).toContain('Ready when you are! ��');

      at Object.toContain (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:30:38)

  ● ComprehensiveRequirementsCollector › generateComprehensivePrompt › should include industry-specific examples when requested

    expect(received).toContain(expected) // indexOf

    Expected substring: "SaaS"
    Received string:    "�� **Welcome to the Competitor Research Agent!**·
    To create your comprehensive competitive analysis, I need all the following information at once. This replaces our multi-step process and gets you started faster!·
    **�� CONTACT & SCHEDULING (Required):**
    1. **Email address** - Where should I send reports?
    2. **Report frequency** - Weekly, Monthly, or Quarterly?
    3. **Project name** - What should we call this analysis?·
    **�� PRODUCT INFORMATION (Required):**
    4. **Product name** - What's your product called?
    5. **Product website URL** - Full URL for analysis (https://...)
    6. **Industry/Market** - What sector are you in?·
    **�� BUSINESS CONTEXT (Required):**
    7. **Product positioning** - Value props, target market, competitive advantage
    8. **Customer data** - Demographics, segments, size, characteristics··
    9. **User problems** - Core problems your product solves·
    **�� HOW TO RESPOND:**·
    **✅ SIMPLE NUMBERED LIST (Recommended)**
    ```
    1. john.doe@company.com
    2. Weekly··
    3. Good Chop Analysis
    4. Good Chop
    5. https://goodchop.com
    6. Food delivery
    7. Premium meat delivery for health-conscious consumers
    8. 10,000+ urban customers aged 25-40
    9. Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NUMBERED LIST WITH LABELS (Also Works)**
    ```
    1. Email: john.doe@company.com
    2. Frequency: Weekly
    3. Project: Good Chop Analysis
    4. Product: Good Chop
    5. Website: https://goodchop.com
    6. Industry: Food delivery
    7. Positioning: Premium meat delivery for health-conscious consumers
    8. Customers: 10,000+ urban customers aged 25-40
    9. Problem: Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NATURAL LANGUAGE (Works Too)**
    \"My email is john.doe@company.com and I want weekly reports for my Good Chop Analysis project. We're analyzing Good Chop at https://goodchop.com in the food delivery industry...\"·
    **�� IMPORTANT TIPS:**
    • **Both formats work perfectly** - Use whichever feels more natural to you
    • **Be specific but concise** - \"Finding good meat locally\" is perfect
    • **URLs must start with https://** - This helps me validate and scrape correctly
    • **Don't worry about perfect formatting** - I'll understand most reasonable formats
    • **All 9 fields are required** - But you can provide them in any order·
    Ready to start? Just provide your information in any format above! ��"

      48 |       });
      49 |
    > 50 |       expect(saasPrompt).toContain('SaaS');
         |                          ^
      51 |       expect(saasPrompt).toContain('B2B productivity platform');
      52 |       
      53 |       expect(foodPrompt).toContain('meal delivery');

      at Object.toContain (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:50:26)

  ● ComprehensiveRequirementsCollector › generateComprehensivePrompt › should hide optional fields when requested

    expect(received).toContain(expected) // indexOf

    Expected substring: "OPTIONAL ENHANCEMENTS"
    Received string:    "�� **Welcome to the Competitor Research Agent!**·
    To create your comprehensive competitive analysis, I need all the following information at once. This replaces our multi-step process and gets you started faster!·
    **�� CONTACT & SCHEDULING (Required):**
    1. **Email address** - Where should I send reports?
    2. **Report frequency** - Weekly, Monthly, or Quarterly?
    3. **Project name** - What should we call this analysis?·
    **�� PRODUCT INFORMATION (Required):**
    4. **Product name** - What's your product called?
    5. **Product website URL** - Full URL for analysis (https://...)
    6. **Industry/Market** - What sector are you in?·
    **�� BUSINESS CONTEXT (Required):**
    7. **Product positioning** - Value props, target market, competitive advantage
    8. **Customer data** - Demographics, segments, size, characteristics··
    9. **User problems** - Core problems your product solves·
    **�� HOW TO RESPOND:**·
    **✅ SIMPLE NUMBERED LIST (Recommended)**
    ```
    1. john.doe@company.com
    2. Weekly··
    3. Good Chop Analysis
    4. Good Chop
    5. https://goodchop.com
    6. Food delivery
    7. Premium meat delivery for health-conscious consumers
    8. 10,000+ urban customers aged 25-40
    9. Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NUMBERED LIST WITH LABELS (Also Works)**
    ```
    1. Email: john.doe@company.com
    2. Frequency: Weekly
    3. Project: Good Chop Analysis
    4. Product: Good Chop
    5. Website: https://goodchop.com
    6. Industry: Food delivery
    7. Positioning: Premium meat delivery for health-conscious consumers
    8. Customers: 10,000+ urban customers aged 25-40
    9. Problem: Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NATURAL LANGUAGE (Works Too)**
    \"My email is john.doe@company.com and I want weekly reports for my Good Chop Analysis project. We're analyzing Good Chop at https://goodchop.com in the food delivery industry...\"·
    **�� IMPORTANT TIPS:**
    • **Both formats work perfectly** - Use whichever feels more natural to you
    • **Be specific but concise** - \"Finding good meat locally\" is perfect
    • **URLs must start with https://** - This helps me validate and scrape correctly
    • **Don't worry about perfect formatting** - I'll understand most reasonable formats
    • **All 9 fields are required** - But you can provide them in any order·
    Ready to start? Just provide your information in any format above! ��"

      59 |       const withoutOptional = collector.generateComprehensivePrompt({ showOptionalFields: false });
      60 |
    > 61 |       expect(withOptional).toContain('OPTIONAL ENHANCEMENTS');
         |                            ^
      62 |       expect(withoutOptional).not.toContain('OPTIONAL ENHANCEMENTS');
      63 |     });
      64 |

      at Object.toContain (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:61:28)

  ● ComprehensiveRequirementsCollector › generateComprehensivePrompt › should customize contextual help

    expect(received).toContain(expected) // indexOf

    Expected substring: "intelligently parse"
    Received string:    "�� **Welcome to the Competitor Research Agent!**·
    To create your comprehensive competitive analysis, I need all the following information at once. This replaces our multi-step process and gets you started faster!·
    **�� CONTACT & SCHEDULING (Required):**
    1. **Email address** - Where should I send reports?
    2. **Report frequency** - Weekly, Monthly, or Quarterly?
    3. **Project name** - What should we call this analysis?·
    **�� PRODUCT INFORMATION (Required):**
    4. **Product name** - What's your product called?
    5. **Product website URL** - Full URL for analysis (https://...)
    6. **Industry/Market** - What sector are you in?·
    **�� BUSINESS CONTEXT (Required):**
    7. **Product positioning** - Value props, target market, competitive advantage
    8. **Customer data** - Demographics, segments, size, characteristics··
    9. **User problems** - Core problems your product solves·
    **�� HOW TO RESPOND:**·
    **✅ SIMPLE NUMBERED LIST (Recommended)**
    ```
    1. john.doe@company.com
    2. Weekly··
    3. Good Chop Analysis
    4. Good Chop
    5. https://goodchop.com
    6. Food delivery
    7. Premium meat delivery for health-conscious consumers
    8. 10,000+ urban customers aged 25-40
    9. Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NUMBERED LIST WITH LABELS (Also Works)**
    ```
    1. Email: john.doe@company.com
    2. Frequency: Weekly
    3. Project: Good Chop Analysis
    4. Product: Good Chop
    5. Website: https://goodchop.com
    6. Industry: Food delivery
    7. Positioning: Premium meat delivery for health-conscious consumers
    8. Customers: 10,000+ urban customers aged 25-40
    9. Problem: Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NATURAL LANGUAGE (Works Too)**
    \"My email is john.doe@company.com and I want weekly reports for my Good Chop Analysis project. We're analyzing Good Chop at https://goodchop.com in the food delivery industry...\"·
    **�� IMPORTANT TIPS:**
    • **Both formats work perfectly** - Use whichever feels more natural to you
    • **Be specific but concise** - \"Finding good meat locally\" is perfect
    • **URLs must start with https://** - This helps me validate and scrape correctly
    • **Don't worry about perfect formatting** - I'll understand most reasonable formats
    • **All 9 fields are required** - But you can provide them in any order·
    Ready to start? Just provide your information in any format above! ��"

      67 |       const withoutHelp = collector.generateComprehensivePrompt({ includeContextualHelp: false });
      68 |
    > 69 |       expect(withHelp).toContain('intelligently parse');
         |                        ^
      70 |       expect(withoutHelp).not.toContain('intelligently parse');
      71 |     });
      72 |

      at Object.toContain (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:69:24)

  ● ComprehensiveRequirementsCollector › generateComprehensivePrompt › should emphasize speed when requested

    expect(received).not.toContain(expected) // indexOf

    Expected substring: not "faster"
    Received string:        "�� **Welcome to the Competitor Research Agent!**

    To create your comprehensive competitive analysis, I need all the following information at once. This replaces our multi-step process and gets you started faster!

    **�� CONTACT & SCHEDULING (Required):**
    1. **Email address** - Where should I send reports?
    2. **Report frequency** - Weekly, Monthly, or Quarterly?
    3. **Project name** - What should we call this analysis?

    **�� PRODUCT INFORMATION (Required):**
    4. **Product name** - What's your product called?
    5. **Product website URL** - Full URL for analysis (https://...)
    6. **Industry/Market** - What sector are you in?

    **�� BUSINESS CONTEXT (Required):**
    7. **Product positioning** - Value props, target market, competitive advantage
    8. **Customer data** - Demographics, segments, size, characteristics  
    9. **User problems** - Core problems your product solves

    **�� HOW TO RESPOND:**

    **✅ SIMPLE NUMBERED LIST (Recommended)**
    ```
    1. john.doe@company.com
    2. Weekly  
    3. Good Chop Analysis
    4. Good Chop
    5. https://goodchop.com
    6. Food delivery
    7. Premium meat delivery for health-conscious consumers
    8. 10,000+ urban customers aged 25-40
    9. Finding high-quality, ethically sourced meat locally
    ```

    **✅ NUMBERED LIST WITH LABELS (Also Works)**
    ```
    1. Email: john.doe@company.com
    2. Frequency: Weekly
    3. Project: Good Chop Analysis
    4. Product: Good Chop
    5. Website: https://goodchop.com
    6. Industry: Food delivery
    7. Positioning: Premium meat delivery for health-conscious consumers
    8. Customers: 10,000+ urban customers aged 25-40
    9. Problem: Finding high-quality, ethically sourced meat locally
    ```

    **✅ NATURAL LANGUAGE (Works Too)**
    \"My email is john.doe@company.com and I want weekly reports for my Good Chop Analysis project. We're analyzing Good Chop at https://goodchop.com in the food delivery industry...\"

    **�� IMPORTANT TIPS:**
    • **Both formats work perfectly** - Use whichever feels more natural to you
    • **Be specific but concise** - \"Finding good meat locally\" is perfect
    • **URLs must start with https://** - This helps me validate and scrape correctly
    • **Don't worry about perfect formatting** - I'll understand most reasonable formats
    • **All 9 fields are required** - But you can provide them in any order

    Ready to start? Just provide your information in any format above! ��"

      76 |
      77 |       expect(withSpeed).toContain('faster');
    > 78 |       expect(withoutSpeed).not.toContain('faster');
         |                                ^
      79 |     });
      80 |   });
      81 |

      at Object.toContain (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:78:32)

  ● ComprehensiveRequirementsCollector › generateIndustrySpecificPrompt › should generate industry-specific prompts

    expect(received).toContain(expected) // indexOf

    Expected substring: "SaaS"
    Received string:    "�� **Welcome to the Competitor Research Agent!**·
    To create your comprehensive competitive analysis, I need all the following information at once. This replaces our multi-step process and gets you started faster!·
    **�� CONTACT & SCHEDULING (Required):**
    1. **Email address** - Where should I send reports?
    2. **Report frequency** - Weekly, Monthly, or Quarterly?
    3. **Project name** - What should we call this analysis?·
    **�� PRODUCT INFORMATION (Required):**
    4. **Product name** - What's your product called?
    5. **Product website URL** - Full URL for analysis (https://...)
    6. **Industry/Market** - What sector are you in?·
    **�� BUSINESS CONTEXT (Required):**
    7. **Product positioning** - Value props, target market, competitive advantage
    8. **Customer data** - Demographics, segments, size, characteristics··
    9. **User problems** - Core problems your product solves·
    **�� HOW TO RESPOND:**·
    **✅ SIMPLE NUMBERED LIST (Recommended)**
    ```
    1. john.doe@company.com
    2. Weekly··
    3. Good Chop Analysis
    4. Good Chop
    5. https://goodchop.com
    6. Food delivery
    7. Premium meat delivery for health-conscious consumers
    8. 10,000+ urban customers aged 25-40
    9. Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NUMBERED LIST WITH LABELS (Also Works)**
    ```
    1. Email: john.doe@company.com
    2. Frequency: Weekly
    3. Project: Good Chop Analysis
    4. Product: Good Chop
    5. Website: https://goodchop.com
    6. Industry: Food delivery
    7. Positioning: Premium meat delivery for health-conscious consumers
    8. Customers: 10,000+ urban customers aged 25-40
    9. Problem: Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NATURAL LANGUAGE (Works Too)**
    \"My email is john.doe@company.com and I want weekly reports for my Good Chop Analysis project. We're analyzing Good Chop at https://goodchop.com in the food delivery industry...\"·
    **�� IMPORTANT TIPS:**
    • **Both formats work perfectly** - Use whichever feels more natural to you
    • **Be specific but concise** - \"Finding good meat locally\" is perfect
    • **URLs must start with https://** - This helps me validate and scrape correctly
    • **Don't worry about perfect formatting** - I'll understand most reasonable formats
    • **All 9 fields are required** - But you can provide them in any order·
    Ready to start? Just provide your information in any format above! ��"

      85 |       const fintech = collector.generateIndustrySpecificPrompt('fintech');
      86 |
    > 87 |       expect(saasPrompt).toContain('SaaS');
         |                          ^
      88 |       expect(saasPrompt).toContain('B2B productivity platform');
      89 |       
      90 |       expect(fintech).toContain('fintech');

      at Object.toContain (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:87:26)

  ● ComprehensiveRequirementsCollector › generateConcisePrompt › should generate a concise prompt

    expect(received).toContain(expected) // indexOf

    Expected substring: "Competitor Analysis Setup"
    Received string:    "�� **Welcome to the Competitor Research Agent!**·
    To create your comprehensive competitive analysis, I need all the following information at once. This replaces our multi-step process and gets you started faster!·
    **�� CONTACT & SCHEDULING (Required):**
    1. **Email address** - Where should I send reports?
    2. **Report frequency** - Weekly, Monthly, or Quarterly?
    3. **Project name** - What should we call this analysis?·
    **�� PRODUCT INFORMATION (Required):**
    4. **Product name** - What's your product called?
    5. **Product website URL** - Full URL for analysis (https://...)
    6. **Industry/Market** - What sector are you in?·
    **�� BUSINESS CONTEXT (Required):**
    7. **Product positioning** - Value props, target market, competitive advantage
    8. **Customer data** - Demographics, segments, size, characteristics··
    9. **User problems** - Core problems your product solves·
    **�� HOW TO RESPOND:**·
    **✅ SIMPLE NUMBERED LIST (Recommended)**
    ```
    1. john.doe@company.com
    2. Weekly··
    3. Good Chop Analysis
    4. Good Chop
    5. https://goodchop.com
    6. Food delivery
    7. Premium meat delivery for health-conscious consumers
    8. 10,000+ urban customers aged 25-40
    9. Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NUMBERED LIST WITH LABELS (Also Works)**
    ```
    1. Email: john.doe@company.com
    2. Frequency: Weekly
    3. Project: Good Chop Analysis
    4. Product: Good Chop
    5. Website: https://goodchop.com
    6. Industry: Food delivery
    7. Positioning: Premium meat delivery for health-conscious consumers
    8. Customers: 10,000+ urban customers aged 25-40
    9. Problem: Finding high-quality, ethically sourced meat locally
    ```·
    **✅ NATURAL LANGUAGE (Works Too)**
    \"My email is john.doe@company.com and I want weekly reports for my Good Chop Analysis project. We're analyzing Good Chop at https://goodchop.com in the food delivery industry...\"·
    **�� IMPORTANT TIPS:**
    • **Both formats work perfectly** - Use whichever feels more natural to you
    • **Be specific but concise** - \"Finding good meat locally\" is perfect
    • **URLs must start with https://** - This helps me validate and scrape correctly
    • **Don't worry about perfect formatting** - I'll understand most reasonable formats
    • **All 9 fields are required** - But you can provide them in any order·
    Ready to start? Just provide your information in any format above! ��"

       97 |       const prompt = collector.generateConcisePrompt();
       98 |       
    >  99 |       expect(prompt).toContain('Competitor Analysis Setup');
          |                      ^
      100 |       expect(prompt).not.toContain('OPTIONAL ENHANCEMENTS');
      101 |       expect(prompt).not.toContain('��');
      102 |       expect(prompt).toContain('Ready for your input');

      at Object.toContain (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:99:22)

  ● ComprehensiveRequirementsCollector › generatePartialPrompt › should generate helpful partial prompts

    expect(received).toContain(expected) // indexOf

    Expected substring: "Product Website"
    Received string:    "�� **Almost Complete!** You've provided 7/9 required fields.·
    **Still need:**
    • **Product URL**: Your product's website (e.g., https://myproduct.com)
    • **Industry**: Your market sector (e.g., SaaS)·
    **Already have:**
    �� Email: test@company.com
    �� Frequency: Weekly
    �� Project: Test Project·
    Please provide the missing information in any format you prefer. I'll combine it with what you've already given me! ��"

      117 |       expect(prompt).toContain('Almost Complete');
      118 |       expect(prompt).toContain('7/9 required fields');
    > 119 |       expect(prompt).toContain('Product Website');
          |                      ^
      120 |       expect(prompt).toContain('Industry/Market');
      121 |       expect(prompt).toContain('Already have');
      122 |       expect(prompt).toContain('test@company.com');

      at Object.toContain (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:119:22)

  ● ComprehensiveRequirementsCollector › Field Extraction › Email extraction › should extract email from various formats

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:150:36)
          at Array.forEach (<anonymous>)
      at Object.forEach (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:149:19)

  ● ComprehensiveRequirementsCollector › Field Extraction › Email extraction › should handle invalid email formats

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:166:36)
          at Array.forEach (<anonymous>)
      at Object.forEach (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:165:23)

  ● ComprehensiveRequirementsCollector › Field Extraction › Frequency extraction › should extract frequency keywords

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:183:36)
          at Array.forEach (<anonymous>)
      at Object.forEach (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:182:19)

  ● ComprehensiveRequirementsCollector › Field Extraction › URL extraction › should extract URLs with cleanup

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:199:36)
          at Array.forEach (<anonymous>)
      at Object.forEach (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:198:19)

  ● ComprehensiveRequirementsCollector › Field Extraction › Project name extraction › should extract project names from various formats

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:215:36)
          at Array.forEach (<anonymous>)
      at Object.forEach (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:214:19)

  ● ComprehensiveRequirementsCollector › Comprehensive parsing › should handle complete single submission

    expect(received).toBe(expected) // Object.is equality

    Expected: "https://goodchop.com"
    Received: "https://goodchop.com/"

      244 |       expect(result.extractedData.projectName).toBe('Good Chop Analysis');
      245 |       expect(result.extractedData.productName).toBe('Good Chop');
    > 246 |       expect(result.extractedData.productUrl).toBe('https://goodchop.com');
          |                                               ^
      247 |       expect(result.extractedData.industry).toBe('Food delivery');
      248 |     });
      249 |

      at Object.toBe (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:246:47)

  ● ComprehensiveRequirementsCollector › Comprehensive parsing › should handle natural language format

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:258:32)

  ● ComprehensiveRequirementsCollector › Comprehensive parsing › should handle partial submission gracefully

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:276:32)

  ● ComprehensiveRequirementsCollector › Error handling and suggestions › should provide specific guidance for invalid email

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:320:32)

  ● ComprehensiveRequirementsCollector › Error handling and suggestions › should handle missing URL gracefully

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:332:32)

  ● ComprehensiveRequirementsCollector › createMissingFieldsPrompt › should create helpful prompt for missing fields

    expect(received).toContain(expected) // indexOf

    Expected substring: "Product Website"
    Received string:    "�� **Progress: 50% Complete**·
    �� **Still need the following required information:**
    • **Product URL**: Your product's website
      �� Example: https://myproduct.com
    • **Industry**: Your market sector
      �� Example: SaaS·
    �� **Helpful tips:**
    • Include your product website URL·
    Please provide the missing information, and I'll create your competitive analysis project! ��"

      353 |       expect(prompt).toContain('Progress: 50% Complete');
      354 |       expect(prompt).toContain('Still need the following');
    > 355 |       expect(prompt).toContain('Product Website');
          |                      ^
      356 |       expect(prompt).toContain('Industry/Market');
      357 |       expect(prompt).toContain('Helpful tips');
      358 |     });

      at Object.toContain (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:355:22)

  ● ComprehensiveRequirementsCollector › Edge cases › should handle special characters in project names

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:399:32)

  ● ComprehensiveRequirementsCollector › Edge cases › should handle multiple URLs in text

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:410:32)

  ● ComprehensiveRequirementsCollector › Edge cases › should handle empty input gracefully

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:415:32)

  ● ComprehensiveRequirementsCollector › Edge cases › should handle very long input

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:424:32)

  ● ComprehensiveRequirementsCollector › Performance › should parse typical input within reasonable time

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:446:32)

  ● ComprehensiveRequirementsCollector › Phase 2.2 Advanced Parsing Features › Parsing Strategy Detection › should detect natural language format

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:485:34)

  ● ComprehensiveRequirementsCollector › Phase 2.2 Advanced Parsing Features › Parsing Strategy Detection › should handle mixed format intelligently

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:498:34)

  ● ComprehensiveRequirementsCollector › Phase 2.2 Advanced Parsing Features › Contextual Intelligence › should detect industry context from content

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:536:34)

  ● ComprehensiveRequirementsCollector › Phase 2.2 Advanced Parsing Features › Contextual Intelligence › should use contextual clues for better extraction

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:548:34)

  ● ComprehensiveRequirementsCollector › Phase 2.2 Advanced Parsing Features › Smart Completeness Calculation › should handle partial credit for uncertain extractions

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:572:34)

  ● ComprehensiveRequirementsCollector › Phase 2.2 Advanced Parsing Features › Intelligent Suggestion Generation › should provide format-specific suggestions

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:585:34)

  ● ComprehensiveRequirementsCollector › Phase 2.2 Advanced Parsing Features › Intelligent Suggestion Generation › should suggest optimal format for mixed inputs

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:594:34)

  ● ComprehensiveRequirementsCollector › Phase 2.2 Advanced Parsing Features › Intelligent Suggestion Generation › should provide context-aware field suggestions

    TypeError: this.extractFromLineByLineFormat is not a function

      632 |     // Try line-by-line structured extraction (test format)
      633 |     if (!extractedData.userEmail || !extractedData.reportFrequency || !extractedData.projectName) {
    > 634 |       this.extractFromLineByLineFormat(message, extractedData, confidence);
          |            ^
      635 |     }
      636 |     
      637 |     // Fill gaps with pattern matching

      at ComprehensiveRequirementsCollector.extractFromLineByLineFormat [as parseMixedFormat] (src/lib/chat/comprehensiveRequirementsCollector.ts:634:12)
      at ComprehensiveRequirementsCollector.parseMixedFormat [as parseComprehensiveInput] (src/lib/chat/comprehensiveRequirementsCollector.ts:453:14)
      at Object.parseComprehensiveInput (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:602:34)

  ● ComprehensiveRequirementsCollector › Phase 2.2 Advanced Parsing Features › Enhanced Field Validation › should validate email formats contextually

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      616 |         const result = collector.parseComprehensiveInput(input);
      617 |         
    > 618 |         expect(result.invalidFields.some(f => f.field === 'userEmail')).toBe(true);
          |                                                                         ^
      619 |         expect(result.invalidFields.some(f => f.reason.includes('Invalid email format'))).toBe(true);
      620 |       });
      621 |

      at Object.toBe (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:618:73)

  ● ComprehensiveRequirementsCollector › Phase 2.2 Advanced Parsing Features › Enhanced Field Validation › should validate URL formats with suggestions

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      629 |         const result = collector.parseComprehensiveInput(input);
      630 |         
    > 631 |         expect(result.invalidFields.some(f => f.field === 'productUrl')).toBe(true);
          |                                                                          ^
      632 |         expect(result.invalidFields.some(f => f.suggestion.includes('https://'))).toBe(true);
      633 |       });
      634 |

      at Object.toBe (src/__tests__/unit/comprehensiveRequirementsCollector.test.ts:631:74)

FAIL src/app/api/projects/__tests__/route.immediateReports.test.ts
  ● POST /api/projects - Phase 1.2 Enhanced Flow › Basic Request Handling › should handle simple request parsing

    expect(received).toBe(expected) // Object.is equality

    Expected: 201
    Received: 500

      171 |       const response = await POST(request);
      172 |       
    > 173 |       expect(response.status).toBe(201);
          |                               ^
      174 |     }, 10000);  // 10 second timeout
      175 |   });
      176 |

      at Object.toBe (src/app/api/projects/__tests__/route.immediateReports.test.ts:173:31)

  ● POST /api/projects - Phase 1.2 Enhanced Flow › Immediate Report Generation › should generate initial report immediately when requested

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "project-1", ObjectContaining {"enableGracefulDegradation": true, "fallbackToQueue": true, "maxConcurrentProcessing": 5, "notifyOnCompletion": false, "priority": "high", "retryAttempts": 2, "timeout": 45000}

    Number of calls: 0

      197 |
      198 |       // Verify asyncReportProcessingService was called (this is what the API route actually uses)
    > 199 |       expect(asyncReportProcessingService.processInitialReport).toHaveBeenCalledWith(
          |                                                                 ^
      200 |         'project-1',
      201 |         expect.objectContaining({
      202 |           timeout: 45000,

      at Object.toHaveBeenCalledWith (src/app/api/projects/__tests__/route.immediateReports.test.ts:199:65)

  ● POST /api/projects - Phase 1.2 Enhanced Flow › Immediate Report Generation › should respect generateInitialReport=false flag

    expect(received).toBe(expected) // Object.is equality

    Expected: 201
    Received: 500

      242 |       expect(asyncReportProcessingService.processInitialReport).not.toHaveBeenCalled();
      243 |       
    > 244 |       expect(response.status).toBe(201);
          |                               ^
      245 |     }, 10000);
      246 |
      247 |     it('should fallback to queue when immediate generation fails', async () => {

      at Object.toBe (src/app/api/projects/__tests__/route.immediateReports.test.ts:244:31)

  ● POST /api/projects - Phase 1.2 Enhanced Flow › Immediate Report Generation › should fallback to queue when immediate generation fails

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "project-1", Any<Object>

    Number of calls: 0

      275 |
      276 |       // Verify processing service was called
    > 277 |       expect(asyncReportProcessingService.processInitialReport).toHaveBeenCalledWith('project-1', expect.any(Object));
          |                                                                 ^
      278 |       
      279 |       expect(responseData.reportGeneration).toEqual(
      280 |         expect.objectContaining({

      at Object.toHaveBeenCalledWith (src/app/api/projects/__tests__/route.immediateReports.test.ts:277:65)

  ● POST /api/projects - Phase 1.2 Enhanced Flow › Immediate Report Generation › should handle requireFreshSnapshots option

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "project-1", ObjectContaining {"fallbackToQueue": true, "priority": "high", "timeout": 45000}

    Number of calls: 0

      304 |
      305 |       // The API route uses asyncReportProcessingService and the requireFreshSnapshots logic is handled internally
    > 306 |       expect(asyncReportProcessingService.processInitialReport).toHaveBeenCalledWith(
          |                                                                 ^
      307 |         'project-1',
      308 |         expect.objectContaining({
      309 |           timeout: 45000,

      at Object.toHaveBeenCalledWith (src/app/api/projects/__tests__/route.immediateReports.test.ts:306:65)

  ● POST /api/projects - Phase 1.2 Enhanced Flow › Project Creation Resilience › should create project successfully even when report generation fails completely

    expect(received).toBe(expected) // Object.is equality

    Expected: 201
    Received: 500

      345 |
      346 |       // Project should still be created successfully
    > 347 |       expect(response.status).toBe(201);
          |                               ^
      348 |       expect(responseData.id).toBe('project-1');
      349 |       
      350 |       // Report generation should indicate failure

      at Object.toBe (src/app/api/projects/__tests__/route.immediateReports.test.ts:347:31)

FAIL src/__tests__/integration/systemIntegration.test.ts
  ● Phase 5.4: System Integration Tests › Backend Services Integration › InitialComparativeReportService Integration › should generate report with real-time status updates

    TypeError: realTimeStatusService.subscribeToProjectStatus is not a function

      157 |
      158 |         // Subscribe to real-time updates
    > 159 |         realTimeStatusService.subscribeToProjectStatus(projectId, statusCallback);
          |                               ^
      160 |
      161 |         try {
      162 |           // Generate initial report

      at Object.subscribeToProjectStatus (src/__tests__/integration/systemIntegration.test.ts:159:31)

  ● Phase 5.4: System Integration Tests › Backend Services Integration › InitialComparativeReportService Integration › should handle smart data collection integration

    Project qmc9dka989pw7sar84x0bnbl not found

      248 |
      249 |       if (!project) {
    > 250 |         throw new Error(`Project ${projectId} not found`);
          |               ^
      251 |       }
      252 |
      253 |       const totalCompetitors = project.competitors.length;

      at SmartDataCollectionService.collectCompetitorDataWithPriorities (src/services/reports/smartDataCollectionService.ts:250:15)
      at SmartDataCollectionService.collectProjectData (src/services/reports/smartDataCollectionService.ts:108:36)
      at Object.<anonymous> (src/__tests__/integration/systemIntegration.test.ts:196:38)

  ● Phase 5.4: System Integration Tests › Backend Services Integration › InitialComparativeReportService Integration › should enforce rate limiting during concurrent operations

    expect(received).toBeGreaterThan(expected)

    Expected: > 10000
    Received:   1

      239 |
      240 |         expect(successfulReports.length).toBeLessThanOrEqual(5); // Max concurrent snapshots per project
    > 241 |         expect(endTime - startTime).toBeGreaterThan(10000); // Should take time due to rate limiting
          |                                     ^
      242 |
      243 |         // Add successful report IDs to cleanup
      244 |         successfulReports.forEach(result => {

      at Object.toBeGreaterThan (src/__tests__/integration/systemIntegration.test.ts:241:37)

  ● Phase 5.4: System Integration Tests › Backend Services Integration › Configuration Management Integration › should update configuration and propagate changes

    TypeError: Cannot convert undefined or null to object
        at Function.keys (<anonymous>)

      220 |       logger.error('Configuration update failed', error as Error, {
      221 |         updatedBy,
    > 222 |         updateFields: Object.keys(updates),
          |                              ^
      223 |         rollbackToken
      224 |       });
      225 |

      at ConfigurationManagementService.keys [as updateConfiguration] (src/services/configurationManagementService.ts:222:30)
      at Object.updateConfiguration (src/__tests__/integration/systemIntegration.test.ts:259:50)

  ● Phase 5.4: System Integration Tests › API Endpoints Integration › Project Creation API Integration › should create project with immediate report generation

    TypeError: Cannot read properties of undefined (reading 'id')

      352 |         // For integration testing, we're testing the service integration
      353 |         const project = await createTestProjectWithData(projectData);
    > 354 |         testProjectIds.push(project.id);
          |                                     ^
      355 |
      356 |         expect(project).toBeDefined();
      357 |         expect(project.id).toBeDefined();

      at Object.id (src/__tests__/integration/systemIntegration.test.ts:354:37)

  ● Phase 5.4: System Integration Tests › Infrastructure Integration › Database Schema Integration › should handle initial reports schema correctly

    TypeError: Cannot read properties of undefined (reading 'id')

      462 |         });
      463 |
    > 464 |         testReportIds.push(report.id);
          |                                   ^
      465 |
      466 |         expect(report).toBeDefined();
      467 |         expect(report.isInitialReport).toBe(true);

      at Object.id (src/__tests__/integration/systemIntegration.test.ts:464:35)

  ● Phase 5.4: System Integration Tests › End-to-End Integration › should complete full user journey with all systems

    Project rrr7nw8m09cv0zdr8zi2ct03 not found

      511 |
      512 |       if (!project) {
    > 513 |         throw new Error(`Project ${projectId} not found`);
          |               ^
      514 |       }
      515 |
      516 |       const missingData: string[] = [];

      at InitialComparativeReportService.validateProjectReadiness (src/services/reports/initialComparativeReportService.ts:513:15)
      at Object.<anonymous> (src/__tests__/integration/systemIntegration.test.ts:580:31)

FAIL src/__tests__/e2e/workflowValidation.test.ts
  ● Product vs Competitor Workflow E2E › Phase 4.1: Complete Workflow Testing › should extract valid project data from chat message

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      35 |       const extractionResult = projectExtractor.extractProjectData(chatMessage);
      36 |       
    > 37 |       expect(extractionResult.success).toBe(true);
         |                                        ^
      38 |       expect(extractionResult.data).toBeDefined();
      39 |       expect(extractionResult.data!.userEmail).toBe('test-workflow@example.com');
      40 |       expect(extractionResult.data!.projectName).toBe('TestCorp Competitive Analysis');

      at Object.toBe (src/__tests__/e2e/workflowValidation.test.ts:37:40)

  ● Product vs Competitor Workflow E2E › Phase 4.1: Complete Workflow Testing › should generate comprehensive UX-enhanced report

    expect(received).toBe(expected) // Object.is equality

    Expected: "TestCorp Platform"
    Received: "Mock Product"

      319 |
      320 |       // Verify report metadata
    > 321 |       expect(reportResult.report.metadata.productName).toBe('TestCorp Platform');
          |                                                        ^
      322 |       expect(reportResult.report.metadata.competitorCount).toBe(2);
      323 |       const uxConfidenceEntry = reportResult.report.keyFindings.find(finding => 
      324 |         finding.includes('UX Analysis Confidence:')

      at Object.toBe (src/__tests__/e2e/workflowValidation.test.ts:321:56)

FAIL src/__tests__/unit/conversation.test.ts
  ● ConversationManager - Phase 3.1 Integration › Feature Flag Support › should use legacy flow when comprehensive flow is disabled

    expect(received).toBe(expected) // Object.is equality

    Expected: "text"
    Received: "comprehensive_form"

      25 |       const response = await conversationManager.processUserMessage('');
      26 |       
    > 27 |       expect(response.expectedInputType).toBe('text');
         |                                          ^
      28 |       expect(response.message).toContain('Please tell me:');
      29 |       expect(response.message).toContain('Your email address');
      30 |     });

      at Object.toBe (src/__tests__/unit/conversation.test.ts:27:42)

  ● ConversationManager - Phase 3.1 Integration › Feature Flag Support › should respect environment variable for feature flag

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: undefined

      47 |       conversationManager = new ConversationManager();
      48 |       
    > 49 |       expect(conversationManager['useComprehensiveFlow']).toBe(true);
         |                                                           ^
      50 |       
      51 |       // Cleanup
      52 |       delete process.env.ENABLE_COMPREHENSIVE_FLOW;

      at Object.toBe (src/__tests__/unit/conversation.test.ts:49:59)

  ● ConversationManager - Phase 3.1 Integration › Comprehensive Input Handling › should handle complete comprehensive submission

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: undefined

      103 |       const response = await conversationManager.processUserMessage(completeInput);
      104 |
    > 105 |       expect(response.projectCreated).toBe(true);
          |                                       ^
      106 |       expect(response.nextStep).toBe(1.5);
      107 |       expect(response.message).toContain('Project Created Successfully');
      108 |       expect(response.message).toContain('Test Product');

      at Object.toBe (src/__tests__/unit/conversation.test.ts:105:39)

  ● ConversationManager - Phase 3.1 Integration › Comprehensive Input Handling › should handle partial comprehensive submission

    expect(received).toBe(expected) // Object.is equality

    Expected: "comprehensive_form"
    Received: "text"

      138 |
      139 |       expect(response.nextStep).toBe(0);
    > 140 |       expect(response.expectedInputType).toBe('comprehensive_form');
          |                                          ^
      141 |       expect(response.stepDescription).toBe('Complete Project Setup');
      142 |     });
      143 |

      at Object.toBe (src/__tests__/unit/conversation.test.ts:140:42)

  ● ConversationManager - Phase 3.1 Integration › Comprehensive Input Handling › should handle invalid input with validation errors

    expect(received).toBe(expected) // Object.is equality

    Expected: "comprehensive_form"
    Received: "text"

      170 |
      171 |       expect(response.nextStep).toBe(0);
    > 172 |       expect(response.expectedInputType).toBe('comprehensive_form');
          |                                          ^
      173 |     });
      174 |   });
      175 |

      at Object.toBe (src/__tests__/unit/conversation.test.ts:172:42)

  ● ConversationManager - Phase 3.1 Integration › Error Handling › should handle project creation failure gracefully

    expect(received).toContain(expected) // indexOf

    Expected substring: "Error Creating Project"
    Received string:    "�� **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    �� **What happened:** System error occurred: Unexpected processing issue·
    �� **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! ��"

      252 |
      253 |       expect(response.error).toBeDefined();
    > 254 |       expect(response.message).toContain('Error Creating Project');
          |                                ^
      255 |       expect(response.message).toContain('retry');
      256 |     });
      257 |

      at Object.toContain (src/__tests__/unit/conversation.test.ts:254:32)

  ● ConversationManager - Phase 3.1 Integration › Error Handling › should handle parsing errors gracefully

    expect(received).toContain(expected) // indexOf

    Expected substring: "error processing your request"
    Received string:    "�� **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    �� **What happened:** System error occurred: Unexpected processing issue·
    �� **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! ��"

      266 |
      267 |       expect(response.error).toBeDefined();
    > 268 |       expect(response.message).toContain('error processing your request');
          |                                ^
      269 |     });
      270 |   });
      271 |

      at Object.toContain (src/__tests__/unit/conversation.test.ts:268:32)

  ● ConversationManager - Phase 3.1 Integration › Phase 3.2 Enhanced Error Handling › Parsing Error Recovery › should handle parsing errors gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: "Failed to parse input format"
    Received: "Unable to parse input: Format could not be recognized"

      486 |         const response = await conversationManager.processUserMessage(malformedInput);
      487 |
    > 488 |         expect(response.error).toBe('Failed to parse input format');
          |                                ^
      489 |         expect(response.message).toContain('Oops! I had trouble parsing');
      490 |         expect(response.message).toContain('What happened: Failed to parse input format');
      491 |         expect(response.message).toContain('Use numbered list');

      at Object.toBe (src/__tests__/unit/conversation.test.ts:488:32)

  ● ConversationManager - Phase 3.1 Integration › Phase 3.2 Enhanced Error Handling › Parsing Error Recovery › should provide specific guidance for long inputs

    expect(received).toContain(expected) // indexOf

    Expected substring: "Try shorter format"
    Received string:    "�� **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    �� **What happened:** System error occurred: Unexpected processing issue·
    �� **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! ��"

      504 |         const response = await conversationManager.processUserMessage(longInput);
      505 |
    > 506 |         expect(response.message).toContain('Try shorter format');
          |                                  ^
      507 |         expect(response.message).toContain('breaking it into key points');
      508 |       });
      509 |

      at Object.toContain (src/__tests__/unit/conversation.test.ts:506:34)

  ● ConversationManager - Phase 3.1 Integration › Phase 3.2 Enhanced Error Handling › Parsing Error Recovery › should provide specific guidance for special characters

    expect(received).toContain(expected) // indexOf

    Expected substring: "Simplify formatting"
    Received string:    "�� **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    �� **What happened:** System error occurred: Unexpected processing issue·
    �� **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! ��"

      517 |         const response = await conversationManager.processUserMessage(specialCharInput);
      518 |
    > 519 |         expect(response.message).toContain('Simplify formatting');
          |                                  ^
      520 |         expect(response.message).toContain('basic punctuation');
      521 |       });
      522 |

      at Object.toContain (src/__tests__/unit/conversation.test.ts:519:34)

  ● ConversationManager - Phase 3.1 Integration › Phase 3.2 Enhanced Error Handling › Parsing Error Recovery › should maintain conversational tone during error recovery

    expect(received).toContain(expected) // indexOf

    Expected substring: "I'm here to help!"
    Received string:    "�� **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    �� **What happened:** System error occurred: Unexpected processing issue·
    �� **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! ��"

      528 |         const response = await conversationManager.processUserMessage('Error input');
      529 |
    > 530 |         expect(response.message).toContain("I'm here to help!");
          |                                  ^
      531 |         expect(response.message).toContain('��');
      532 |         expect(response.message).toContain('comfortable for you');
      533 |       });

      at Object.toContain (src/__tests__/unit/conversation.test.ts:530:34)

  ● Phase 4.2: Enhanced Confirmation Display › Comprehensive Confirmation Display › should create comprehensive confirmation display with all sections

    TypeError: Cannot read properties of undefined (reading 'collectedData')

      1144 |     
      1145 |     // *** FIX: Store the requirements in chat state BEFORE showing confirmation ***
    > 1146 |     this.chatState.collectedData = this.comprehensiveCollector.toChatState(collectedData as ComprehensiveProjectRequirements).collectedData;
           |                                                                            ^
      1147 |     
      1148 |     let message = `�� **Ready to Create Your Competitive Analysis Project!**\n\n`;
      1149 |     

      at ConversationManager.collectedData [as createComprehensiveConfirmation] (src/lib/chat/conversation.ts:1146:76)
      at Object.<anonymous> (src/__tests__/unit/conversation.test.ts:1056:76)

  ● Phase 4.2: Enhanced Confirmation Display › Comprehensive Confirmation Display › should display all contact and project information correctly

    TypeError: Cannot read properties of undefined (reading 'collectedData')

      1144 |     
      1145 |     // *** FIX: Store the requirements in chat state BEFORE showing confirmation ***
    > 1146 |     this.chatState.collectedData = this.comprehensiveCollector.toChatState(collectedData as ComprehensiveProjectRequirements).collectedData;
           |                                                                            ^
      1147 |     
      1148 |     let message = `�� **Ready to Create Your Competitive Analysis Project!**\n\n`;
      1149 |     

      at ConversationManager.collectedData [as createComprehensiveConfirmation] (src/lib/chat/conversation.ts:1146:76)
      at Object.<anonymous> (src/__tests__/unit/conversation.test.ts:1072:76)

  ● Phase 4.2: Enhanced Confirmation Display › Comprehensive Confirmation Display › should display all product information correctly

    TypeError: Cannot read properties of undefined (reading 'collectedData')

      1144 |     
      1145 |     // *** FIX: Store the requirements in chat state BEFORE showing confirmation ***
    > 1146 |     this.chatState.collectedData = this.comprehensiveCollector.toChatState(collectedData as ComprehensiveProjectRequirements).collectedData;
           |                                                                            ^
      1147 |     
      1148 |     let message = `�� **Ready to Create Your Competitive Analysis Project!**\n\n`;
      1149 |     

      at ConversationManager.collectedData [as createComprehensiveConfirmation] (src/lib/chat/conversation.ts:1146:76)
      at Object.<anonymous> (src/__tests__/unit/conversation.test.ts:1080:76)

  ● Phase 4.2: Enhanced Confirmation Display › Comprehensive Confirmation Display › should format multiline business context properly

    TypeError: Cannot read properties of undefined (reading 'collectedData')

      1144 |     
      1145 |     // *** FIX: Store the requirements in chat state BEFORE showing confirmation ***
    > 1146 |     this.chatState.collectedData = this.comprehensiveCollector.toChatState(collectedData as ComprehensiveProjectRequirements).collectedData;
           |                                                                            ^
      1147 |     
      1148 |     let message = `�� **Ready to Create Your Competitive Analysis Project!**\n\n`;
      1149 |     

      at ConversationManager.collectedData [as createComprehensiveConfirmation] (src/lib/chat/conversation.ts:1146:76)
      at Object.<anonymous> (src/__tests__/unit/conversation.test.ts:1088:76)

  ● Phase 4.2: Enhanced Confirmation Display › Comprehensive Confirmation Display › should include optional enhancements when provided

    TypeError: Cannot read properties of undefined (reading 'collectedData')

      1144 |     
      1145 |     // *** FIX: Store the requirements in chat state BEFORE showing confirmation ***
    > 1146 |     this.chatState.collectedData = this.comprehensiveCollector.toChatState(collectedData as ComprehensiveProjectRequirements).collectedData;
           |                                                                            ^
      1147 |     
      1148 |     let message = `�� **Ready to Create Your Competitive Analysis Project!**\n\n`;
      1149 |     

      at ConversationManager.collectedData [as createComprehensiveConfirmation] (src/lib/chat/conversation.ts:1146:76)
      at Object.<anonymous> (src/__tests__/unit/conversation.test.ts:1106:76)

  ● Phase 4.2: Enhanced Confirmation Display › Comprehensive Confirmation Display › should include validation warnings when provided

    TypeError: Cannot read properties of undefined (reading 'collectedData')

      1144 |     
      1145 |     // *** FIX: Store the requirements in chat state BEFORE showing confirmation ***
    > 1146 |     this.chatState.collectedData = this.comprehensiveCollector.toChatState(collectedData as ComprehensiveProjectRequirements).collectedData;
           |                                                                            ^
      1147 |     
      1148 |     let message = `�� **Ready to Create Your Competitive Analysis Project!**\n\n`;
      1149 |     

      at ConversationManager.collectedData [as createComprehensiveConfirmation] (src/lib/chat/conversation.ts:1146:76)
      at Object.<anonymous> (src/__tests__/unit/conversation.test.ts:1127:76)

  ● Phase 4.2: Enhanced Confirmation Display › Comprehensive Confirmation Display › should include data quality assessment

    TypeError: Cannot read properties of undefined (reading 'collectedData')

      1144 |     
      1145 |     // *** FIX: Store the requirements in chat state BEFORE showing confirmation ***
    > 1146 |     this.chatState.collectedData = this.comprehensiveCollector.toChatState(collectedData as ComprehensiveProjectRequirements).collectedData;
           |                                                                            ^
      1147 |     
      1148 |     let message = `�� **Ready to Create Your Competitive Analysis Project!**\n\n`;
      1149 |     

      at ConversationManager.collectedData [as createComprehensiveConfirmation] (src/lib/chat/conversation.ts:1146:76)
      at Object.<anonymous> (src/__tests__/unit/conversation.test.ts:1137:76)

  ● Phase 4.2: Enhanced Confirmation Display › Comprehensive Confirmation Display › should include clear next step instructions

    TypeError: Cannot read properties of undefined (reading 'collectedData')

      1144 |     
      1145 |     // *** FIX: Store the requirements in chat state BEFORE showing confirmation ***
    > 1146 |     this.chatState.collectedData = this.comprehensiveCollector.toChatState(collectedData as ComprehensiveProjectRequirements).collectedData;
           |                                                                            ^
      1147 |     
      1148 |     let message = `�� **Ready to Create Your Competitive Analysis Project!**\n\n`;
      1149 |     

      at ConversationManager.collectedData [as createComprehensiveConfirmation] (src/lib/chat/conversation.ts:1146:76)
      at Object.<anonymous> (src/__tests__/unit/conversation.test.ts:1146:76)

  ● Phase 4.2: Enhanced Confirmation Display › Confirmation Response Handling › should handle edit requests

    expect(received).toContain(expected) // indexOf

    Expected substring: "Edit Your Information"
    Received string:    "�� **I didn't quite understand your response.**·
    Please choose one of the following:·
    • **\"yes\"** - Create the project and start analysis
    • **\"edit\"** - Modify the information
    • **\"cancel\"** - Start over·
    What would you like to do?"

      1267 |         const result = await conversationManager['handleConfirmationResponse'](response);
      1268 |         
    > 1269 |         expect(result.message).toContain('Edit Your Information');
           |                                ^
      1270 |         expect(result.nextStep).toBe(0);
      1271 |         expect(result.stepDescription).toBe('Edit Project Information');
      1272 |         expect(result.expectedInputType).toBe('comprehensive_form');

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1269:32)

  ● Phase 4.2: Enhanced Confirmation Display › Confirmation Response Handling › should handle cancellation requests

    expect(received).toContain(expected) // indexOf

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      1281 |         
      1282 |         // Should return to project initialization
    > 1283 |         expect(result.message).toContain('comprehensive form');
           |                                ^
      1284 |         expect(result.expectedInputType).toBe('comprehensive_form');
      1285 |       }
      1286 |     });

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1283:32)

  ● Phase 4.2: Enhanced Confirmation Display › Integration with Validation › should integrate validation results into confirmation display

    TypeError: Cannot read properties of undefined (reading 'collectedData')

      1144 |     
      1145 |     // *** FIX: Store the requirements in chat state BEFORE showing confirmation ***
    > 1146 |     this.chatState.collectedData = this.comprehensiveCollector.toChatState(collectedData as ComprehensiveProjectRequirements).collectedData;
           |                                                                            ^
      1147 |     
      1148 |     let message = `�� **Ready to Create Your Competitive Analysis Project!**\n\n`;
      1149 |     

      at ConversationManager.collectedData [as createComprehensiveConfirmation] (src/lib/chat/conversation.ts:1146:76)
      at Object.<anonymous> (src/__tests__/unit/conversation.test.ts:1359:76)

  ● Phase 4.2: Enhanced Confirmation Display › Integration with Validation › should limit warnings and suggestions display

    TypeError: Cannot read properties of undefined (reading 'collectedData')

      1144 |     
      1145 |     // *** FIX: Store the requirements in chat state BEFORE showing confirmation ***
    > 1146 |     this.chatState.collectedData = this.comprehensiveCollector.toChatState(collectedData as ComprehensiveProjectRequirements).collectedData;
           |                                                                            ^
      1147 |     
      1148 |     let message = `�� **Ready to Create Your Competitive Analysis Project!**\n\n`;
      1149 |     

      at ConversationManager.collectedData [as createComprehensiveConfirmation] (src/lib/chat/conversation.ts:1146:76)
      at Object.<anonymous> (src/__tests__/unit/conversation.test.ts:1378:76)

  ● Phase 5.1: Legacy Session Support › Legacy Session Routing › should route to legacy step handlers when legacy session detected

    expect(received).toContain(expected) // indexOf

    Expected substring: "URL"
    Received string:    "I apologize, but I encountered an error processing your request. Please try again."

      1485 |       
      1486 |       // Should handle legacy step 1 (product data collection)
    > 1487 |       expect(response.message).toContain('URL');
           |                                ^
      1488 |       expect(response.stepDescription).toContain('Product');
      1489 |     });
      1490 |

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1487:32)

  ● Phase 5.1: Legacy Session Support › Migration to New Flow › should handle "migrate now" response

    expect(received).toContain(expected) // indexOf

    Expected substring: "Welcome to the Enhanced Experience"
    Received string:    "�� **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    �� **What happened:** System error occurred: Unexpected processing issue·
    �� **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! ��"

      1578 |       const response = await manager.processUserMessage('migrate now');
      1579 |       
    > 1580 |       expect(response.message).toContain('Welcome to the Enhanced Experience');
           |                                ^
      1581 |       expect(response.message).toContain('comprehensive form');
      1582 |       expect(response.nextStep).toBe(0);
      1583 |       expect(response.stepDescription).toContain('Migrated');

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1580:32)

  ● Phase 5.1: Legacy Session Support › Migration to New Flow › should handle "finish legacy" response

    expect(received).toContain(expected) // indexOf

    Expected substring: "Continuing Legacy Session"
    Received string:    "�� **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    �� **What happened:** System error occurred: Unexpected processing issue·
    �� **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! ��"

      1604 |       const response = await manager.processUserMessage('finish legacy');
      1605 |       
    > 1606 |       expect(response.message).toContain('Continuing Legacy Session');
           |                                ^
      1607 |       expect(response.message).toContain('step-by-step process');
      1608 |       expect(response.message).toContain('Next Time');
      1609 |       expect(response.expectedInputType).toBe('text');

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1606:32)

  ● Phase 5.1: Legacy Session Support › Migration to New Flow › should handle "tell me more" response with feature details

    expect(received).toContain(expected) // indexOf

    Expected substring: "Enhanced Flow Features"
    Received string:    "�� **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    �� **What happened:** System error occurred: Unexpected processing issue·
    �� **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! ��"

      1629 |       const response = await manager.processUserMessage('tell me more');
      1630 |       
    > 1631 |       expect(response.message).toContain('Enhanced Flow Features');
           |                                ^
      1632 |       expect(response.message).toContain('Speed Improvements');
      1633 |       expect(response.message).toContain('Smart Intelligence');
      1634 |       expect(response.message).toContain('Professional Experience');

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1631:32)

  ● Phase 5.1: Legacy Session Support › Legacy Session Recovery › should handle unknown legacy step with migration prompt

    expect(received).toContain(expected) // indexOf

    Expected substring: "Session State Recovery"
    Received string:    "�� **Ready to upgrade your experience?**·
    I can help you get started with our new comprehensive form that's much faster and easier!·
    **Here's what you can do:**·
    �� **Switch to comprehensive form** - Type \"upgrade\" and I'll show you how to provide all your project information at once·
    �� **Continue with current flow** - Type \"continue\" to keep using the step-by-step process·
    ⭐ **Start fresh** - Type \"restart\" to begin a new project·
    What would you prefer?"

      1654 |       const response = await manager.processUserMessage('continue');
      1655 |       
    > 1656 |       expect(response.message).toContain('Session State Recovery');
           |                                ^
      1657 |       expect(response.message).toContain('comprehensive form');
      1658 |       expect(response.message).toContain('50% faster');
      1659 |       expect(response.stepDescription).toBe('Session Recovery');

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1656:32)

  ● Phase 5.1: Legacy Session Support › Legacy Session Recovery › should preserve data during migration

    expect(received).toContain(expected) // indexOf

    Expected substring: "Migration Tip"
    Received string:    "�� **Upgrade to Enhanced Experience!**·
    I notice you're using our legacy step-by-step flow. Great news - we've launched a **much faster comprehensive form** that collects all requirements at once!·
    **�� New Flow Benefits:**
    • **⚡ 50% Faster** - Single form vs. 7+ sequential steps
    • **�� Clear Overview** - See all requirements upfront
    • **�� Smart Validation** - Intelligent error checking and suggestions
    • **�� Professional Confirmation** - Beautiful project summary before creation
    • **✨ Same Great Results** - Identical high-quality competitive analysis·
    **�� Migration Options:**
    1. **\"migrate now\"** - Switch to the new flow immediately (recommended)
    2. **\"finish legacy\"** - Complete current session, try new flow next time
    3. **\"tell me more\"** - Learn more about the new features·
    **Your Progress:** Don't worry - all your current data is preserved regardless of your choice!·
    What would you like to do?"

      1678 |       const response = await manager.processUserMessage('migrate now');
      1679 |       
    > 1680 |       expect(response.message).toContain('Migration Tip');
           |                                ^
      1681 |       expect(response.message).toContain('merge everything together');
      1682 |       
      1683 |       // Check that data is preserved in chat state

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1680:32)

  ● Phase 5.1: Legacy Session Support › Legacy Error Handling › should offer migration when legacy step encounters error

    expect(received).toContain(expected) // indexOf

    Expected substring: "Upgrade to Enhanced Experience"
    Received string:    "I apologize, but I encountered an error processing your request. Please try again."

      1717 |       const response = await manager.processUserMessage('Test Product');
      1718 |       
    > 1719 |       expect(response.message).toContain('Upgrade to Enhanced Experience');
           |                                ^
      1720 |       expect(response.message).toContain('Error in legacy flow');
      1721 |     });
      1722 |

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1719:32)

  ● Phase 5.1: Legacy Session Support › Legacy Flow Completion › should handle legacy step 6 final completion

    expect(received).toContain(expected) // indexOf

    Expected substring: "consolidated competitive report"
    Received string:    "Perfect! I'll send the consolidated comparative report to test@company.com now.·
    �� **Email Summary:**
    • **To:** test@company.com
    • **Subject:** Consolidated Competitive Analysis - Test Project
    • **Content:** Executive summary + link to full comparative report
    • **Delivery:** Within the next few minutes·
    �� **Future Projects:** Try our new single-form flow - it's 50% faster with the same great results!·
    �� **Legacy Session Complete!**·
    Your consolidated competitor research project \"Test Project\" is now active with:
    • **✅ Project Created:** test-project-id
    • **✅ Consolidated Reporting:** Single comparative report per analysis cycle
    • **✅ AI-Powered Analysis:** Claude-driven competitive intelligence
    • **✅ Strategic Insights:** Market-wide competitive analysis·
    **Next Steps:**
    • Check the **Reports section** for your comparative analysis
    • Visit the **Projects section** to manage your project
    • **Try our new flow** for your next project - type \"start new project\"·
    �� **Ready for the Enhanced Experience?** Our new single-form flow provides the same excellent results in 50% less time!·
    Thank you for using the Competitor Research Agent!"

      1792 |       
      1793 |       expect(response.message).toContain('Legacy Session Complete');
    > 1794 |       expect(response.message).toContain('consolidated competitive report');
           |                                ^
      1795 |       expect(response.message).toContain('test@company.com');
      1796 |       expect(response.message).toContain('Thank you for using');
      1797 |       expect(response.isComplete).toBe(true);

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1794:32)

  ● Phase 5.1: Legacy Session Support › Backward Compatibility › should detect comprehensive flow for new sessions

    expect(received).toContain(expected) // indexOf

    Expected substring: "Welcome to the HelloFresh"
    Received string:    "�� **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    �� **What happened:** System error occurred: Unexpected processing issue·
    �� **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! ��"

      1866 |       
      1867 |       // Should start with comprehensive flow for new sessions
    > 1868 |       expect(response.message).toContain('Welcome to the HelloFresh');
           |                                ^
      1869 |       expect(response.expectedInputType).toBe('comprehensive_form');
      1870 |       expect(response.stepDescription).toBe('Complete Project Setup');
      1871 |     });

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1868:32)

  ● Phase 5.2: Direct Migration to New Flow › Default Comprehensive Flow › should default to comprehensive flow for new sessions

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      1883 |       
      1884 |       // Phase 5.2: Should default to comprehensive flow
    > 1885 |       expect(chatState.useComprehensiveFlow).toBe(true);
           |                                              ^
      1886 |     });
      1887 |
      1888 |     test('should start with comprehensive form for project initialization', async () => {

      at Object.toBe (src/__tests__/unit/conversation.test.ts:1885:46)

  ● Phase 5.2: Direct Migration to New Flow › Default Comprehensive Flow › should start with comprehensive form for project initialization

    expect(received).toContain(expected) // indexOf

    Expected substring: "Welcome to the HelloFresh"
    Received string:    "�� **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    �� **What happened:** System error occurred: Unexpected processing issue·
    �� **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! ��"

      1891 |       const response = await manager.processUserMessage('start new project');
      1892 |       
    > 1893 |       expect(response.message).toContain('Welcome to the HelloFresh');
           |                                ^
      1894 |       expect(response.message).toContain('comprehensive');
      1895 |       expect(response.expectedInputType).toBe('comprehensive_form');
      1896 |       expect(response.stepDescription).toBe('Complete Project Setup');

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1893:32)

  ● Phase 5.2: Direct Migration to New Flow › Default Comprehensive Flow › should use comprehensive prompt by default

    expect(received).toContain(expected) // indexOf

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      1903 |       const response = (manager as any).handleProjectInitialization();
      1904 |       
    > 1905 |       expect(response.message).toContain('Welcome to the HelloFresh');
           |                                ^
      1906 |       expect(response.expectedInputType).toBe('comprehensive_form');
      1907 |       expect(response.stepDescription).toBe('Complete Project Setup');
      1908 |     });

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1905:32)

  ● Phase 5.2: Direct Migration to New Flow › Comprehensive Flow Processing › should process complete comprehensive input successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: 1.5
    Received: 0

      1932 |       
      1933 |       // Should move to confirmation step
    > 1934 |       expect(response.nextStep).toBe(1.5);
           |                                 ^
      1935 |       expect(response.stepDescription).toContain('Confirmation');
      1936 |       expect(response.message).toContain('Please review');
      1937 |     });

      at Object.toBe (src/__tests__/unit/conversation.test.ts:1934:33)

  ● Phase 5.2: Direct Migration to New Flow › Comprehensive Flow Processing › should handle partial comprehensive input with guidance

    expect(received).toBe(expected) // Object.is equality

    Expected: "Complete Project Setup"
    Received: "Error Recovery"

      1954 |       // Should stay in step 0 with guidance
      1955 |       expect(response.nextStep).toBe(0);
    > 1956 |       expect(response.stepDescription).toBe('Complete Project Setup');
           |                                        ^
      1957 |       expect(response.message).toContain('Still need');
      1958 |     });
      1959 |   });

      at Object.toBe (src/__tests__/unit/conversation.test.ts:1956:40)

  ● Phase 5.2: Direct Migration to New Flow › Fallback Mechanisms › should fallback to legacy flow when comprehensive parsing fails

    expect(received).toContain(expected) // indexOf

    Expected substring: "Legacy Fallback"
    Received string:    "�� **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    �� **What happened:** System error occurred: Unexpected processing issue·
    �� **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! ��"

      1983 |       
      1984 |       // Should fallback gracefully
    > 1985 |       expect(response.message).toContain('Legacy Fallback');
           |                                ^
      1986 |       expect(response.stepDescription).toContain('Legacy Fallback');
      1987 |     });
      1988 |

      at Object.toContain (src/__tests__/unit/conversation.test.ts:1985:32)

  ● Phase 5.2: Direct Migration to New Flow › Fallback Mechanisms › should provide guidance when both parsing methods fail

    expect(received).toContain(expected) // indexOf

    Expected substring: "help you get started"
    Received string:    "�� **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    �� **What happened:** System error occurred: Unexpected processing issue·
    �� **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! ��"

      2020 |       
      2021 |       // Should provide helpful guidance
    > 2022 |       expect(response.message).toContain('help you get started');
           |                                ^
      2023 |       expect(response.message).toContain('comprehensive form');
      2024 |       expect(response.expectedInputType).toBe('comprehensive_form');
      2025 |     });

      at Object.toContain (src/__tests__/unit/conversation.test.ts:2022:32)

  ● Phase 5.2: Direct Migration to New Flow › Fallback Mechanisms › should handle complete parsing failure with step-by-step guidance

    expect(received).toContain(expected) // indexOf

    Expected substring: "start fresh"
    Received string:    "�� **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    �� **What happened:** System error occurred: Unexpected processing issue·
    �� **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! ��"

      2047 |       
      2048 |       // Should provide basic step-by-step guidance
    > 2049 |       expect(response.message).toContain('start fresh');
           |                                ^
      2050 |       expect(response.message).toContain('step-by-step');
      2051 |       expect(response.stepDescription).toContain('Guided');
      2052 |     });

      at Object.toContain (src/__tests__/unit/conversation.test.ts:2049:32)

  ● Phase 5.2: Direct Migration to New Flow › Error Recovery and User Guidance › should provide helpful examples when parsing fails

    expect(received).toContain(expected) // indexOf

    Expected substring: "Example format"
    Received string:    "�� **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    �� **What happened:** System error occurred: Unexpected processing issue·
    �� **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! ��"

      2110 |       
      2111 |       // Should provide examples and guidance
    > 2112 |       expect(response.message).toContain('Example format');
           |                                ^
      2113 |       expect(response.message).toContain('john.doe@company.com');
      2114 |       expect(response.message).toContain('numbered lists');
      2115 |       expect(response.expectedInputType).toBe('comprehensive_form');

      at Object.toContain (src/__tests__/unit/conversation.test.ts:2112:32)

  ● Phase 5.2: Direct Migration to New Flow › Error Recovery and User Guidance › should maintain user data during error recovery

    expect(received).toContain(expected) // indexOf

    Expected substring: "Still need"
    Received string:    "�� **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    �� **What happened:** System error occurred: Unexpected processing issue·
    �� **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! ��"

      2126 |       
      2127 |       // Should preserve data and ask for missing fields
    > 2128 |       expect(response.message).toContain('Still need');
           |                                ^
      2129 |       expect(response.nextStep).toBe(0);
      2130 |       
      2131 |       // Check that partial data is preserved

      at Object.toContain (src/__tests__/unit/conversation.test.ts:2128:32)

  ● Phase 5.2: Direct Migration to New Flow › Error Recovery and User Guidance › should provide progressive completion encouragement

    expect(received).toContain(expected) // indexOf

    Expected substring: "Good"
    Received string:    "�� **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    �� **What happened:** System error occurred: Unexpected processing issue·
    �� **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! ��"

      2151 |       
      2152 |       // Should provide encouraging message about progress
    > 2153 |       expect(response.message).toContain('progress') || expect(response.message).toContain('Good');
           |                                                                                  ^
      2154 |       expect(response.nextStep).toBe(0);
      2155 |     });
      2156 |   });

      at Object.toContain (src/__tests__/unit/conversation.test.ts:2153:82)

  ● Phase 5.2: Direct Migration to New Flow › Performance and Reliability › should handle concurrent comprehensive form submissions

    expect(received).toBe(expected) // Object.is equality

    Expected: 1.5
    Received: 0

      2183 |       // All should succeed
      2184 |       responses.forEach(response => {
    > 2185 |         expect(response.nextStep).toBe(1.5);
           |                                   ^
      2186 |         expect(response.stepDescription).toContain('Confirmation');
      2187 |       });
      2188 |     });

      at toBe (src/__tests__/unit/conversation.test.ts:2185:35)
          at Array.forEach (<anonymous>)
      at Object.forEach (src/__tests__/unit/conversation.test.ts:2184:17)

  ● Phase 5.2: Direct Migration to New Flow › Integration with Existing Features › should maintain compatibility with validation features

    expect(received).toContain(expected) // indexOf

    Expected substring: "email"
    Received string:    "�� **Oops! I had trouble parsing your input.**·
    Don't worry - this happens sometimes. Let me help you get back on track!·
    �� **What happened:** System error occurred: Unexpected processing issue·
    �� **How to proceed:**
    • **Try again** - You can resubmit your information
    • **Step-by-step** - Type \"help\" for guided setup
    • **Start fresh** - Type \"restart\" to begin a new project·
    I've preserved any valid information you provided, so you won't lose your progress! ��"

      2234 |       
      2235 |       // Should provide validation feedback
    > 2236 |       expect(response.message).toContain('email') || expect(response.message).toContain('URL');
           |                                ^
      2237 |       expect(response.nextStep).toBe(0);
      2238 |     });
      2239 |

      at Object.toContain (src/__tests__/unit/conversation.test.ts:2236:32)

  ● Phase 5.2: Direct Migration to New Flow › Integration with Existing Features › should integrate with confirmation flow

    expect(received).toBe(expected) // Object.is equality

    Expected: 1.5
    Received: 0

      2258 |       
      2259 |       // Should reach confirmation step
    > 2260 |       expect(confirmationResponse.nextStep).toBe(1.5);
           |                                             ^
      2261 |       
      2262 |       // Confirm project creation
      2263 |       const finalResponse = await manager.processUserMessage('yes, create project');

      at Object.toBe (src/__tests__/unit/conversation.test.ts:2260:45)

  ● Phase 5.2: Direct Migration to New Flow › Migration Strategy Validation › should not use feature flags or environment variables

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      2277 |       
      2278 |       // Should default to comprehensive flow regardless of environment
    > 2279 |       expect(chatState.useComprehensiveFlow).toBe(true);
           |                                              ^
      2280 |       
      2281 |       // Should not depend on environment variables
      2282 |       delete process.env.ENABLE_COMPREHENSIVE_FLOW;

      at Object.toBe (src/__tests__/unit/conversation.test.ts:2279:46)

  ● Phase 5.2: Direct Migration to New Flow › Migration Strategy Validation › should provide clear migration path for legacy users

    expect(received).toContain(expected) // indexOf

    Expected substring: "Enhanced Experience"
    Received string:    "I apologize, but I encountered an error processing your request. Please try again."

      2302 |       const response = await manager.processUserMessage('I want to try the new flow');
      2303 |       
    > 2304 |       expect(response.message).toContain('Enhanced Experience') || 
           |                                ^
      2305 |              expect(response.message).toContain('comprehensive');
      2306 |     });
      2307 |

      at Object.toContain (src/__tests__/unit/conversation.test.ts:2304:32)

  ● Phase 5.2: Direct Migration to New Flow › Migration Strategy Validation › should maintain zero breaking changes for existing users

    expect(received).toContain(expected) // indexOf

    Expected substring: "analysis"
    Received string:    "⚠️ **Report Generation Issue**·
    I encountered an error while generating your consolidated comparative report: Failed to parse URL from /api/reports/comparative?projectId=existing-project-123·
    **What happened:** The new consolidated reporting system had an issue, but don't worry - your project and data are saved.·
    **Next steps:**
    1. **Retry** - Try again in a few minutes
    2. **Migrate** - Switch to our improved single-form flow for better reliability
    3. **Support** - Get help with this issue·
    **Project Details:**
    - **Project:** undefined
    - **Project ID:** existing-project-123
    - **Product:** Existing Product·
    Please respond with \"retry\", \"migrate\", or \"support\"."

      2325 |       expect(response.nextStep).toBe(5);
      2326 |       expect(response.message).toContain('Report') || 
    > 2327 |              expect(response.message).toContain('analysis');
           |                                       ^
      2328 |       
      2329 |       // State should be preserved
      2330 |       const chatState = manager.getChatState();

      at Object.toContain (src/__tests__/unit/conversation.test.ts:2327:39)

FAIL src/__tests__/e2e/productVsCompetitorWorkflow.test.ts
  ● Product vs Competitor Workflow E2E › Phase 4.1: Complete Workflow Testing › should extract valid project data from chat message

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      35 |       const extractionResult = projectExtractor.extractProjectData(chatMessage);
      36 |       
    > 37 |       expect(extractionResult.success).toBe(true);
         |                                        ^
      38 |       expect(extractionResult.data).toBeDefined();
      39 |       expect(extractionResult.data!.userEmail).toBe('test-workflow@example.com');
      40 |       expect(extractionResult.data!.projectName).toBe('TestCorp Competitive Analysis');

      at Object.toBe (src/__tests__/e2e/productVsCompetitorWorkflow.test.ts:37:40)

  ● Product vs Competitor Workflow E2E › Phase 4.1: Complete Workflow Testing › should generate comprehensive UX-enhanced report

    expect(received).toBe(expected) // Object.is equality

    Expected: "TestCorp Platform"
    Received: "Mock Product"

      302 |
      303 |       // Verify report metadata
    > 304 |       expect(reportResult.report.metadata.productName).toBe('TestCorp Platform');
          |                                                        ^
      305 |       expect(reportResult.report.metadata.competitorCount).toBe(2);
      306 |       expect(reportResult.report.keyFindings).toContain('UX Analysis Confidence:');
      307 |

      at Object.toBe (src/__tests__/e2e/productVsCompetitorWorkflow.test.ts:304:56)

  ● Product vs Competitor Workflow E2E › Phase 4.1: Complete Workflow Testing › should handle error scenarios gracefully

    expect(received).toContain(expected) // indexOf

    Expected substring: "Invalid input"
    Received string:    "fail is not defined"

      350 |       } catch (error) {
      351 |         expect(error).toBeInstanceOf(Error);
    > 352 |         expect(error.message).toContain('Invalid input');
          |                               ^
      353 |       }
      354 |
      355 |       logger.info('Error scenario validation complete');

      at Object.toContain (src/__tests__/e2e/productVsCompetitorWorkflow.test.ts:352:31)

FAIL src/services/reports/__tests__/partialDataReportGenerator.test.ts
  ● PartialDataReportGenerator › generatePartialDataReport › should clearly indicate data gaps and freshness in report

    expect(received).toContain(expected) // indexOf

    Expected substring: "Overall Completeness Score: 45%"
    Received string:    "# Data Completeness & Limitations·
    ## Report Data Quality
    **Overall Completeness Score:** 45%··
    **Data Freshness:** existing··
    **Quality Tier:** enhanced·
    ## Available Data Sources
    - **Product Information:** ✅ Complete
    - **Competitor Data:** ✅ Available
    - **Fresh Snapshots:** 0/3 captured
    - **Total Competitors:** 3·
    ## Moderate Data Gaps (Medium Impact)
    - **Data Freshness:** Using existing snapshots instead of fresh captures·
    ## Improving Report Quality·
    To enhance the accuracy and completeness of future reports:·
    - Schedule fresh competitor snapshot capture·
    ## Data Collection Status
    This report was generated with the best available data at the time of creation. For the most current competitive intelligence, consider scheduling regular competitor data collection and snapshot updates.
    "

      280 |       const dataGapSection = report.sections.find(s => s.type === 'data_gaps');
      281 |       expect(dataGapSection).toBeDefined();
    > 282 |       expect(dataGapSection!.content).toContain('Overall Completeness Score: 45%');
          |                                       ^
      283 |       expect(dataGapSection!.content).toContain('Data Freshness: existing');
      284 |       expect(dataGapSection!.content).toContain('Fresh Snapshots: 0/3 captured');
      285 |       expect(dataGapSection!.content).toContain('Moderate Data Gaps (Medium Impact)');

      at Object.toContain (src/services/reports/__tests__/partialDataReportGenerator.test.ts:282:39)

  ● PartialDataReportGenerator › generatePartialDataReport › should provide actionable recommendations despite partial data

    expect(received).toContain(expected) // indexOf

    Expected value: "Capture fresh competitor website snapshots for current market intelligence"
    Received array: ["Improve feature X", "Enhance UX"]

      326 |
      327 |       expect(report.strategicRecommendations.immediate).toContain('Improve feature X');
    > 328 |       expect(report.strategicRecommendations.immediate).toContain('Capture fresh competitor website snapshots for current market intelligence');
          |                                                         ^
      329 |       expect(report.strategicRecommendations.shortTerm).toContain('Establish ongoing competitive intelligence process');
      330 |       expect(report.strategicRecommendations.longTerm).toContain('Build comprehensive competitive intelligence capability');
      331 |     });

      at Object.toContain (src/services/reports/__tests__/partialDataReportGenerator.test.ts:328:57)

  ● PartialDataReportGenerator › generatePartialDataReport › should handle mixed fresh and stale data scenarios

    expect(received).toContain(expected) // indexOf

    Expected substring: "Fresh Snapshots: 2/4 captured"
    Received string:    "# Data Completeness & Limitations·
    ## Report Data Quality
    **Overall Completeness Score:** 65%··
    **Data Freshness:** mixed··
    **Quality Tier:** enhanced·
    ## Available Data Sources
    - **Product Information:** ✅ Complete
    - **Competitor Data:** ✅ Available
    - **Fresh Snapshots:** 2/4 captured
    - **Total Competitors:** 4·
    ## Moderate Data Gaps (Medium Impact)
    - **Mixed Data Freshness:** 2 competitors have fresh data, 2 have existing data·
    ## Improving Report Quality·
    To enhance the accuracy and completeness of future reports:·
    - Capture fresh snapshots for all competitors·
    ## Data Collection Status
    This report was generated with the best available data at the time of creation. For the most current competitive intelligence, consider scheduling regular competitor data collection and snapshot updates.
    "

      414 |       
      415 |       const dataGapSection = report.sections.find(s => s.type === 'data_gaps');
    > 416 |       expect(dataGapSection!.content).toContain('Fresh Snapshots: 2/4 captured');
          |                                       ^
      417 |       expect(dataGapSection!.content).toContain('Mixed Data Freshness');
      418 |     });
      419 |

      at Object.toContain (src/services/reports/__tests__/partialDataReportGenerator.test.ts:416:39)

  ● PartialDataReportGenerator › generatePartialDataReport › should create placeholder sections when section generation fails

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      539 |         section.content.includes('Data Completeness: 25%')
      540 |       );
    > 541 |       expect(hasPlaceholderContent).toBe(true);
          |                                     ^
      542 |     });
      543 |   });
      544 |

      at Object.toBe (src/services/reports/__tests__/partialDataReportGenerator.test.ts:541:37)

FAIL src/__tests__/integration/productVsCompetitorApiIntegration.test.ts
  ● PRODUCT vs COMPETITOR API Integration Tests - Fix 7.1c Applied › Comparative Report API Endpoints - Fix 7.1c Applied › should get comparative report status with realistic tracking

    TypeError: mockWorkflow.apiService.getComparativeStatus is not a function

      322 |       console.log('�� Testing comparative report status API with Fix 7.1c...');
      323 |
    > 324 |       const mockApiResponse = await mockWorkflow.apiService.getComparativeStatus({ productId: testProductId });
          |                                                             ^
      325 |
      326 |       expect(mockApiResponse.status).toBe(200);
      327 |       expect(mockApiResponse.data.success).toBe(true);

      at Object.getComparativeStatus (src/__tests__/integration/productVsCompetitorApiIntegration.test.ts:324:61)

  ● PRODUCT vs COMPETITOR API Integration Tests - Fix 7.1c Applied › Report Scheduling API Endpoints - Fix 7.1c Applied › should create report schedule with realistic workflow patterns

    TypeError: mockWorkflow.apiService.createSchedule is not a function

      354 |       };
      355 |
    > 356 |       const mockApiResponse = await mockWorkflow.apiService.createSchedule(scheduleData);
          |                                                             ^
      357 |
      358 |       expect(mockApiResponse.status).toBe(200);
      359 |       expect(mockApiResponse.data.success).toBe(true);

      at Object.createSchedule (src/__tests__/integration/productVsCompetitorApiIntegration.test.ts:356:61)

  ● PRODUCT vs COMPETITOR API Integration Tests - Fix 7.1c Applied › Report Scheduling API Endpoints - Fix 7.1c Applied › should get schedules with realistic pagination and filtering

    TypeError: mockWorkflow.apiService.getSchedules is not a function

      377 |       console.log('�� Testing schedule retrieval API with Fix 7.1c...');
      378 |
    > 379 |       const mockApiResponse = await mockWorkflow.apiService.getSchedules({ 
          |                                                             ^
      380 |         productId: testProductId,
      381 |         page: 1,
      382 |         limit: 10 

      at Object.getSchedules (src/__tests__/integration/productVsCompetitorApiIntegration.test.ts:379:61)

  ● PRODUCT vs COMPETITOR API Integration Tests - Fix 7.1c Applied › End-to-End API Workflow - Fix 7.1c Applied › should execute complete product vs competitor workflow with realistic data flow

    TypeError: mockWorkflow.apiService.generateAnalysis is not a function

      432 |       };
      433 |
    > 434 |       const analysisResponse = await mockWorkflow.apiService.generateAnalysis(analysisData);
          |                                                              ^
      435 |       expect(analysisResponse.status).toBe(200);
      436 |       const analysisId = analysisResponse.data.data.analysisId;
      437 |

      at Object.generateAnalysis (src/__tests__/integration/productVsCompetitorApiIntegration.test.ts:434:62)

  ● PRODUCT vs COMPETITOR API Integration Tests - Fix 7.1c Applied › End-to-End API Workflow - Fix 7.1c Applied › should handle error scenarios in E2E workflow with realistic error recovery

    TypeError: mockWorkflow.apiService.generateAnalysis is not a function

      506 |       };
      507 |
    > 508 |       const analysisErrorResponse = await mockWorkflow.apiService.generateAnalysis(invalidAnalysisData);
          |                                                                   ^
      509 |       expect(analysisErrorResponse.status).toBe(404);
      510 |       expect(analysisErrorResponse.data.success).toBe(false);
      511 |       expect(analysisErrorResponse.data.error.type).toBe('resource_not_found');

      at Object.generateAnalysis (src/__tests__/integration/productVsCompetitorApiIntegration.test.ts:508:67)

FAIL src/__tests__/integration/crossServiceValidation.test.ts
  ● Cross-Service Integration Tests › Phase 4.1: Integration Testing › should integrate analysis service with report service

    expect(received).toBeGreaterThan(expected)

    Expected: > 0
    Received:   0

      173 |         expect(reportResult).toBeDefined();
      174 |         expect(reportResult.report).toBeDefined();
    > 175 |         expect(reportResult.report.sections.length).toBeGreaterThan(0);
          |                                                     ^
      176 |         expect(reportResult.generationTime).toBeDefined();
      177 |
      178 |         logger.info('Analysis-Report integration test completed', {

      at toBeGreaterThan (src/__tests__/integration/crossServiceValidation.test.ts:175:53)
      at Object.<anonymous> (src/__tests__/integration/crossServiceValidation.test.ts:189:7)

  ● Cross-Service Integration Tests › Phase 4.1: Integration Testing › should validate UX analyzer integration with report service

    expect(received).toBeDefined()

    Received: undefined

      259 |         // Step 2: Verify UX analysis can be used in report generation
      260 |         // This validates that the UX analyzer output format is compatible with report service
    > 261 |         expect(uxAnalysis.metadata).toBeDefined();
          |                                     ^
      262 |         expect(uxAnalysis.metadata.correlationId).toBeDefined();
      263 |         expect(uxAnalysis.metadata.analyzedAt).toBeDefined();
      264 |

      at toBeDefined (src/__tests__/integration/crossServiceValidation.test.ts:261:37)
      at Object.<anonymous> (src/__tests__/integration/crossServiceValidation.test.ts:275:7)

  ● Cross-Service Integration Tests › Phase 4.1: Integration Testing › should validate data consistency across services

    expect(received).toBe(expected) // Object.is equality

    Expected: "Consistency Test Product"
    Received: undefined

      514 |
      515 |       // Verify report data consistency
    > 516 |       expect(reportResult.report.metadata.productName).toBe('Consistency Test Product');
          |                                                        ^
      517 |       expect(reportResult.report.metadata.competitorCount).toBe(1);
      518 |       expect(reportResult.report.metadata.analysisId).toBe(analysis.id);
      519 |

      at Object.toBe (src/__tests__/integration/crossServiceValidation.test.ts:516:56)

  ● Cross-Service Integration Tests › Phase 4.1: API Integration Testing › should validate service configuration and initialization

    expect(received).toBe(expected) // Object.is equality

    Expected: "ComparativeAnalysisService"
    Received: "Object"

      548 |     it('should validate service configuration and initialization', async () => {
      549 |       // Verify services are properly initialized (check constructor names since Jest mocks may interfere)
    > 550 |       expect(analysisService.constructor.name).toBe('ComparativeAnalysisService');
          |                                                ^
      551 |       expect(reportService.constructor.name).toBe('ComparativeReportService');
      552 |       expect(uxAnalyzer.constructor.name).toBe('UserExperienceAnalyzer');
      553 |       expect(autoReportService.constructor.name).toBe('AutoReportGenerationService');

      at Object.toBe (src/__tests__/integration/crossServiceValidation.test.ts:550:48)

FAIL src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts
  ● EnhancedProjectExtractor › Structured Input (Backward Compatible) › should extract basic project information from structured input

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      15 |       const result = enhancedProjectExtractor.extractProjectData(message);
      16 |
    > 17 |       expect(result.success).toBe(true);
         |                              ^
      18 |       expect(result.data).toEqual({
      19 |         userEmail: 'user@company.com',
      20 |         frequency: 'Weekly',

      at Object.toBe (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:17:30)

  ● EnhancedProjectExtractor › Structured Input (Backward Compatible) › should handle missing product website gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      39 |       const result = enhancedProjectExtractor.extractProjectData(message);
      40 |
    > 41 |       expect(result.success).toBe(true);
         |                              ^
      42 |       expect(result.data?.productWebsite).toBeUndefined();
      43 |       expect(result.suggestions).toContain('Consider including your product website URL for better analysis');
      44 |     });

      at Object.toBe (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:41:30)

  ● EnhancedProjectExtractor › Structured Input (Backward Compatible) › should fail with insufficient information

    expect(received).toContain(expected) // indexOf

    Expected value: "Project name too short or missing in third line"
    Received array: ["Failed to parse project information: this.extractFromLineByLineFormat is not a function"]

      53 |
      54 |       expect(result.success).toBe(false);
    > 55 |       expect(result.errors).toContain('Project name too short or missing in third line');
         |                             ^
      56 |     });
      57 |
      58 |     it('should validate email format', () => {

      at Object.toContain (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:55:29)

  ● EnhancedProjectExtractor › Structured Input (Backward Compatible) › should validate email format

    expect(received).toContain(expected) // indexOf

    Expected value: "Invalid email address format in first line"
    Received array: ["Failed to parse project information: this.extractFromLineByLineFormat is not a function"]

      66 |
      67 |       expect(result.success).toBe(false);
    > 68 |       expect(result.errors).toContain('Invalid email address format in first line');
         |                             ^
      69 |     });
      70 |
      71 |     it('should validate frequency format', () => {

      at Object.toContain (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:68:29)

  ● EnhancedProjectExtractor › Structured Input (Backward Compatible) › should validate frequency format

    expect(received).toContain(expected) // indexOf

    Expected value: "Invalid frequency in second line"
    Received array: ["Failed to parse project information: this.extractFromLineByLineFormat is not a function"]

      79 |
      80 |       expect(result.success).toBe(false);
    > 81 |       expect(result.errors).toContain('Invalid frequency in second line');
         |                             ^
      82 |     });
      83 |   });
      84 |

      at Object.toContain (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:81:29)

  ● EnhancedProjectExtractor › Unstructured Input (Intelligent Parsing) › should extract information from natural language input

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

       96 |       const result = enhancedProjectExtractor.extractProjectData(message);
       97 |
    >  98 |       expect(result.success).toBe(true);
          |                              ^
       99 |       expect(result.data?.userEmail).toBe('john@startup.com');
      100 |       expect(result.data?.frequency).toBe('weekly');
      101 |       expect(result.data?.projectName).toBe('Startup Competitive Analysis');

      at Object.toBe (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:98:30)

  ● EnhancedProjectExtractor › Unstructured Input (Intelligent Parsing) › should handle mixed format input

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      115 |       const result = enhancedProjectExtractor.extractProjectData(message);
      116 |
    > 117 |       expect(result.success).toBe(true);
          |                              ^
      118 |       expect(result.data?.userEmail).toBe('sarah@foodtech.com');
      119 |       expect(result.data?.frequency).toBe('monthly');
      120 |       expect(result.data?.projectName).toBe('Food Delivery Analysis');

      at Object.toBe (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:117:30)

  ● EnhancedProjectExtractor › Unstructured Input (Intelligent Parsing) › should fail gracefully with missing required information

    expect(received).toContain(expected) // indexOf

    Expected value: "Email address not found in message"
    Received array: ["Failed to parse project information: this.extractFromLineByLineFormat is not a function"]

      131 |
      132 |       expect(result.success).toBe(false);
    > 133 |       expect(result.errors).toContain('Email address not found in message');
          |                             ^
      134 |       expect(result.errors).toContain('Report frequency not specified');
      135 |       expect(result.errors).toContain('Project name not identified');
      136 |     });

      at Object.toContain (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:133:29)

  ● EnhancedProjectExtractor › URL Validation › should validate and clean URLs correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      157 |
      158 |         const result = enhancedProjectExtractor.extractProjectData(message);
    > 159 |         expect(result.success).toBe(true);
          |                                ^
      160 |         expect(result.data?.productWebsite).toBe(expected);
      161 |       });
      162 |     });

      at toBe (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:159:32)
          at Array.forEach (<anonymous>)
      at Object.forEach (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:150:17)

  ● EnhancedProjectExtractor › Error Messages › should return empty string for successful extractions

    expect(received).toBe(expected) // Object.is equality

    Expected: ""
    Received: "⚠️ **Missing Required Information**·
    **Issues Found:**
    1. Failed to parse project information: this.extractFromLineByLineFormat is not a function·
    **Please provide:**
    • Please provide your information in this format:
    • 1. Email address
    • 2. Report frequency (Weekly/Monthly)
    • 3. Project name
    • 4. Product website URL
    • 5. Product name (optional)
    • 6. Industry (optional)·
    **�� Tip:** You can provide information in any order or format. I'll extract what I need!"

      213 |       const errorMessage = enhancedProjectExtractor.createActionableErrorMessage(result);
      214 |
    > 215 |       expect(errorMessage).toBe('');
          |                            ^
      216 |     });
      217 |   });
      218 |

      at Object.toBe (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:215:28)

  ● EnhancedProjectExtractor › Product Name Extraction › should extract product name from project name patterns

    expect(received).toBe(expected) // Object.is equality

    Expected: "Good Chop"
    Received: undefined

      272 |
      273 |         const result = enhancedProjectExtractor.extractProjectData(message);
    > 274 |         expect(result.data?.productName).toBe(expected);
          |                                          ^
      275 |       });
      276 |     });
      277 |

      at toBe (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:274:42)
          at Array.forEach (<anonymous>)
      at Object.forEach (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:266:17)

  ● EnhancedProjectExtractor › Product Name Extraction › should prioritize explicit product declarations

    expect(received).toBe(expected) // Object.is equality

    Expected: "Specific Product Name"
    Received: undefined

      285 |
      286 |       const result = enhancedProjectExtractor.extractProjectData(message);
    > 287 |       expect(result.data?.productName).toBe('Specific Product Name');
          |                                        ^
      288 |     });
      289 |   });
      290 |

      at Object.toBe (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:287:40)

  ● EnhancedProjectExtractor › Industry Detection › should detect industry from various patterns

    expect(received).toBe(expected) // Object.is equality

    Expected: "Food Technology"
    Received: undefined

      306 |
      307 |         const result = enhancedProjectExtractor.extractProjectData(message);
    > 308 |         expect(result.data?.industry).toBe(expected);
          |                                       ^
      309 |       });
      310 |     });
      311 |   });

      at toBe (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:308:39)
          at Array.forEach (<anonymous>)
      at Object.forEach (src/__tests__/unit/lib/chat/enhancedProjectExtractor.test.ts:299:17)

FAIL src/services/reports/__tests__/initialComparativeReportService.partialData.test.ts
  ● InitialComparativeReportService - Partial Data Integration › generateInitialComparativeReport with low data completeness › should use partial data generator when data completeness < 70%

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: null, ObjectContaining {"name": "Test Product"}, ObjectContaining {"id": "snapshot-1"}, ObjectContaining {"acknowledgeDataLimitations": true, "includeDataGapSection": true, "includeRecommendations": true, "partialDataInfo": ObjectContaining {"dataCompletenessScore": 55, "dataFreshness": "existing", "qualityTier": "enhanced"}, "template": "comprehensive"}

    Number of calls: 0

      184 |
      185 |       // Verify partial data generator was used
    > 186 |       expect(mockPartialDataGenerator.generatePartialDataReport).toHaveBeenCalledWith(
          |                                                                  ^
      187 |         null, // Analysis should be null due to failed analysis
      188 |         expect.objectContaining({ name: 'Test Product' }),
      189 |         expect.objectContaining({ id: 'snapshot-1' }),

      at Object.toHaveBeenCalledWith (src/services/reports/__tests__/initialComparativeReportService.partialData.test.ts:186:66)

  ● InitialComparativeReportService - Partial Data Integration › generateInitialComparativeReport with low data completeness › should handle analysis failure gracefully in partial data mode

    Insufficient competitor data for analysis

      361 |       // Mock analysis failure
      362 |       mockComparativeAnalysisService.analyzeProductVsCompetitors.mockRejectedValue(
    > 363 |         new Error('Insufficient competitor data for analysis')
          |         ^
      364 |       );
      365 |       
      366 |       mockPartialDataGenerator.generatePartialDataReport.mockResolvedValue(mockPartialReport);

      at Object.<anonymous> (src/services/reports/__tests__/initialComparativeReportService.partialData.test.ts:363:9)

  ● InitialComparativeReportService - Partial Data Integration › generateInitialComparativeReport with low data completeness › should build correct partial data info from smart collection result

    expect(received).toEqual(expected) // deep equality

    - Expected  - 7
    + Received  + 4

    @@ -6,20 +6,17 @@
          "hasProductData": true,
          "hasSnapshots": true,
        },
        "dataCompletenessScore": 65,
        "dataFreshness": "mixed",
    -   "dataGaps": ArrayContaining [
    -     ObjectContaining {
    -       "area": "Competitor Website Snapshots",
    -       "canBeImproved": true,
    -       "impact": "high",
    -     },
    -     ObjectContaining {
    +   "dataGaps": Array [
    +     Object {
            "area": "Competitor Data Coverage",
            "canBeImproved": true,
    +       "description": "Only 3/4 competitors have sufficient data for analysis.",
            "impact": "medium",
    +       "recommendation": "Collect additional competitor information to improve analysis completeness",
          },
        ],
        "missingData": Array [
          "2 fresh competitor snapshots",
        ],

      405 |       const partialDataInfo = (service as any).buildPartialDataInfo(mockSmartCollectionResult);
      406 |
    > 407 |       expect(partialDataInfo).toEqual({
          |                               ^
      408 |         dataCompletenessScore: 65,
      409 |         dataFreshness: 'mixed',
      410 |         availableData: {

      at Object.toEqual (src/services/reports/__tests__/initialComparativeReportService.partialData.test.ts:407:31)

  ● InitialComparativeReportService - Partial Data Integration › buildPartialDataInfo › should build correct partial data info from smart collection result

    expect(received).toEqual(expected) // deep equality

    - Expected  - 7
    + Received  + 4

    @@ -6,20 +6,17 @@
          "hasProductData": true,
          "hasSnapshots": true,
        },
        "dataCompletenessScore": 65,
        "dataFreshness": "mixed",
    -   "dataGaps": ArrayContaining [
    -     ObjectContaining {
    -       "area": "Competitor Website Snapshots",
    -       "canBeImproved": true,
    -       "impact": "high",
    -     },
    -     ObjectContaining {
    +   "dataGaps": Array [
    +     Object {
            "area": "Competitor Data Coverage",
            "canBeImproved": true,
    +       "description": "Only 3/4 competitors have sufficient data for analysis.",
            "impact": "medium",
    +       "recommendation": "Collect additional competitor information to improve analysis completeness",
          },
        ],
        "missingData": Array [
          "2 fresh competitor snapshots",
        ],

      547 |       const partialDataInfo = (service as any).buildPartialDataInfo(mockSmartCollectionResult);
      548 |
    > 549 |       expect(partialDataInfo).toEqual({
          |                               ^
      550 |         dataCompletenessScore: 65,
      551 |         dataFreshness: 'mixed',
      552 |         availableData: {

      at Object.toEqual (src/services/reports/__tests__/initialComparativeReportService.partialData.test.ts:549:31)

  ● InitialComparativeReportService - Partial Data Integration › data gap identification scenarios › should identify no fresh snapshots gap

    TypeError: Cannot read properties of undefined (reading 'available')

      915 |       dataFreshness: smartCollectionResult.dataFreshness,
      916 |       availableData: {
    > 917 |         hasProductData: smartCollectionResult.productData.available,
          |                                                           ^
      918 |         hasCompetitorData: smartCollectionResult.competitorData.availableCompetitors > 0,
      919 |         hasSnapshots: smartCollectionResult.competitorData.freshSnapshots > 0,
      920 |         competitorCount: smartCollectionResult.competitorData.totalCompetitors,

      at InitialComparativeReportService.available [as buildPartialDataInfo] (src/services/reports/initialComparativeReportService.ts:917:59)
      at Object.buildPartialDataInfo (src/services/reports/__tests__/initialComparativeReportService.partialData.test.ts:743:48)

  ● InitialComparativeReportService - Partial Data Integration › data gap identification scenarios › should identify partial competitor coverage gap

    TypeError: Cannot read properties of undefined (reading 'available')

      915 |       dataFreshness: smartCollectionResult.dataFreshness,
      916 |       availableData: {
    > 917 |         hasProductData: smartCollectionResult.productData.available,
          |                                                           ^
      918 |         hasCompetitorData: smartCollectionResult.competitorData.availableCompetitors > 0,
      919 |         hasSnapshots: smartCollectionResult.competitorData.freshSnapshots > 0,
      920 |         competitorCount: smartCollectionResult.competitorData.totalCompetitors,

      at InitialComparativeReportService.available [as buildPartialDataInfo] (src/services/reports/initialComparativeReportService.ts:917:59)
      at Object.buildPartialDataInfo (src/services/reports/__tests__/initialComparativeReportService.partialData.test.ts:764:48)

  ● InitialComparativeReportService - Partial Data Integration › data gap identification scenarios › should identify overall data quality gap for very low scores

    TypeError: Cannot read properties of undefined (reading 'available')

      915 |       dataFreshness: smartCollectionResult.dataFreshness,
      916 |       availableData: {
    > 917 |         hasProductData: smartCollectionResult.productData.available,
          |                                                           ^
      918 |         hasCompetitorData: smartCollectionResult.competitorData.availableCompetitors > 0,
      919 |         hasSnapshots: smartCollectionResult.competitorData.freshSnapshots > 0,
      920 |         competitorCount: smartCollectionResult.competitorData.totalCompetitors,

      at InitialComparativeReportService.available [as buildPartialDataInfo] (src/services/reports/initialComparativeReportService.ts:917:59)
      at Object.buildPartialDataInfo (src/services/reports/__tests__/initialComparativeReportService.partialData.test.ts:785:48)

FAIL src/__tests__/integration/observabilityIntegration.test.ts
  ● Phase 5.4: Observability Integration Tests › Logging Standardization › should emit structured logs for immediate report generation

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Logging Standardization › should include correlation IDs across service calls

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Logging Standardization › should log security events appropriately

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Metrics Collection › should emit comprehensive metrics for report generation lifecycle

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Metrics Collection › should track snapshot capture metrics accurately

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Metrics Collection › should monitor queue and resource utilization

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Error Tracking Integration › should capture and contextualize report generation errors

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Error Tracking Integration › should track error patterns and recovery

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Performance Monitoring Integration › should track operation latencies and throughput

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Performance Monitoring Integration › should monitor resource utilization patterns

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Business Event Tracking › should track business metrics and user interactions

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Business Event Tracking › should track configuration and feature flag changes

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Alerting Integration › should trigger alerts for critical failures

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Alerting Integration › should track SLA violations and performance degradation

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › Dashboard Integration Validation › should provide all necessary metrics for dashboards

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

  ● Phase 5.4: Observability Integration Tests › End-to-End Observability Validation › should validate complete observability stack integration

    RangeError: Maximum call stack size exceeded
        at [Symbol.hasInstance] (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:277:22
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)


  ● Test suite failed to run

    RangeError: Maximum call stack size exceeded
        at Array.at (<anonymous>)

      712 |     jest.spyOn(logger, 'info').mockImplementation((message: string, metadata?: any) => {
      713 |       capturedLogs.push({ level: 'info', message, metadata });
    > 714 |       return originalLogger.call(logger, message, metadata);
          |                             ^
      715 |     });
      716 |
      717 |     const originalLoggerWarn = logger.warn;

      at ModuleMocker._ensureMockState (node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock/build/index.js:208:36)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)
      at Object.call (src/__tests__/integration/observabilityIntegration.test.ts:714:29)

FAIL src/__tests__/unit/featureFlagService.test.ts
  ● FeatureFlagService › Caching Behavior › should cache feature flag results

    expect(received).toBeLessThan(expected)

    Expected: < 0
    Received:   0

      324 |       
      325 |       expect(result1).toBe(result2);
    > 326 |       expect(duration2).toBeLessThan(duration1); // Cached should be faster
          |                         ^
      327 |       
      328 |       await service.cleanup();
      329 |     });

      at Object.toBeLessThan (src/__tests__/unit/featureFlagService.test.ts:326:25)

FAIL src/__tests__/unit/services/comparativeReportService.test.ts
  ● ComparativeReportService › generateComparativeReport › should generate comprehensive report with all sections

    expect(received).toContain(expected) // indexOf

    Expected substring: "Comprehensive"
    Received string:    "Test Product - Competitive Analysis"

      246 |       expect(result.report.id).toBeDefined();
      247 |       expect(result.report.title).toContain('Test Product');
    > 248 |       expect(result.report.title).toContain('Comprehensive');
          |                                   ^
      249 |       expect(result.report.projectId).toBe(sampleProduct.projectId);
      250 |       expect(result.report.productId).toBe(sampleProduct.id);
      251 |       expect(result.report.analysisId).toBe(sampleAnalysis.id);

      at Object.toContain (src/__tests__/unit/services/comparativeReportService.test.ts:248:35)

  ● ComparativeReportService › generateComparativeReport › should use default template when none specified

    expect(received).toBe(expected) // Object.is equality

    Expected: "markdown"
    Received: undefined

      353 |
      354 |       expect(result.report.sections).toHaveLength(6); // Default comprehensive template
    > 355 |       expect(result.report.format).toBe('markdown'); // Default format
          |                                    ^
      356 |     });
      357 |
      358 |     it('should throw error for invalid template', async () => {

      at Object.toBe (src/__tests__/unit/services/comparativeReportService.test.ts:355:36)

  ● ComparativeReportService › generateComparativeReport › should handle section generation errors gracefully

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {"cost": 0.0015, "errors": [], "generationTime": 1000, "report": {"analysisId": "mock-analysis-id", "competitiveIntelligence": {"competitiveAdvantages": ["AI-first approach"], "marketPosition": "competitive", "opportunities": ["Enterprise market"]}, "description": "Mock report description", "executiveSummary": "Mock executive summary", "format": undefined, "id": "mock-report-id", "keyFindings": ["Strength: Strong AI", "Weakness: High price", "Market Position: competitive", "Opportunity Score: 85/100"], "keyOpportunities": ["Mock opportunity 1"], "keyThreats": ["Mock threat 1"], "metadata": {"analysisMethod": "ai_powered", "competitorCount": 1, "confidenceScore": 92, "dataQuality": "high", "generatedAt": "2025-07-09T13:31:12.941Z", "productName": "Test Product", "template": "comprehensive", "version": "1.0"}, "productId": "mock-product-id", "projectId": "mock-project-id", "sections": [{"content": "Comprehensive executive summary of competitive analysis", "id": "executive-summary", "order": 1, "title": "Executive Summary", "type": "executive_summary"}, {"content": "Detailed feature comparison analysis", "id": "feature-comparison", "order": 2, "title": "Feature Analysis", "type": "feature_comparison"}, {"content": "Market positioning and competitive landscape analysis", "id": "positioning-analysis", "order": 3, "title": "Market Positioning", "type": "positioning_analysis"}, {"content": "User experience comparison analysis", "id": "ux-comparison", "order": 4, "title": "User Experience", "type": "ux_comparison"}, {"content": "Customer targeting analysis", "id": "customer-targeting", "order": 5, "title": "Customer Targeting", "type": "customer_targeting"}, {"content": "Actionable recommendations based on analysis", "id": "recommendations", "order": 6, "title": "Strategic Recommendations", "type": "recommendations"}], "status": "completed", "strategicRecommendations": {"immediate": ["Improve mobile"], "longTerm": ["Expand to new markets"], "priorityScore": 88, "shortTerm": ["Add enterprise features"]}, "title": "Test Product - Competitive Analysis"}, "tokensUsed": 500, "warnings": []}

      376 |       } as unknown as ComparativeAnalysis;
      377 |
    > 378 |       await expect(service.generateComparativeReport(
          |                   ^
      379 |         incompleteAnalysis,
      380 |         sampleProduct,
      381 |         sampleProductSnapshot

      at expect (node_modules/expect/build/index.js:113:15)
      at Object.<anonymous> (src/__tests__/unit/services/comparativeReportService.test.ts:378:19)

  ● ComparativeReportService › generateEnhancedReportContent › should generate enhanced content using AI

    TypeError: service.generateEnhancedReportContent is not a function

      403 |       mockBedrockService.generateCompletion.mockResolvedValue(mockEnhancedContent);
      404 |
    > 405 |       const result = await service.generateEnhancedReportContent(
          |                                    ^
      406 |         'test-analysis-id',
      407 |         REPORT_TEMPLATES.COMPREHENSIVE,
      408 |         {

      at Object.generateEnhancedReportContent (src/__tests__/unit/services/comparativeReportService.test.ts:405:36)

  ● ComparativeReportService › generateEnhancedReportContent › should handle AI service errors

    TypeError: service.generateEnhancedReportContent is not a function

      431 |       mockBedrockService.generateCompletion.mockRejectedValue(new Error('AI service unavailable'));
      432 |
    > 433 |       await expect(service.generateEnhancedReportContent(
          |                            ^
      434 |         'test-analysis-id',
      435 |         REPORT_TEMPLATES.COMPREHENSIVE
      436 |       )).rejects.toThrow(ReportGenerationError);

      at Object.generateEnhancedReportContent (src/__tests__/unit/services/comparativeReportService.test.ts:433:28)

  ● ComparativeReportService › getAvailableTemplates › should return all available templates

    expect(received).toBe(expected) // Object.is equality

    Expected: "Comprehensive Comparative Analysis"
    Received: "Comprehensive Analysis"

      453 |       const comprehensiveTemplate = templates.find(t => t.id === REPORT_TEMPLATES.COMPREHENSIVE);
      454 |       expect(comprehensiveTemplate).toBeDefined();
    > 455 |       expect(comprehensiveTemplate!.name).toBe('Comprehensive Comparative Analysis');
          |                                           ^
      456 |       expect(comprehensiveTemplate!.sectionTemplates).toHaveLength(6);
      457 |       expect(comprehensiveTemplate!.focusAreas).toEqual(['features', 'positioning', 'user_experience', 'customer_targeting']);
      458 |     });

      at Object.toBe (src/__tests__/unit/services/comparativeReportService.test.ts:455:43)

  ● ComparativeReportService › validateAnalysisForReporting › should throw error for missing detailed analysis

    expect(received).toThrow(expected)

    Expected substring: "Analysis missing required field for reporting: detailed"

    Received function did not throw

      481 |
      482 |       expect(() => service.validateAnalysisForReporting(incompleteAnalysis))
    > 483 |         .toThrow('Analysis missing required field for reporting: detailed');
          |          ^
      484 |     });
      485 |
      486 |     it('should throw error for missing recommendations', () => {

      at Object.toThrow (src/__tests__/unit/services/comparativeReportService.test.ts:483:10)

  ● ComparativeReportService › validateAnalysisForReporting › should throw error for missing recommendations

    expect(received).toThrow(expected)

    Expected substring: "Analysis missing required field for reporting: recommendations"

    Received function did not throw

      491 |
      492 |       expect(() => service.validateAnalysisForReporting(incompleteAnalysis))
    > 493 |         .toThrow('Analysis missing required field for reporting: recommendations');
          |          ^
      494 |     });
      495 |
      496 |     it('should throw error for missing metadata', () => {

      at Object.toThrow (src/__tests__/unit/services/comparativeReportService.test.ts:493:10)

  ● ComparativeReportService › validateAnalysisForReporting › should throw error for missing metadata

    expect(received).toThrow(expected)

    Expected substring: "Analysis missing required field for reporting: metadata"

    Received function did not throw

      501 |
      502 |       expect(() => service.validateAnalysisForReporting(incompleteAnalysis))
    > 503 |         .toThrow('Analysis missing required field for reporting: metadata');
          |          ^
      504 |     });
      505 |
      506 |     it('should warn for low confidence analysis but not throw', () => {

      at Object.toThrow (src/__tests__/unit/services/comparativeReportService.test.ts:503:10)

  ● ComparativeReportService › validateAnalysisForReporting › should warn for low confidence analysis but not throw

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Analysis confidence score is low for reporting", ObjectContaining {"analysisId": "test_analysis_123", "confidenceScore": 40}

    Number of calls: 0

      516 |
      517 |       expect(() => service.validateAnalysisForReporting(lowConfidenceAnalysis)).not.toThrow();
    > 518 |       expect(loggerSpy).toHaveBeenCalledWith(
          |                         ^
      519 |         'Analysis confidence score is low for reporting',
      520 |         expect.objectContaining({
      521 |           analysisId: sampleAnalysis.id,

      at Object.toHaveBeenCalledWith (src/__tests__/unit/services/comparativeReportService.test.ts:518:25)

  ● ComparativeReportService › template content generation › should populate template variables correctly

    expect(received).toContain(expected) // indexOf

    Expected substring: "Test Product"
    Received string:    "Comprehensive executive summary of competitive analysis"

      538 |
      539 |       const executiveSummary = result.report.sections.find(s => s.type === 'executive_summary');
    > 540 |       expect(executiveSummary?.content).toContain('Test Product');
          |                                         ^
      541 |       expect(executiveSummary?.content).toContain('competitive');
      542 |       expect(executiveSummary?.content).toContain('85');
      543 |       expect(executiveSummary?.content).toContain('low');

      at Object.toContain (src/__tests__/unit/services/comparativeReportService.test.ts:540:41)

  ● ComparativeReportService › report content structure › should include executive summary in keyFindings

    expect(received).toContain(expected) // indexOf

    Expected value: "Strength: Strong AI capabilities"
    Received array: ["Strength: Strong AI", "Weakness: High price", "Market Position: competitive", "Opportunity Score: 85/100"]

      585 |       );
      586 |
    > 587 |       expect(result.report.keyFindings).toContain('Strength: Strong AI capabilities');
          |                                         ^
      588 |       expect(result.report.keyFindings).toContain('Weakness: Limited market presence');
      589 |       expect(result.report.keyFindings).toContain('Market Position: competitive');
      590 |       expect(result.report.keyFindings).toContain('Opportunity Score: 85/100');

      at Object.toContain (src/__tests__/unit/services/comparativeReportService.test.ts:587:41)

  ● ComparativeReportService › report content structure › should extract key threats correctly

    expect(received).toContain(expected) // indexOf

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      598 |       );
      599 |
    > 600 |       expect(result.report.competitiveIntelligence.keyThreats).toContain('Overall threat level: low');
          |                                                                ^
      601 |       expect(result.report.competitiveIntelligence.keyThreats).toContain('Advanced API features');
      602 |       expect(result.report.competitiveIntelligence.keyThreats).toContain('Mobile optimization');
      603 |     });

      at Object.toContain (src/__tests__/unit/services/comparativeReportService.test.ts:600:64)

FAIL src/__tests__/unit/smartDataCollectionEdgeCases.test.ts
  ● SmartDataCollectionService Edge Cases › should handle empty competitor list gracefully

    TypeError: smartDataCollectionService.collectCompetitorData is not a function

      51 |     smartDataCollectionService = new SmartDataCollectionService();
      52 |     
    > 53 |     const result = await smartDataCollectionService.collectCompetitorData([], { projectId: 'project-123' });
         |                                                     ^
      54 |     
      55 |     expect(result).toBeDefined();
      56 |     expect(result.success).toBe(true);

      at Object.collectCompetitorData (src/__tests__/unit/smartDataCollectionEdgeCases.test.ts:53:53)

  ● SmartDataCollectionService Edge Cases › should handle web scraper initialization failure

    TypeError: smartDataCollectionService.collectCompetitorData is not a function

      75 |     
      76 |     // Should still complete with fallback data
    > 77 |     const result = await smartDataCollectionService.collectCompetitorData(competitors, { 
         |                                                     ^
      78 |       projectId: 'project-123',
      79 |       requireFreshSnapshots: true
      80 |     });

      at Object.collectCompetitorData (src/__tests__/unit/smartDataCollectionEdgeCases.test.ts:77:53)

  ● SmartDataCollectionService Edge Cases › should handle invalid competitor websites

    TypeError: smartDataCollectionService.collectCompetitorData is not a function

      104 |     
      105 |     // Should handle invalid URL
    > 106 |     const result = await smartDataCollectionService.collectCompetitorData(competitors, { 
          |                                                     ^
      107 |       projectId: 'project-123',
      108 |       requireFreshSnapshots: true
      109 |     });

      at Object.collectCompetitorData (src/__tests__/unit/smartDataCollectionEdgeCases.test.ts:106:53)

  ● SmartDataCollectionService Edge Cases › should handle timeouts during data collection

    TypeError: smartDataCollectionService.collectCompetitorData is not a function

      137 |     
      138 |     // Should timeout and fall back to existing data
    > 139 |     const result = await smartDataCollectionService.collectCompetitorData(competitors, { 
          |                                                     ^
      140 |       projectId: 'project-123',
      141 |       requireFreshSnapshots: true,
      142 |       maxCaptureTime: 500 // Very short timeout (500ms)

      at Object.collectCompetitorData (src/__tests__/unit/smartDataCollectionEdgeCases.test.ts:139:53)

  ● SmartDataCollectionService Edge Cases › should handle corrupted existing snapshot data

    TypeError: smartDataCollectionService.collectCompetitorData is not a function

      179 |     
      180 |     // Should handle corrupted data gracefully
    > 181 |     const result = await smartDataCollectionService.collectCompetitorData(competitors, { 
          |                                                     ^
      182 |       projectId: 'project-123',
      183 |       requireFreshSnapshots: false // Fall back to existing data
      184 |     });

      at Object.collectCompetitorData (src/__tests__/unit/smartDataCollectionEdgeCases.test.ts:181:53)

  ● SmartDataCollectionService Edge Cases › should handle database failures during collection

    TypeError: Cannot read properties of undefined (reading 'create')

      210 |     
      211 |     // Database failure
    > 212 |     (prisma.competitorSnapshot.create as jest.Mock).mockRejectedValue(
          |                                ^
      213 |       new Error('Database error')
      214 |     );
      215 |     

      at Object.create (src/__tests__/unit/smartDataCollectionEdgeCases.test.ts:212:32)

  ● SmartDataCollectionService Edge Cases › should handle priority fallbacks properly

    TypeError: smartDataCollectionService.collectCompetitorData is not a function

      256 |     
      257 |     // Should fall back to existing snapshots (Priority 4)
    > 258 |     const result = await smartDataCollectionService.collectCompetitorData(competitors, { 
          |                                                     ^
      259 |       projectId: 'project-123',
      260 |       requireFreshSnapshots: true // Try fresh first, but allow fallback
      261 |     });

      at Object.collectCompetitorData (src/__tests__/unit/smartDataCollectionEdgeCases.test.ts:258:53)

FAIL src/__tests__/unit/initialComparativeReportEdgeCases.test.ts
  ● InitialComparativeReportService Edge Cases › should handle missing project data gracefully

    TypeError: initialComparativeReportService.generateInitialReport is not a function

      56 |     
      57 |     // Act
    > 58 |     const result = await initialComparativeReportService.generateInitialReport('non-existent-id');
         |                                                          ^
      59 |     
      60 |     // Assert
      61 |     expect(result).toBeDefined();

      at Object.generateInitialReport (src/__tests__/unit/initialComparativeReportEdgeCases.test.ts:58:58)

  ● InitialComparativeReportService Edge Cases › should handle project with no competitors

    TypeError: initialComparativeReportService.generateInitialReport is not a function

      81 |     
      82 |     // Act
    > 83 |     const result = await initialComparativeReportService.generateInitialReport('project-123');
         |                                                          ^
      84 |     
      85 |     // Assert
      86 |     expect(result).toBeDefined();

      at Object.generateInitialReport (src/__tests__/unit/initialComparativeReportEdgeCases.test.ts:83:58)

  ● InitialComparativeReportService Edge Cases › should handle project with missing product data

    TypeError: initialComparativeReportService.generateInitialReport is not a function

      104 |     
      105 |     // Act
    > 106 |     const result = await initialComparativeReportService.generateInitialReport('project-123');
          |                                                          ^
      107 |     
      108 |     // Assert
      109 |     expect(result).toBeDefined();

      at Object.generateInitialReport (src/__tests__/unit/initialComparativeReportEdgeCases.test.ts:106:58)

  ● InitialComparativeReportService Edge Cases › should handle competitors with no snapshots

    TypeError: Cannot read properties of undefined (reading 'findMany')

      126 |     });
      127 |     
    > 128 |     (prisma.competitorSnapshot.findMany as jest.Mock).mockResolvedValue([]);
          |                                ^
      129 |     
      130 |     const { InitialComparativeReportService } = await import('@/services/reports/initialComparativeReportService');
      131 |     initialComparativeReportService = new InitialComparativeReportService();

      at Object.findMany (src/__tests__/unit/initialComparativeReportEdgeCases.test.ts:128:32)

  ● InitialComparativeReportService Edge Cases › should handle database connection failures during competitor snapshot capture

    TypeError: Cannot read properties of undefined (reading 'create')

      157 |     
      158 |     // Mock database connection failure
    > 159 |     (prisma.competitorSnapshot.create as jest.Mock).mockRejectedValue(
          |                                ^
      160 |       new Error('Database connection error')
      161 |     );
      162 |     

      at Object.create (src/__tests__/unit/initialComparativeReportEdgeCases.test.ts:159:32)

  ● InitialComparativeReportService Edge Cases › should handle malformed data from competitors

    TypeError: initialComparativeReportService.generateInitialReport is not a function

      202 |     
      203 |     // Act - Force partial data handling
    > 204 |     const result = await initialComparativeReportService.generateInitialReport('project-123', {
          |                                                          ^
      205 |       fallbackToPartialData: true
      206 |     });
      207 |     

      at Object.generateInitialReport (src/__tests__/unit/initialComparativeReportEdgeCases.test.ts:204:58)

  ● InitialComparativeReportService Edge Cases › should handle timeouts during report generation

    TypeError: Cannot read properties of undefined (reading 'findFirst')

      237 |     });
      238 |     
    > 239 |     (prisma.productSnapshot.findFirst as jest.Mock).mockResolvedValue({
          |                             ^
      240 |       id: 'prod-snap-1',
      241 |       productId: 'product-123',
      242 |       metadata: { data: 'test' },

      at Object.findFirst (src/__tests__/unit/initialComparativeReportEdgeCases.test.ts:239:29)

FAIL src/services/__tests__/rateLimitingService.test.ts
  ● RateLimitingService › Rate Limiting Decisions › should enforce daily cost limits

    expect(received).toContain(expected) // indexOf

    Expected substring: "Daily cost limit would be exceeded"
    Received string:    "Hourly cost limit would be exceeded ($12.00 > $2)"

      147 |       
      148 |       expect(decision.allowed).toBe(false);
    > 149 |       expect(decision.reason).toContain('Daily cost limit would be exceeded');
          |                               ^
      150 |       expect(decision.fallbackSuggested).toContain('tomorrow');
      151 |     });
      152 |

      at Object.toContain (src/services/__tests__/rateLimitingService.test.ts:149:31)

  ● RateLimitingService › Rate Limiting Decisions › should enforce domain throttling

    expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: true

      158 |       // Immediate second request to same domain should be throttled
      159 |       const decision2 = await rateLimitingService.checkRateLimit(mockContext);
    > 160 |       expect(decision2.allowed).toBe(false);
          |                                 ^
      161 |       expect(decision2.reason).toContain('throttled');
      162 |       expect(decision2.waitTimeMs).toBeGreaterThan(0);
      163 |     });

      at Object.toBe (src/services/__tests__/rateLimitingService.test.ts:160:33)

  ● RateLimitingService › Rate Limiting Decisions › should provide meaningful fallback suggestions

    expect(received).toBeDefined()

    Received: undefined

      181 |       const decision = await rateLimitingService.checkRateLimit(throttledContext);
      182 |       
    > 183 |       expect(decision.fallbackSuggested).toBeDefined();
          |                                          ^
      184 |       expect(decision.fallbackSuggested).toContain('cached');
      185 |     });
      186 |   });

      at Object.toBeDefined (src/services/__tests__/rateLimitingService.test.ts:183:42)

  ● RateLimitingService › Rate Limit Execution › should track concurrent requests correctly

    expect(received).toBeGreaterThan(expected)

    Expected: > 0
    Received:   0

      249 |       // Check metrics during execution
      250 |       const metrics = rateLimitingService.getRateLimitingMetrics();
    > 251 |       expect(metrics.currentConcurrentRequests).toBeGreaterThan(0);
          |                                                 ^
      252 |       
      253 |       await Promise.all([promise1, promise2]);
      254 |       

      at Object.toBeGreaterThan (src/services/__tests__/rateLimitingService.test.ts:251:49)

  ● RateLimitingService › Performance and Load Testing › should enforce global concurrency limits under load

    TypeError: Cannot use 'in' operator to search for 'error' in success

      473 |       
      474 |       // Some should succeed, some should be rate limited
    > 475 |       const successes = results.filter(r => !('error' in r)).length;
          |                                               ^
      476 |       const rateLimited = results.filter(r => 
      477 |         'error' in r && r.error.includes('Rate limit exceeded')
      478 |       ).length;

      at src/services/__tests__/rateLimitingService.test.ts:475:47
          at Array.filter (<anonymous>)
      at Object.filter (src/services/__tests__/rateLimitingService.test.ts:475:33)

  ● RateLimitingService › Background Tasks and Maintenance › should initialize without errors

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Rate limiting service initialized", Any<Object>

    Number of calls: 0

      522 |     it('should initialize without errors', () => {
      523 |       expect(rateLimitingService).toBeDefined();
    > 524 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      525 |         'Rate limiting service initialized',
      526 |         expect.any(Object)
      527 |       );

      at Object.toHaveBeenCalledWith (src/services/__tests__/rateLimitingService.test.ts:524:27)

  ● RateLimitingService › Background Tasks and Maintenance › should provide meaningful recommended actions when issues detected

    expect(received).toBeGreaterThan(expected)

    Expected: > 0
    Received:   0

      533 |       
      534 |       const metrics = rateLimitingService.getRateLimitingMetrics();
    > 535 |       expect(metrics.recommendedActions.length).toBeGreaterThan(0);
          |                                                 ^
      536 |       expect(metrics.recommendedActions[0]).toContain('Circuit breaker');
      537 |     });
      538 |   });

      at Object.toBeGreaterThan (src/services/__tests__/rateLimitingService.test.ts:535:49)

FAIL src/services/reports/__tests__/reportQualityService.test.ts
  ● ReportQualityService › assessReportQuality › should handle missing competitor data

    expect(received).toMatch(expected)

    Expected pattern: /^(poor|critical)$/
    Received string:  "fair"

      234 |
      235 |       expect(assessment.qualityScore.dataCompleteness).toBeLessThan(50);
    > 236 |       expect(assessment.qualityTier).toMatch(/^(poor|critical)$/);
          |                                      ^
      237 |     });
      238 |
      239 |     it('should calculate data freshness correctly', async () => {

      at Object.toMatch (src/services/reports/__tests__/reportQualityService.test.ts:236:38)

  ● ReportQualityService › assessReportQuality › should calculate data freshness correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      261 |         rec => rec.category === 'freshness'
      262 |       );
    > 263 |       expect(hasFreshnessRec).toBe(true);
          |                               ^
      264 |     });
      265 |
      266 |     it('should generate section-specific confidence indicators', async () => {

      at Object.toBe (src/services/reports/__tests__/reportQualityService.test.ts:263:31)

  ● ReportQualityService › assessReportQuality › should calculate improvement potential correctly

    expect(received).toBeGreaterThanOrEqual(expected)

    Expected: >= 91
    Received:    81

      339 |
      340 |       expect(assessment.improvement.possibleScore).toBeGreaterThanOrEqual(assessment.qualityScore.overall);
    > 341 |       expect(assessment.improvement.potentialScore).toBeGreaterThanOrEqual(assessment.improvement.possibleScore);
          |                                                     ^
      342 |       expect(assessment.improvement.potentialScore).toBeLessThanOrEqual(100);
      343 |       
      344 |       // Quick wins should be immediate, free improvements

      at Object.toBeGreaterThanOrEqual (src/services/reports/__tests__/reportQualityService.test.ts:341:53)

  ● ReportQualityService › quality tier determination › should assign critical tier for very low scores

    expect(received).toBe(expected) // Object.is equality

    Expected: "critical"
    Received: "poor"

      445 |
      446 |       expect(assessment.qualityScore.overall).toBeLessThan(40);
    > 447 |       expect(assessment.qualityTier).toBe('critical');
          |                                      ^
      448 |     });
      449 |   });
      450 |

      at Object.toBe (src/services/reports/__tests__/reportQualityService.test.ts:447:38)

  ● ReportQualityService › recommendation generation › should generate section-specific recommendations

    expect(received).toBeGreaterThan(expected)

    Expected: > 0
    Received:   0

      560 |         rec => rec.category === 'coverage'
      561 |       );
    > 562 |       expect(coverageRecs.length).toBeGreaterThan(0);
          |                                   ^
      563 |     });
      564 |   });
      565 |

      at Object.toBeGreaterThan (src/services/reports/__tests__/reportQualityService.test.ts:562:35)

  ● ReportQualityService › edge cases and error handling › should handle reports with no sections

    expect(received).toBeLessThan(expected)

    Expected: < 50
    Received:   77

      579 |       );
      580 |
    > 581 |       expect(assessment.qualityScore.overall).toBeLessThan(50);
          |                                               ^
      582 |       expect(assessment.qualityTier).toMatch(/^(poor|critical)$/);
      583 |     });
      584 |

      at Object.toBeLessThan (src/services/reports/__tests__/reportQualityService.test.ts:581:47)

  ● ReportQualityService › edge cases and error handling › should handle missing product information gracefully

    expect(received).toBeLessThan(expected)

    Expected: < 80
    Received:   92

      598 |       );
      599 |
    > 600 |       expect(assessment.qualityScore.dataCompleteness).toBeLessThan(80);
          |                                                        ^
      601 |     });
      602 |
      603 |     it('should handle undefined competitor data', async () => {

      at Object.toBeLessThan (src/services/reports/__tests__/reportQualityService.test.ts:600:56)

  ● ReportQualityService › edge cases and error handling › should handle very old reports correctly

    expect(received).toBeLessThan(expected)

    Expected: < 30
    Received:   63

      631 |       );
      632 |
    > 633 |       expect(assessment.qualityScore.dataFreshness).toBeLessThan(30);
          |                                                     ^
      634 |     });
      635 |   });
      636 |

      at Object.toBeLessThan (src/services/reports/__tests__/reportQualityService.test.ts:633:53)

FAIL src/__tests__/unit/analysis.test.ts
  ● ContentAnalyzer › Constructor › should initialize with AWS Bedrock client

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
        "credentials": Object {
          "accessKeyId": "test-key",
          "secretAccessKey": "test-secret",
    +     "sessionToken": "IQoJb3JpZ2luX2VjEJ7//////////wEaCWV1LXdlc3QtMSJIMEYCIQDDNe8XjbFGTal/GL/1PiiCN/hrz83l7oI19Usa3uO7bwIhAP27vXiNm2P5baEA7s7/D26APJnU+6qRifkuVUs1/tKXKtsDCKf//////////wEQABoMOTUxNzE5MTc1NTA2IgzHGXSYTOHYBUMy514qrwO6u3paXUto257PGyIsjIje2Ug+KunWzDm5o1KIlWKiWjVqss184hnQkqHhRKTvCPN72Tp8SyWo5q0Wt+BcV2ZJZa6LARkRVJtXRCjLyVOA4cXlGaI5YuCH+jmeRaCArjY9nYzJw676CIM8lMjYbDnE1Zz5lOG72XMM6DwupkaIVcyzNKGbi1p76xeFBRjazOr+Z1q1vPT1H18VoPHG6vh+5LHcEcXrH5rvzkxjBCwnvuRvjw51B0Ue76BuDyiMG0zWAP9b3iSk9RzvV3iWCRgZDqjrvdpJFHtHQGrfiiYuI6OtzdbbzPe1SQJDKptIsbFQo5UxDZKcr7y3RWqXRlteYa9E7zr14akSdOEKqysfUQYi/hzInijSQsrt+zLQqXI0ut3i+CtC12pzZQvrCTIKxxrFxlijxtXdUn0Q2SA5WiweL1Gl1KP+STt0VYq3sOHdKx1qzOPsgDC40z3FSYudDE3ySNa3dyntX7cwd6Gi+MeNLwQejCrj8/2UmnWL8mrSspXD2jImtx/VCHMmoDmz9H4s/09yC/PXq96dqoQaQFWJDrVh7TYJ67Xx9uvdbjC33LnDBjqlATUDqD2LbTPR5ik+4GVZByhYkiwshzfB1fV0QuKmprZ2aJknYfqjmRKyazl2hkoid36CtYiyUoV3WbFLBXKvZy5N5gY6vX7jCuEv4w6ndVsgwiL2Lj4ZoxTeF12TW0isnvv60YNSj/CLyNWXrdTvODoaYaT7bYHKzssovMLcSzlf+7YWz5m2cWEcorC4XQhvW02Z/PwvKcJ5fJmVR+Iim0v8nMzYWA==",
        },
        "region": "us-east-1",
      },

    Number of calls: 1

      41 |   describe('Constructor', () => {
      42 |     it('should initialize with AWS Bedrock client', () => {
    > 43 |       expect(BedrockRuntimeClient).toHaveBeenCalledWith({
         |                                    ^
      44 |         region: 'us-east-1',
      45 |         credentials: {
      46 |           accessKeyId: 'test-key',

      at Object.toHaveBeenCalledWith (src/__tests__/unit/analysis.test.ts:43:36)

FAIL src/__tests__/integration/awsCredentialIntegration.test.ts
  ● AWS Credential Integration › Bedrock Service Integration › should create Bedrock service with environment fallback

    expect(received).toBe(expected) // Object.is equality

    Expected: 0
    Received: 1

      247 |       // Ensure no stored credentials
      248 |       const profiles = await awsCredentialService.listCredentialProfiles();
    > 249 |       expect(profiles.length).toBe(0);
          |                               ^
      250 |
      251 |       // Set environment variables
      252 |       process.env.AWS_ACCESS_KEY_ID = 'env-access-key';

      at Object.toBe (src/__tests__/integration/awsCredentialIntegration.test.ts:249:31)

  ● AWS Credential Integration › Bedrock Service Integration › should create Bedrock service factory method with stored credentials

    TypeError: _bedrockservice.BedrockService.createWithStoredCredentials is not a function

      271 |
      272 |       // This should work without throwing
    > 273 |       const service = await BedrockService.createWithStoredCredentials('anthropic');
          |                                            ^
      274 |       expect(service).toBeInstanceOf(BedrockService);
      275 |     });
      276 |   });

      at Object.createWithStoredCredentials (src/__tests__/integration/awsCredentialIntegration.test.ts:273:44)

  ● AWS Credential Integration › Analysis Service Integration › should initialize ComparativeAnalysisService with stored credentials

    expect(received).toBeInstanceOf(expected)

    Expected constructor: mockConstructor
    Received constructor: Object

      285 |       
      286 |       // This tests that the service can be created without throwing
    > 287 |       expect(analysisService).toBeInstanceOf(ComparativeAnalysisService);
          |                               ^
      288 |
      289 |       // Test configuration update (should trigger credential refresh)
      290 |       analysisService.updateAnalysisConfiguration({

      at Object.toBeInstanceOf (src/__tests__/integration/awsCredentialIntegration.test.ts:287:31)

  ● AWS Credential Integration › Multiple Profile Support › should handle multiple credential profiles

    expect(received).toBe(expected) // Object.is equality

    Expected: 2
    Received: 1

      314 |       // List profiles
      315 |       const profiles = await awsCredentialService.listCredentialProfiles();
    > 316 |       expect(profiles.length).toBe(2);
          |                               ^
      317 |
      318 |       // Get credentials with preferred profile
      319 |       const credentials1 = await credentialProvider.getCredentials({

      at Object.toBe (src/__tests__/integration/awsCredentialIntegration.test.ts:316:31)

  ● AWS Credential Integration › Multiple Profile Support › should use first valid profile when no preference specified

    expect(received).toMatchObject(expected)

    - Expected  - 2
    + Received  + 2

      Object {
    -   "accessKeyId": "AKIAVTS3RX71M47",
    -   "secretAccessKey": "test-secret-2-04ofa6314u9x",
    +   "accessKeyId": "AKIALQ3DFE4QT1",
    +   "secretAccessKey": "test-secret-zq0rgds7e57",
      }

      364 |       // Should use the valid profile
      365 |       const credentials = await credentialProvider.getCredentials();
    > 366 |       expect(credentials).toMatchObject({
          |                           ^
      367 |         accessKeyId: secondTestCredentials.accessKeyId,
      368 |         secretAccessKey: secondTestCredentials.secretAccessKey
      369 |       });

      at Object.toMatchObject (src/__tests__/integration/awsCredentialIntegration.test.ts:366:27)

FAIL src/__tests__/unit/intelligentCachingErrorScenarios.test.ts
  ● IntelligentCachingService Error Scenarios › should handle Redis connection failures gracefully

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      68 |     
      69 |     // Should log warning but not crash
    > 70 |     expect(logger.warn).toHaveBeenCalled();
         |                         ^
      71 |     
      72 |     // Try to retrieve data (should fallback to database)
      73 |     (prisma.competitor.findUnique as jest.Mock).mockResolvedValue({

      at Object.toHaveBeenCalled (src/__tests__/unit/intelligentCachingErrorScenarios.test.ts:70:25)

  ● IntelligentCachingService Error Scenarios › should handle database failures with graceful degradation

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      100 |     // Should return null instead of crashing
      101 |     expect(result).toBeNull();
    > 102 |     expect(logger.error).toHaveBeenCalled();
          |                          ^
      103 |   });
      104 |   
      105 |   it('should handle corrupted cache data gracefully', async () => {

      at Object.toHaveBeenCalled (src/__tests__/unit/intelligentCachingErrorScenarios.test.ts:102:26)

  ● IntelligentCachingService Error Scenarios › should handle corrupted cache data gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: "comp-1"
    Received: undefined

      133 |     // Assert - Should get data from database fallback
      134 |     expect(result).toBeDefined();
    > 135 |     expect(result?.id).toBe('comp-1');
          |                        ^
      136 |     expect(logger.warn).toHaveBeenCalledWith(
      137 |       expect.stringContaining('corrupted'),
      138 |       expect.any(Error),

      at Object.toBe (src/__tests__/unit/intelligentCachingErrorScenarios.test.ts:135:24)

  ● IntelligentCachingService Error Scenarios › should handle consecutive cache failures with circuit breaker

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "circuit breaker", Any<Object>

    Number of calls: 0

      172 |     
      173 |     // Assert - Should skip caching due to circuit breaker
    > 174 |     expect(logger.info).toHaveBeenCalledWith(
          |                         ^
      175 |       expect.stringContaining('circuit breaker'),
      176 |       expect.any(Object)
      177 |     );

      at Object.toHaveBeenCalledWith (src/__tests__/unit/intelligentCachingErrorScenarios.test.ts:174:25)

  ● IntelligentCachingService Error Scenarios › should handle cache eviction errors gracefully

    TypeError: intelligentCachingService.invalidateCompetitorCache is not a function

      192 |     
      193 |     // Act - Try to clear cache for specific competitor
    > 194 |     await intelligentCachingService.invalidateCompetitorCache('comp-1');
          |                                     ^
      195 |     
      196 |     // Assert - Should log error but not crash
      197 |     expect(logger.error).toHaveBeenCalled();

      at Object.invalidateCompetitorCache (src/__tests__/unit/intelligentCachingErrorScenarios.test.ts:194:37)

FAIL src/__tests__/unit/services/bedrock/bedrockService.test.ts
  ● BedrockService › constructor › should create service with default configuration

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"region": Any<String>}
    Received: called with 0 arguments

    Number of calls: 1

      78 |       const service = new BedrockService();
      79 |
    > 80 |       expect(BedrockRuntimeClient).toHaveBeenCalledWith(
         |                                    ^
      81 |         expect.objectContaining({
      82 |           region: expect.any(String)
      83 |         })

      at Object.toHaveBeenCalledWith (src/__tests__/unit/services/bedrock/bedrockService.test.ts:80:36)

  ● BedrockService › constructor › should create service with custom configuration

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"region": "us-west-2"}
    Received: called with 0 arguments

    Number of calls: 1

      94 |       const service = new BedrockService(customConfig);
      95 |
    > 96 |       expect(BedrockRuntimeClient).toHaveBeenCalledWith(
         |                                    ^
      97 |         expect.objectContaining({
      98 |           region: 'us-west-2'
      99 |         })

      at Object.toHaveBeenCalledWith (src/__tests__/unit/services/bedrock/bedrockService.test.ts:96:36)

  ● BedrockService › constructor › should create service with credentials when provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"region": "us-east-1"}
    Received: called with 0 arguments

    Number of calls: 1

      113 |       const service = new BedrockService(configWithCredentials);
      114 |
    > 115 |       expect(BedrockRuntimeClient).toHaveBeenCalledWith(
          |                                    ^
      116 |         expect.objectContaining({
      117 |           region: 'us-east-1'
      118 |         })

      at Object.toHaveBeenCalledWith (src/__tests__/unit/services/bedrock/bedrockService.test.ts:115:36)

  ● BedrockService › constructor › should create service without credentials when not provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"region": "us-east-1"}
    Received: called with 0 arguments

    Number of calls: 1

      127 |       const service = new BedrockService(configWithoutCredentials);
      128 |
    > 129 |       expect(BedrockRuntimeClient).toHaveBeenCalledWith(
          |                                    ^
      130 |         expect.objectContaining({
      131 |           region: 'us-east-1'
      132 |         })

      at Object.toHaveBeenCalledWith (src/__tests__/unit/services/bedrock/bedrockService.test.ts:129:36)

  ● BedrockService › constructor › should create service for Mistral provider

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"region": Any<String>}
    Received: called with 0 arguments

    Number of calls: 1

      137 |       const service = new BedrockService({}, 'mistral');
      138 |
    > 139 |       expect(BedrockRuntimeClient).toHaveBeenCalledWith(
          |                                    ^
      140 |         expect.objectContaining({
      141 |           region: expect.any(String)
      142 |         })

      at Object.toHaveBeenCalledWith (src/__tests__/unit/services/bedrock/bedrockService.test.ts:139:36)

FAIL src/services/reports/__tests__/initialComparativeReportService.test.ts
  ● InitialComparativeReportService › Method Signatures › generateInitialComparativeReport should have correct signature

    expect(received).toBe(expected) // Object.is equality

    Expected: 2
    Received: 1

      107 |       const method = service.generateInitialComparativeReport;
      108 |       expect(method).toBeDefined();
    > 109 |       expect(method.length).toBe(2); // projectId and options parameters
          |                             ^
      110 |     });
      111 |
      112 |     it('validateProjectReadiness should have correct signature', () => {

      at Object.toBe (src/services/reports/__tests__/initialComparativeReportService.test.ts:109:29)

FAIL src/services/__tests__/configurationManagementService.test.ts
  ● ConfigurationManagementService › Configuration Updates › should successfully update valid configuration

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      113 |       });
      114 |
    > 115 |       expect(result.success).toBe(true);
          |                              ^
      116 |       expect(result.updatedFields).toEqual(['SNAPSHOT_CAPTURE_TIMEOUT', 'MAX_CONCURRENT_SNAPSHOTS_PER_PROJECT']);
      117 |       expect(result.rollbackInfo).toBeDefined();
      118 |       expect(result.updatedBy).toBe('test-user');

      at Object.toBe (src/services/__tests__/configurationManagementService.test.ts:115:30)

  ● ConfigurationManagementService › Configuration Updates › should create audit log entries for updates

    expect(received).toBeGreaterThan(expected)

    Expected: > 0
    Received:   0

      170 |
      171 |       const auditLog = configService.getAuditLog(10);
    > 172 |       expect(auditLog.length).toBeGreaterThan(0);
          |                               ^
      173 |
      174 |       const latestEntry = auditLog[0];
      175 |       expect(latestEntry.action).toBe('update');

      at Object.toBeGreaterThan (src/services/__tests__/configurationManagementService.test.ts:172:31)

  ● ConfigurationManagementService › Audit Log › should maintain audit log of all changes

    expect(received).toBe(expected) // Object.is equality

    Expected: 2
    Received: 0

      291 |
      292 |       const auditLog = configService.getAuditLog(10);
    > 293 |       expect(auditLog.length).toBe(2);
          |                               ^
      294 |
      295 |       // Should be sorted by timestamp (newest first)
      296 |       expect(auditLog[0].updatedBy).toBe('user2');

      at Object.toBe (src/services/__tests__/configurationManagementService.test.ts:293:31)

  ● ConfigurationManagementService › Audit Log › should respect audit log limit

    expect(received).toBe(expected) // Object.is equality

    Expected: 3
    Received: 0

      309 |
      310 |       const limitedLog = configService.getAuditLog(3);
    > 311 |       expect(limitedLog.length).toBe(3);
          |                                 ^
      312 |     });
      313 |   });
      314 |

      at Object.toBe (src/services/__tests__/configurationManagementService.test.ts:311:33)

  ● ConfigurationManagementService › Rollback Functionality › should provide rollback tokens for updates

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      325 |       });
      326 |
    > 327 |       expect(result.success).toBe(true);
          |                              ^
      328 |       expect(result.rollbackInfo).toBeDefined();
      329 |       expect(result.rollbackInfo!.rollbackToken).toBeDefined();
      330 |       expect(result.rollbackInfo!.previousValues).toEqual({

      at Object.toBe (src/services/__tests__/configurationManagementService.test.ts:327:30)

  ● ConfigurationManagementService › Error Handling › should handle missing configuration fields gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      384 |       });
      385 |
    > 386 |       expect(result.success).toBe(true);
          |                              ^
      387 |       expect(result.updatedFields).toEqual([]); // No valid fields updated
      388 |     });
      389 |

      at Object.toBe (src/services/__tests__/configurationManagementService.test.ts:386:30)

  ● ConfigurationManagementService › Error Handling › should handle internal errors gracefully

    expect(received).toContain(expected) // indexOf

    Expected substring: "Internal error"
    Received string:    "HOURLY_SNAPSHOT_LIMIT: Hourly limit should not exceed daily limit when extrapolated"

      399 |       expect(result.success).toBe(false);
      400 |       expect(result.validationErrors).toBeDefined();
    > 401 |       expect(result.validationErrors![0]).toContain('Internal error');
          |                                           ^
      402 |     });
      403 |   });
      404 | }); 

      at Object.toContain (src/services/__tests__/configurationManagementService.test.ts:401:43)

FAIL src/__tests__/performance/cachingStrategy.test.ts
  ● Redis Cache Implementation › should initialize Redis client successfully

    expect(received).toHaveBeenCalled()

    Matcher error: received value must be a mock or spy function

    Received has type:  function
    Received has value: [Function initializeRedisClient]

      104 |   test('should initialize Redis client successfully', async () => {
      105 |     await initializeRedisClient();
    > 106 |     expect(initializeRedisClient).toHaveBeenCalled();
          |                                   ^
      107 |   });
      108 |
      109 |   test('should use withRedisCache correctly', async () => {

      at Object.toHaveBeenCalled (src/__tests__/performance/cachingStrategy.test.ts:106:35)

  ● Redis Cache Integration with API Endpoints › should cache competitor list results

    TypeError: _rediscache.withRedisCache.mockImplementation is not a function

      139 |     
      140 |     // Reset withRedisCache mock for each test
    > 141 |     (withRedisCache as jest.Mock).mockImplementation(async (fn, keyPrefix, params) => {
          |                                   ^
      142 |       return fn(params);
      143 |     });
      144 |   });

      at Object.mockImplementation (src/__tests__/performance/cachingStrategy.test.ts:141:35)

  ● Redis Cache Integration with API Endpoints › should handle search parameters

    TypeError: _rediscache.withRedisCache.mockImplementation is not a function

      139 |     
      140 |     // Reset withRedisCache mock for each test
    > 141 |     (withRedisCache as jest.Mock).mockImplementation(async (fn, keyPrefix, params) => {
          |                                   ^
      142 |       return fn(params);
      143 |     });
      144 |   });

      at Object.mockImplementation (src/__tests__/performance/cachingStrategy.test.ts:141:35)

FAIL src/services/reports/__tests__/smartDataCollectionIntegration.test.ts
  ● Smart Data Collection Integration - Phase 2.1 › Smart Data Collection Priority System › should use SmartDataCollectionService instead of basic capture methods

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      165 |         // Expected since we haven't mocked all the dependencies fully
      166 |         // The important thing is that smart data collection was called
    > 167 |         expect(collectProjectDataSpy).toHaveBeenCalled();
          |                                       ^
      168 |       }
      169 |     });
      170 |

      at Object.toHaveBeenCalled (src/services/reports/__tests__/smartDataCollectionIntegration.test.ts:167:39)

  ● Smart Data Collection Integration - Phase 2.1 › Smart Data Collection Priority System › should handle smart data collection with priority fallbacks

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      228 |       } catch (error) {
      229 |         // Expected due to incomplete mocking
    > 230 |         expect(collectProjectDataSpy).toHaveBeenCalled();
          |                                       ^
      231 |       }
      232 |     });
      233 |

      at Object.toHaveBeenCalled (src/services/reports/__tests__/smartDataCollectionIntegration.test.ts:230:39)

  ● Smart Data Collection Integration - Phase 2.1 › Smart Data Collection Priority System › should fail gracefully when smart data collection fails

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {"analysisId": "mock-analysis-id", "competitiveIntelligence": {"competitiveAdvantages": ["AI-first approach"], "marketPosition": "competitive", "opportunities": ["Enterprise market"]}, "description": "Mock report description - Generated immediately upon project creation with 76% data completeness.", "executiveSummary": "Mock executive summary", "format": "markdown", "id": "mock-report-id", "keyFindings": ["Strength: Strong AI", "Weakness: High price", "Market Position: competitive", "Opportunity Score: 85/100"], "keyOpportunities": ["Mock opportunity 1"], "keyThreats": ["Mock threat 1"], "metadata": {"analysisMethod": "ai_powered", "competitorCount": 1, "confidenceScore": 92, "dataQuality": "high", "generatedAt": "2025-07-09T13:31:13.451Z", "productName": "Test Product", "reportVersion": "1.0-initial", "template": "comprehensive", "version": "1.0"}, "productId": "mock-product-id", "projectId": "mock-project-id", "sections": [{"content": "Comprehensive executive summary of competitive analysis", "id": "executive-summary", "order": 1, "title": "Executive Summary", "type": "executive_summary"}, {"content": "Detailed feature comparison analysis", "id": "feature-comparison", "order": 2, "title": "Feature Analysis", "type": "feature_comparison"}, {"content": "Market positioning and competitive landscape analysis", "id": "positioning-analysis", "order": 3, "title": "Market Positioning", "type": "positioning_analysis"}, {"content": "User experience comparison analysis", "id": "ux-comparison", "order": 4, "title": "User Experience", "type": "ux_comparison"}, {"content": "Customer targeting analysis", "id": "customer-targeting", "order": 5, "title": "Customer Targeting", "type": "customer_targeting"}, {"content": "Actionable recommendations based on analysis", "id": "recommendations", "order": 6, "title": "Strategic Recommendations", "type": "recommendations"}], "status": "completed", "strategicRecommendations": {"immediate": ["Improve mobile"], "longTerm": ["Expand to new markets"], "priorityScore": 88, "shortTerm": ["Add enterprise features"]}, "title": "Test Product - Competitive Analysis (Initial Report)"}

      272 |         .mockResolvedValue(mockFailedResult as any);
      273 |
    > 274 |       await expect(
          |             ^
      275 |         initialReportService.generateInitialComparativeReport('project-1')
      276 |       ).rejects.toThrow('Smart data collection failed');
      277 |

      at expect (node_modules/expect/build/index.js:113:15)
      at Object.expect (src/services/reports/__tests__/smartDataCollectionIntegration.test.ts:274:13)

  ● Smart Data Collection Integration - Phase 2.1 › Data Source Priority Verification › should prioritize fresh snapshots over existing data

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "project-1", ObjectContaining {"requireFreshSnapshots": true}

    Number of calls: 0

      292 |       }
      293 |
    > 294 |       expect(spy).toHaveBeenCalledWith('project-1', 
          |                   ^
      295 |         expect.objectContaining({
      296 |           requireFreshSnapshots: true
      297 |         })

      at Object.toHaveBeenCalledWith (src/services/reports/__tests__/smartDataCollectionIntegration.test.ts:294:19)

  ● Smart Data Collection Integration - Phase 2.1 › Data Source Priority Verification › should respect timeout allocation for data collection vs analysis

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "project-1", ObjectContaining {"maxCaptureTime": 75000}

    Number of calls: 0

      310 |       }
      311 |
    > 312 |       expect(spy).toHaveBeenCalledWith('project-1',
          |                   ^
      313 |         expect.objectContaining({
      314 |           maxCaptureTime: 75000 // 90000 - 15000 reserved for analysis
      315 |         })

      at Object.toHaveBeenCalledWith (src/services/reports/__tests__/smartDataCollectionIntegration.test.ts:312:19)

FAIL src/__tests__/integration/completeUserJourneys.test.ts
  ● Complete User Journey Tests › Journey 1: Project Creation to Initial Report › should complete the full user journey from project creation to initial report generation

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      211 |
      212 |       // Full journey complete - all key steps verified
    > 213 |       expect(logger.info).toHaveBeenCalled();
          |                           ^
      214 |     });
      215 |   });
      216 |   

      at Object.toHaveBeenCalled (src/__tests__/integration/completeUserJourneys.test.ts:213:27)

  ● Complete User Journey Tests › Journey 2: Error Recovery During Report Generation › should handle errors and recover gracefully during report generation

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      324 |       
      325 |       // Journey complete with error recovery
    > 326 |       expect(logger.warn).toHaveBeenCalled();
          |                           ^
      327 |       expect(reportResult.reportId).toBe('report-456');
      328 |     });
      329 |   });

      at Object.toHaveBeenCalled (src/__tests__/integration/completeUserJourneys.test.ts:326:27)

FAIL src/__tests__/unit/services/reports/comparativeReportService.ux.test.ts
  ● ComparativeReportService - UX Enhancement › generateUXEnhancedReport › should generate UX-enhanced report successfully

    expect(received).toHaveLength(expected)

    Expected length: 3
    Received length: 6
    Received array:  [{"content": "Comprehensive executive summary of competitive analysis", "id": "executive-summary", "order": 1, "title": "Executive Summary", "type": "executive_summary"}, {"content": "Detailed feature comparison analysis", "id": "feature-comparison", "order": 2, "title": "Feature Analysis", "type": "feature_comparison"}, {"content": "In-depth UX comparison and recommendations", "id": "ux-analysis", "order": 3, "title": "User Experience Analysis", "type": "ux_analysis"}, {"content": "Market positioning and competitive landscape analysis", "id": "positioning-analysis", "order": 4, "title": "Market Positioning", "type": "positioning_analysis"}, {"content": "Actionable UX recommendations based on competitive analysis", "id": "strategic-ux-recommendations", "order": 5, "title": "Strategic UX Recommendations", "type": "recommendations"}, {"content": "Supporting data and methodology", "id": "appendix", "order": 6, "title": "Data Appendix", "type": "appendix"}]

      352 |
      353 |       expect(result).toBeDefined();
    > 354 |       expect(result.report.sections).toHaveLength(3); // Original + 2 UX sections
          |                                      ^
      355 |       expect(result.report.sections[1].title).toBe('User Experience Analysis');
      356 |       expect(result.report.sections[2].title).toBe('Strategic UX Recommendations');
      357 |       expect(result.report.keyFindings).toContain('UX Analysis Confidence: 85%');

      at Object.toHaveLength (src/__tests__/unit/services/reports/comparativeReportService.ux.test.ts:354:38)

  ● ComparativeReportService - UX Enhancement › generateUXEnhancedReport › should handle UX analysis with low confidence

    expect(received).toContain(expected) // indexOf

    Expected value: "UX analysis confidence is below 70%"
    Received array: []

      432 |       );
      433 |
    > 434 |       expect(result.warnings).toContain('UX analysis confidence is below 70%');
          |                               ^
      435 |       expect(result.report.keyFindings).toContain('UX Analysis Confidence: 60%');
      436 |     });
      437 |

      at Object.toContain (src/__tests__/unit/services/reports/comparativeReportService.ux.test.ts:434:31)

  ● ComparativeReportService - UX Enhancement › generateUXEnhancedReport › should handle UX analysis errors gracefully

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {"cost": 0.012, "errors": [], "generationTime": 1200, "report": {"description": "Mock UX report description", "executiveSummary": "Mock UX summary", "id": "mock-ux-report-id", "keyFindings": ["UX finding 1", "UX Analysis Confidence: 85%"], "keyOpportunities": ["UX opportunity 1"], "keyThreats": ["UX threat 1"], "metadata": {"competitorCount": 2, "generatedAt": "2025-07-09T13:31:13.520Z", "productName": "Mock Product", "template": "UX_ENHANCED", "uxAnalysisIncluded": true, "version": "1.0"}, "sections": [{"content": "Comprehensive executive summary of competitive analysis", "id": "executive-summary", "order": 1, "title": "Executive Summary", "type": "executive_summary"}, {"content": "Detailed feature comparison analysis", "id": "feature-comparison", "order": 2, "title": "Feature Analysis", "type": "feature_comparison"}, {"content": "In-depth UX comparison and recommendations", "id": "ux-analysis", "order": 3, "title": "User Experience Analysis", "type": "ux_analysis"}, {"content": "Market positioning and competitive landscape analysis", "id": "positioning-analysis", "order": 4, "title": "Market Positioning", "type": "positioning_analysis"}, {"content": "Actionable UX recommendations based on competitive analysis", "id": "strategic-ux-recommendations", "order": 5, "title": "Strategic UX Recommendations", "type": "recommendations"}, {"content": "Supporting data and methodology", "id": "appendix", "order": 6, "title": "Data Appendix", "type": "appendix"}], "title": "Mock UX Enhanced Report"}, "tokensUsed": 600, "warnings": []}

      441 |       );
      442 |
    > 443 |       await expect(
          |             ^
      444 |         service.generateUXEnhancedReport(
      445 |           mockAnalysis,
      446 |           mockProduct,

      at expect (node_modules/expect/build/index.js:113:15)
      at Object.expect (src/__tests__/unit/services/reports/comparativeReportService.ux.test.ts:443:13)

  ● ComparativeReportService - UX Enhancement › generateUXEnhancedReport › should limit competitors to maximum of 5

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: Anything, Anything, ObjectContaining {"maxCompetitors": 5}

    Number of calls: 0

      503 |
      504 |       // Verify that maxCompetitors option was set to 5
    > 505 |       expect(mockUXAnalyzer.analyzeProductVsCompetitors).toHaveBeenCalledWith(
          |                                                          ^
      506 |         expect.anything(),
      507 |         expect.anything(),
      508 |         expect.objectContaining({

      at Object.toHaveBeenCalledWith (src/__tests__/unit/services/reports/comparativeReportService.ux.test.ts:505:58)

FAIL src/services/analysis/__tests__/userExperienceAnalyzer.test.ts
  ● UserExperienceAnalyzer › analyzeProductVsCompetitors › should generate UX analysis successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: "Test product shows strong UX fundamentals with room for improvement"
    Received: "Mock UX analysis summary"

      87 |
      88 |       expect(result).toBeDefined();
    > 89 |       expect(result.summary).toBe('Test product shows strong UX fundamentals with room for improvement');
         |                              ^
      90 |       expect(result.strengths).toEqual(['Clean design', 'Fast loading']);
      91 |       expect(result.weaknesses).toEqual(['Limited mobile optimization', 'Unclear navigation']);
      92 |       expect(result.opportunities).toEqual(['Mobile-first redesign', 'Enhanced accessibility']);

      at Object.toBe (src/services/analysis/__tests__/userExperienceAnalyzer.test.ts:89:30)

  ● UserExperienceAnalyzer › analyzeProductVsCompetitors › should handle analysis options correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 2

      113 |
      114 |       expect(result).toBeDefined();
    > 115 |       expect(result.metadata.competitorCount).toBe(1);
          |                                               ^
      116 |     });
      117 |
      118 |     it('should limit competitors based on maxCompetitors option', async () => {

      at Object.toBe (src/services/analysis/__tests__/userExperienceAnalyzer.test.ts:115:47)

  ● UserExperienceAnalyzer › analyzeProductVsCompetitors › should handle malformed AI responses gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: "Analysis completed but response format was invalid"
    Received: "Mock UX analysis summary"

      161 |
      162 |       expect(result).toBeDefined();
    > 163 |       expect(result.summary).toBe('Analysis completed but response format was invalid');
          |                              ^
      164 |       expect(result.confidence).toBe(0.3);
      165 |       expect(result.recommendations).toEqual(['Review analysis input data and retry']);
      166 |     });

      at Object.toBe (src/services/analysis/__tests__/userExperienceAnalyzer.test.ts:163:30)

FAIL src/__tests__/integration/reports.test.ts
  ● Test suite failed to run

    Cannot find module '../../pages/api/reports' from 'src/__tests__/integration/reports.test.ts'

      49 | jest.mock('next-auth');
      50 |
    > 51 | describe('/api/reports', () => {
         |                                 ^
      52 |   let mockPrisma: any;
      53 |   let mockPrismaDefault: any;
      54 |

      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.<anonymous> (src/__tests__/integration/reports.test.ts:51:57)

FAIL src/services/reports/__tests__/asyncReportProcessingService.test.ts
  ● Test suite failed to run

    Jest worker encountered 4 child process exceptions, exceeding retry limit

      at ChildProcessWorker.initialize (node_modules/jest-worker/build/workers/ChildProcessWorker.js:181:21)

FAIL src/__tests__/performance/loadTesting.test.ts (48.153 s)
  ● Performance and Load Testing › Phase 4.1: Performance Testing › should meet <2 minute target for comparative report generation

    thrown: "Exceeded timeout of 15000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      231 |
      232 |   describe('Phase 4.1: Performance Testing', () => {
    > 233 |     it('should meet <2 minute target for comparative report generation', async () => {
          |     ^
      234 |       const startTime = Date.now();
      235 |
      236 |       // Create realistic test data

      at it (src/__tests__/performance/loadTesting.test.ts:233:5)
      at describe (src/__tests__/performance/loadTesting.test.ts:232:3)
      at Object.describe (src/__tests__/performance/loadTesting.test.ts:227:1)

  ● Performance and Load Testing › Phase 4.1: Performance Testing › should validate memory usage and resource efficiency

    thrown: "Exceeded timeout of 15000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      592 |     });
      593 |
    > 594 |     it('should validate memory usage and resource efficiency', async () => {
          |     ^
      595 |       const initialMemory = process.memoryUsage();
      596 |       const startTime = Date.now();
      597 |

      at it (src/__tests__/performance/loadTesting.test.ts:594:5)
      at describe (src/__tests__/performance/loadTesting.test.ts:232:3)
      at Object.describe (src/__tests__/performance/loadTesting.test.ts:227:1)


Test Suites: 32 failed, 39 passed, 71 total
Tests:       237 failed, 775 passed, 1012 total
Snapshots:   0 total
Time:        52.462 s
✅ Global test teardown complete - Phase 2 optimized
