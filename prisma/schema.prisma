generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id            String      @id @default(cuid())
  email         String      @unique
  name          String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  users         User[]
  projects      Project[]
  competitors   Competitor[]
  
  @@index([email])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  profileId     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  projects      Project[]
  sessions      Session[]
  profile       Profile?  @relation(fields: [profileId], references: [id])
  
  @@index([profileId])
}

model Competitor {
  id                String     @id @default(cuid())
  name              String
  website           String
  normalizedWebsite String?    // TP-028: For website-based deduplication
  description       String?
  industry          String
  employeeCount     Int?
  revenue           Float?
  founded           Int?
  headquarters      String?
  socialMedia       Json?
  profileId         String?    // Optional - competitors are shared across all users
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  analyses          Analysis[]
  reports           Report[]
  snapshots         Snapshot[]
  projects          Project[]  @relation("CompetitorToProject")
  profile           Profile?   @relation(fields: [profileId], references: [id])
  
  @@index([profileId])
  @@index([normalizedWebsite])  // TP-028: Index for efficient website matching
}

model Report {
  id                            String           @id @default(cuid())
  name                          String
  description                   String?
  competitorId                  String?          // Optional for comparative reports
  createdAt                     DateTime         @default(now())
  updatedAt                     DateTime         @updatedAt
  projectId                     String?
  status                        ReportStatus     @default(PENDING)
  title                         String?
  reportType                    String           @default("INDIVIDUAL") // Temporarily use String instead of enum
  // Phase 5.2.1: Initial Reports Monitoring fields
  isInitialReport               Boolean          @default(false)
  dataCompletenessScore         Int?
  dataFreshness                 String?
  competitorSnapshotsCaptured   Int              @default(0)
  generationContext             Json?
  views                         Int              @default(0)
  generationStartTime           DateTime?
  generationEndTime             DateTime?
  errorDetails                  Json?
  competitor                    Competitor?      @relation(fields: [competitorId], references: [id])
  project                       Project?         @relation(fields: [projectId], references: [id])
  schedules                     ReportSchedule[]
  versions                      ReportVersion[]

  @@index([projectId])
  @@index([status])
  @@index([reportType])
  @@index([isInitialReport])
  @@index([dataFreshness])
  @@index([createdAt, isInitialReport])
}

model ReportVersion {
  id        String   @id @default(cuid())
  reportId  String
  version   Int
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  report    Report   @relation(fields: [reportId], references: [id])
}

model Snapshot {
  id               String     @id @default(cuid())
  competitorId     String
  metadata         Json
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  // Phase 5.2.1: Monitoring fields
  captureStartTime DateTime?
  captureEndTime   DateTime?
  captureSuccess   Boolean    @default(true)
  errorMessage     String?
  captureSize      Int?
  analyses         Analysis[]
  competitor       Competitor @relation(fields: [competitorId], references: [id])

  @@index([captureSuccess])
  @@index([createdAt, captureSuccess])
}

model Analysis {
  id           String          @id @default(cuid())
  competitorId String
  snapshotId   String?
  data         Json
  timestamp    DateTime        @default(now())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  competitor   Competitor      @relation(fields: [competitorId], references: [id])
  snapshot     Snapshot?       @relation(fields: [snapshotId], references: [id])
  trends       AnalysisTrend[]
}

model AnalysisTrend {
  id         String   @id @default(cuid())
  analysisId String
  type       String
  value      Float
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  analysis   Analysis @relation(fields: [analysisId], references: [id])
}

model ReportSchedule {
  id              String                  @id @default(cuid())
  reportId        String
  name            String
  description     String?
  frequency       ReportScheduleFrequency
  customCron      String?
  timeframe       Int
  lastRun         DateTime?
  nextRun         DateTime
  recipients      Json
  status          ReportScheduleStatus    @default(ACTIVE)
  notifyOnChanges Boolean                 @default(false)
  createdBy       String?
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  report          Report                  @relation(fields: [reportId], references: [id])

  @@index([nextRun])
  @@index([status])
}

model Project {
  id                String                   @id @default(cuid())
  name              String
  description       String?
  status            ProjectStatus            @default(DRAFT)
  priority          ProjectPriority          @default(MEDIUM)
  userId            String
  profileId         String
  startDate         DateTime                 @default(now())
  endDate           DateTime?
  parameters        Json
  tags              Json
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  scrapingFrequency ReportScheduleFrequency? @default(WEEKLY)
  userEmail         String?
  user              User                     @relation(fields: [userId], references: [id])
  profile           Profile                  @relation(fields: [profileId], references: [id])
  reports           Report[]
  competitors       Competitor[]             @relation("CompetitorToProject")
  products          Product[]

  @@index([userId])
  @@index([profileId])
  @@index([status])
}

model Product {
  id            String            @id @default(cuid())
  name          String
  website       String
  positioning   String
  customerData  String
  userProblem   String
  industry      String
  projectId     String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  project       Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  snapshots     ProductSnapshot[]

  @@index([projectId])
}

model ProductSnapshot {
  id               String   @id @default(cuid())
  productId        String
  content          Json?
  metadata         Json
  // Phase 5.2.1: Monitoring fields
  captureStartTime DateTime?
  captureEndTime   DateTime?
  captureSuccess   Boolean  @default(true)
  errorMessage     String?
  scrapingDuration Int?     // milliseconds
  error            String?
  createdAt        DateTime @default(now())
  product          Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([captureSuccess])
  @@index([createdAt, captureSuccess])
}

enum ReportType {
  WEEKLY
  MONTHLY
  CUSTOM
}

enum ReportStatus {
  PENDING
  IN_PROGRESS
  GENERATING  // Phase 5.2.1: For initial reports
  COMPLETED
  FAILED
}

enum ReportScheduleFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  CUSTOM
}

enum ReportScheduleStatus {
  ACTIVE
  PAUSED
  DISABLED
}

enum ProjectStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Phase 5.2.1: Monitoring tables for initial reports
model MonitoringEvent {
  id           String   @id @default(cuid())
  eventType    String
  resourceType String   // 'report', 'snapshot', 'project', etc.
  resourceId   String
  eventData    Json
  correlationId String?
  timestamp    DateTime @default(now())
  source       String   @default("system")
  alerts       MonitoringAlert[]

  @@index([eventType])
  @@index([resourceType])
  @@index([timestamp])
  @@index([correlationId])
  @@index([resourceType, resourceId])
}

model MonitoringAlert {
  id          String   @id @default(cuid())
  eventId     String
  level       String
  message     String
  acknowledged Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  event       MonitoringEvent @relation(fields: [eventId], references: [id])

  @@index([level])
  @@index([acknowledged])
}

model AWSCredentials {
  id                     String   @id @default(cuid())
  profileName            String   @unique
  accessKeyId            String   // Changed from encryptedAccessKey
  secretAccessKey        String   // Changed from encryptedSecretKey
  sessionToken           String?  // Changed from encryptedSessionToken
  awsRegion              String
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  lastValidatedAt        DateTime?
  isValid                Boolean  @default(false)
  validationError        String?
  
  @@index([profileName])
  @@index([isValid])
  @@index([lastValidatedAt])
}
