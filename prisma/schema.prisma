generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  projects      Project[]
  sessions      Session[]
}

model Competitor {
  id            String     @id @default(cuid())
  name          String
  website       String
  description   String?
  industry      String
  employeeCount Int?
  revenue       Float?
  founded       Int?
  headquarters  String?
  socialMedia   Json?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  analyses      Analysis[]
  reports       Report[]
  snapshots     Snapshot[]
  projects      Project[]  @relation("CompetitorToProject")
}

model Report {
  id           String           @id @default(cuid())
  name         String
  description  String?
  competitorId String?          // Optional for comparative reports
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  projectId    String?
  status       ReportStatus     @default(PENDING)
  title        String?
  reportType   String           @default("INDIVIDUAL") // Temporarily use String instead of enum
  competitor   Competitor?      @relation(fields: [competitorId], references: [id])
  project      Project?         @relation(fields: [projectId], references: [id])
  schedules    ReportSchedule[]
  versions     ReportVersion[]

  @@index([projectId])
  @@index([status])
  @@index([reportType])
}

model ReportVersion {
  id        String   @id @default(cuid())
  reportId  String
  version   Int
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  report    Report   @relation(fields: [reportId], references: [id])
}

model Snapshot {
  id           String     @id @default(cuid())
  competitorId String
  metadata     Json
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  analyses     Analysis[]
  competitor   Competitor @relation(fields: [competitorId], references: [id])
}

model Analysis {
  id           String          @id @default(cuid())
  competitorId String
  snapshotId   String?
  data         Json
  timestamp    DateTime        @default(now())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  competitor   Competitor      @relation(fields: [competitorId], references: [id])
  snapshot     Snapshot?       @relation(fields: [snapshotId], references: [id])
  trends       AnalysisTrend[]
}

model AnalysisTrend {
  id         String   @id @default(cuid())
  analysisId String
  type       String
  value      Float
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  analysis   Analysis @relation(fields: [analysisId], references: [id])
}

model ReportSchedule {
  id              String                  @id @default(cuid())
  reportId        String
  name            String
  description     String?
  frequency       ReportScheduleFrequency
  customCron      String?
  timeframe       Int
  lastRun         DateTime?
  nextRun         DateTime
  recipients      String[]
  status          ReportScheduleStatus    @default(ACTIVE)
  notifyOnChanges Boolean                 @default(false)
  createdBy       String?
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  report          Report                  @relation(fields: [reportId], references: [id])

  @@index([nextRun])
  @@index([status])
}

model Project {
  id                String                   @id @default(cuid())
  name              String
  description       String?
  status            ProjectStatus            @default(DRAFT)
  priority          ProjectPriority          @default(MEDIUM)
  userId            String
  startDate         DateTime                 @default(now())
  endDate           DateTime?
  parameters        Json
  tags              String[]
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  scrapingFrequency ReportScheduleFrequency? @default(WEEKLY)
  userEmail         String?
  user              User                     @relation(fields: [userId], references: [id])
  reports           Report[]
  competitors       Competitor[]             @relation("CompetitorToProject")
  products          Product[]

  @@index([userId])
  @@index([status])
}

model Product {
  id            String            @id @default(cuid())
  name          String
  website       String
  positioning   String
  customerData  String
  userProblem   String
  industry      String
  projectId     String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  project       Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  snapshots     ProductSnapshot[]

  @@index([projectId])
}

model ProductSnapshot {
  id        String   @id @default(cuid())
  productId String
  content   Json
  metadata  Json
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

enum ReportType {
  WEEKLY
  MONTHLY
  CUSTOM
}

enum ReportStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum ReportScheduleFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  CUSTOM
}

enum ReportScheduleStatus {
  ACTIVE
  PAUSED
  DISABLED
}

enum ProjectStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
