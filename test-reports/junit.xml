<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="225" failures="0" errors="0" time="17.869">
  <testsuite name="Data Integrity Regression Tests" errors="0" failures="0" skipped="9" timestamp="2025-06-06T20:41:09" time="9.103" tests="9">
    <testcase classname="Data Integrity Regression Tests Database Operations should maintain referential integrity between competitors and snapshots" name="Data Integrity Regression Tests Database Operations should maintain referential integrity between competitors and snapshots" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Data Integrity Regression Tests Database Operations should handle concurrent database operations without corruption" name="Data Integrity Regression Tests Database Operations should handle concurrent database operations without corruption" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Data Integrity Regression Tests Database Operations should validate data before storage" name="Data Integrity Regression Tests Database Operations should validate data before storage" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Data Integrity Regression Tests Content Diff Integrity should maintain diff accuracy across multiple comparisons" name="Data Integrity Regression Tests Content Diff Integrity should maintain diff accuracy across multiple comparisons" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Data Integrity Regression Tests Content Diff Integrity should detect significant changes correctly" name="Data Integrity Regression Tests Content Diff Integrity should detect significant changes correctly" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Data Integrity Regression Tests Analysis Data Consistency should maintain analysis result consistency" name="Data Integrity Regression Tests Analysis Data Consistency should maintain analysis result consistency" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Data Integrity Regression Tests Analysis Data Consistency should handle analysis data corruption gracefully" name="Data Integrity Regression Tests Analysis Data Consistency should handle analysis data corruption gracefully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Data Integrity Regression Tests Report Data Integrity should maintain report structure consistency" name="Data Integrity Regression Tests Report Data Integrity should maintain report structure consistency" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Data Integrity Regression Tests Report Data Integrity should handle report versioning correctly" name="Data Integrity Regression Tests Report Data Integrity should handle report versioning correctly" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Report Types (Step 3 - Shared Types)" errors="0" failures="0" skipped="15" timestamp="2025-06-06T20:41:09" time="9.201" tests="15">
    <testcase classname="Report Types (Step 3 - Shared Types) ReportData Interface should accept a complete ReportData object" name="Report Types (Step 3 - Shared Types) ReportData Interface should accept a complete ReportData object" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Report Types (Step 3 - Shared Types) ReportData Interface should accept a minimal ReportData object" name="Report Types (Step 3 - Shared Types) ReportData Interface should accept a minimal ReportData object" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Report Types (Step 3 - Shared Types) ReportData Interface should accept ReportData with only required business fields" name="Report Types (Step 3 - Shared Types) ReportData Interface should accept ReportData with only required business fields" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Report Types (Step 3 - Shared Types) ReportData Interface should accept ReportData with partial metadata" name="Report Types (Step 3 - Shared Types) ReportData Interface should accept ReportData with partial metadata" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Report Types (Step 3 - Shared Types) ReportSection Interface should accept a complete ReportSection object" name="Report Types (Step 3 - Shared Types) ReportSection Interface should accept a complete ReportSection object" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Report Types (Step 3 - Shared Types) ReportSection Interface should require all ReportSection fields" name="Report Types (Step 3 - Shared Types) ReportSection Interface should require all ReportSection fields" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Report Types (Step 3 - Shared Types) ReportSection Interface should support different order values" name="Report Types (Step 3 - Shared Types) ReportSection Interface should support different order values" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Report Types (Step 3 - Shared Types) ReportFile Interface should accept a complete ReportFile object for database reports" name="Report Types (Step 3 - Shared Types) ReportFile Interface should accept a complete ReportFile object for database reports" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Report Types (Step 3 - Shared Types) ReportFile Interface should accept a complete ReportFile object for file reports" name="Report Types (Step 3 - Shared Types) ReportFile Interface should accept a complete ReportFile object for file reports" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Report Types (Step 3 - Shared Types) ReportFile Interface should accept minimal ReportFile with required fields only" name="Report Types (Step 3 - Shared Types) ReportFile Interface should accept minimal ReportFile with required fields only" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Report Types (Step 3 - Shared Types) ReportFile Interface should only accept valid source values" name="Report Types (Step 3 - Shared Types) ReportFile Interface should only accept valid source values" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Report Types (Step 3 - Shared Types) Type Compatibility should allow ReportData sections to use ReportSection interface" name="Report Types (Step 3 - Shared Types) Type Compatibility should allow ReportData sections to use ReportSection interface" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Report Types (Step 3 - Shared Types) Type Compatibility should handle date string formats consistently" name="Report Types (Step 3 - Shared Types) Type Compatibility should handle date string formats consistently" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Report Types (Step 3 - Shared Types) Optional Field Behavior should handle undefined optional fields properly" name="Report Types (Step 3 - Shared Types) Optional Field Behavior should handle undefined optional fields properly" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Report Types (Step 3 - Shared Types) Optional Field Behavior should handle empty arrays and objects" name="Report Types (Step 3 - Shared Types) Optional Field Behavior should handle empty arrays and objects" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="ContentAnalyzer" errors="0" failures="0" skipped="16" timestamp="2025-06-06T20:41:09" time="9.422" tests="16">
    <testcase classname="ContentAnalyzer Constructor should initialize with AWS Bedrock client" name="ContentAnalyzer Constructor should initialize with AWS Bedrock client" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ContentAnalyzer Token Usage Calculation should calculate token usage correctly" name="ContentAnalyzer Token Usage Calculation should calculate token usage correctly" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ContentAnalyzer Token Usage Calculation should calculate cost for Claude model" name="ContentAnalyzer Token Usage Calculation should calculate cost for Claude model" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ContentAnalyzer Token Usage Calculation should calculate cost for Mistral model" name="ContentAnalyzer Token Usage Calculation should calculate cost for Mistral model" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ContentAnalyzer Analysis Response Parsing should parse analysis response correctly" name="ContentAnalyzer Analysis Response Parsing should parse analysis response correctly" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ContentAnalyzer Analysis Response Parsing should handle missing sections gracefully" name="ContentAnalyzer Analysis Response Parsing should handle missing sections gracefully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ContentAnalyzer Confidence Calculation should calculate confidence metrics" name="ContentAnalyzer Confidence Calculation should calculate confidence metrics" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ContentAnalyzer analyzeChanges should analyze changes successfully" name="ContentAnalyzer analyzeChanges should analyze changes successfully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ContentAnalyzer analyzeChanges should handle API errors gracefully" name="ContentAnalyzer analyzeChanges should handle API errors gracefully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ContentAnalyzer analyzeChanges should build analysis prompt correctly" name="ContentAnalyzer analyzeChanges should build analysis prompt correctly" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ContentAnalyzer Text Similarity should calculate text similarity correctly" name="ContentAnalyzer Text Similarity should calculate text similarity correctly" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ContentAnalyzer Text Similarity should return 0 for completely different texts" name="ContentAnalyzer Text Similarity should return 0 for completely different texts" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ContentAnalyzer Text Similarity should return 1 for identical texts" name="ContentAnalyzer Text Similarity should return 1 for identical texts" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ContentAnalyzer List Overlap Calculation should calculate list overlap correctly" name="ContentAnalyzer List Overlap Calculation should calculate list overlap correctly" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ContentAnalyzer List Overlap Calculation should handle empty lists" name="ContentAnalyzer List Overlap Calculation should handle empty lists" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ContentAnalyzer List Overlap Calculation should handle case insensitive comparison" name="ContentAnalyzer List Overlap Calculation should handle case insensitive comparison" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="ReportGenerator" errors="0" failures="0" skipped="7" timestamp="2025-06-06T20:41:18" time="0.351" tests="7">
    <testcase classname="ReportGenerator generateReport should validate input parameters" name="ReportGenerator generateReport should validate input parameters" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportGenerator generateReport should validate timeframe" name="ReportGenerator generateReport should validate timeframe" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportGenerator generateReport should handle competitor not found" name="ReportGenerator generateReport should handle competitor not found" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportGenerator generateReport should generate a valid report" name="ReportGenerator generateReport should generate a valid report" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportGenerator generateReport should handle API errors gracefully" name="ReportGenerator generateReport should handle API errors gracefully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportGenerator getReportVersions should return report versions" name="ReportGenerator getReportVersions should return report versions" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportGenerator countSignificantChanges should count significant changes correctly" name="ReportGenerator countSignificantChanges should count significant changes correctly" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Logger" errors="0" failures="0" skipped="23" timestamp="2025-06-06T20:41:18" time="0.269" tests="23">
    <testcase classname="Logger Log Levels should log debug messages when level is DEBUG" name="Logger Log Levels should log debug messages when level is DEBUG" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger Log Levels should not log debug messages when level is INFO" name="Logger Log Levels should not log debug messages when level is INFO" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger Log Levels should log info messages when level is INFO" name="Logger Log Levels should log info messages when level is INFO" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger Log Levels should log warning messages" name="Logger Log Levels should log warning messages" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger Log Levels should log error messages" name="Logger Log Levels should log error messages" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger Context Management should include context in log messages" name="Logger Context Management should include context in log messages" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger Context Management should maintain persistent context" name="Logger Context Management should maintain persistent context" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger Context Management should merge contexts correctly" name="Logger Context Management should merge contexts correctly" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger Context Management should clear context" name="Logger Context Management should clear context" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger Child Logger should create child logger with additional context" name="Logger Child Logger should create child logger with additional context" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger Child Logger should inherit parent context in child logger" name="Logger Child Logger should inherit parent context in child logger" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger Performance Timing should time operations successfully" name="Logger Performance Timing should time operations successfully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger Performance Timing should handle operation failures" name="Logger Performance Timing should handle operation failures" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger Event Tracking should track events" name="Logger Event Tracking should track events" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger Event Tracking should track errors" name="Logger Event Tracking should track errors" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger Event Tracking should track performance" name="Logger Event Tracking should track performance" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger Event Tracking should track user actions" name="Logger Event Tracking should track user actions" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger Event Tracking should track business events" name="Logger Event Tracking should track business events" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger Log Formatting should format timestamps correctly" name="Logger Log Formatting should format timestamps correctly" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger Log Formatting should include stack trace for errors" name="Logger Log Formatting should include stack trace for errors" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger Log Formatting should format performance logs correctly" name="Logger Log Formatting should format performance logs correctly" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger Error Handling should handle errors without stack traces" name="Logger Error Handling should handle errors without stack traces" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger Error Handling should handle null/undefined errors gracefully" name="Logger Error Handling should handle null/undefined errors gracefully" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="SnapshotDiff" errors="0" failures="0" skipped="20" timestamp="2025-06-06T20:41:18" time="0.219" tests="20">
    <testcase classname="SnapshotDiff compare should detect text additions" name="SnapshotDiff compare should detect text additions" time="0">
      <skipped/>
    </testcase>
    <testcase classname="SnapshotDiff compare should detect text removals" name="SnapshotDiff compare should detect text removals" time="0">
      <skipped/>
    </testcase>
    <testcase classname="SnapshotDiff compare should detect text modifications" name="SnapshotDiff compare should detect text modifications" time="0">
      <skipped/>
    </testcase>
    <testcase classname="SnapshotDiff compare should handle identical content" name="SnapshotDiff compare should handle identical content" time="0">
      <skipped/>
    </testcase>
    <testcase classname="SnapshotDiff compare should detect metadata changes" name="SnapshotDiff compare should detect metadata changes" time="0">
      <skipped/>
    </testcase>
    <testcase classname="SnapshotDiff compare should calculate change percentage correctly" name="SnapshotDiff compare should calculate change percentage correctly" time="0">
      <skipped/>
    </testcase>
    <testcase classname="SnapshotDiff compare should handle empty content" name="SnapshotDiff compare should handle empty content" time="0">
      <skipped/>
    </testcase>
    <testcase classname="SnapshotDiff compare should filter out empty lines" name="SnapshotDiff compare should filter out empty lines" time="0">
      <skipped/>
    </testcase>
    <testcase classname="SnapshotDiff getSignificantChanges should identify significant content changes" name="SnapshotDiff getSignificantChanges should identify significant content changes" time="0">
      <skipped/>
    </testcase>
    <testcase classname="SnapshotDiff getSignificantChanges should identify metadata changes" name="SnapshotDiff getSignificantChanges should identify metadata changes" time="0">
      <skipped/>
    </testcase>
    <testcase classname="SnapshotDiff getSignificantChanges should return empty array for no significant changes" name="SnapshotDiff getSignificantChanges should return empty array for no significant changes" time="0">
      <skipped/>
    </testcase>
    <testcase classname="SnapshotDiff getSignificantChanges should handle mixed significant changes" name="SnapshotDiff getSignificantChanges should handle mixed significant changes" time="0">
      <skipped/>
    </testcase>
    <testcase classname="SnapshotDiff formatTextDiff should format removed content with minus prefix" name="SnapshotDiff formatTextDiff should format removed content with minus prefix" time="0">
      <skipped/>
    </testcase>
    <testcase classname="SnapshotDiff formatTextDiff should format added content with plus prefix" name="SnapshotDiff formatTextDiff should format added content with plus prefix" time="0">
      <skipped/>
    </testcase>
    <testcase classname="SnapshotDiff formatTextDiff should format both added and removed content" name="SnapshotDiff formatTextDiff should format both added and removed content" time="0">
      <skipped/>
    </testcase>
    <testcase classname="SnapshotDiff formatTextDiff should return empty string for no changes" name="SnapshotDiff formatTextDiff should return empty string for no changes" time="0">
      <skipped/>
    </testcase>
    <testcase classname="SnapshotDiff formatTextDiff should handle special characters in diff content" name="SnapshotDiff formatTextDiff should handle special characters in diff content" time="0">
      <skipped/>
    </testcase>
    <testcase classname="SnapshotDiff Edge Cases should handle null/undefined values gracefully" name="SnapshotDiff Edge Cases should handle null/undefined values gracefully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="SnapshotDiff Edge Cases should handle very large content differences" name="SnapshotDiff Edge Cases should handle very large content differences" time="0">
      <skipped/>
    </testcase>
    <testcase classname="SnapshotDiff Edge Cases should handle content with only whitespace differences" name="SnapshotDiff Edge Cases should handle content with only whitespace differences" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="/api/reports" errors="0" failures="0" skipped="5" timestamp="2025-06-06T20:41:09" time="10.174" tests="5">
    <testcase classname="/api/reports POST /api/reports should validate request body" name="/api/reports POST /api/reports should validate request body" time="0">
      <skipped/>
    </testcase>
    <testcase classname="/api/reports POST /api/reports should create a report successfully" name="/api/reports POST /api/reports should create a report successfully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="/api/reports POST /api/reports should handle internal errors" name="/api/reports POST /api/reports should handle internal errors" time="0">
      <skipped/>
    </testcase>
    <testcase classname="/api/reports POST /api/reports should work with mock authentication (no session required)" name="/api/reports POST /api/reports should work with mock authentication (no session required)" time="0">
      <skipped/>
    </testcase>
    <testcase classname="/api/reports Invalid methods should return 405 for non-POST methods" name="/api/reports Invalid methods should return 405 for non-POST methods" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="ReportViewer Component (Step 3)" errors="0" failures="0" skipped="35" timestamp="2025-06-06T20:41:10" time="9.08" tests="35">
    <testcase classname="ReportViewer Component (Step 3) Component Rendering should render without crashing" name="ReportViewer Component (Step 3) Component Rendering should render without crashing" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Component Rendering should apply custom className when provided" name="ReportViewer Component (Step 3) Component Rendering should apply custom className when provided" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Component Rendering should have default styling classes" name="ReportViewer Component (Step 3) Component Rendering should have default styling classes" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Report Header should display report title" name="ReportViewer Component (Step 3) Report Header should display report title" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Report Header should display report description" name="ReportViewer Component (Step 3) Report Header should display report description" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Report Header should display default title when title is missing" name="ReportViewer Component (Step 3) Report Header should display default title when title is missing" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Report Header should not render description if not provided" name="ReportViewer Component (Step 3) Report Header should not render description if not provided" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Basic Metadata Display should display project name" name="ReportViewer Component (Step 3) Basic Metadata Display should display project name" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Basic Metadata Display should display competitor name" name="ReportViewer Component (Step 3) Basic Metadata Display should display competitor name" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Basic Metadata Display should display generated date" name="ReportViewer Component (Step 3) Basic Metadata Display should display generated date" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Basic Metadata Display should display status badge for completed reports" name="ReportViewer Component (Step 3) Basic Metadata Display should display status badge for completed reports" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Basic Metadata Display should display status badge for non-completed reports" name="ReportViewer Component (Step 3) Basic Metadata Display should display status badge for non-completed reports" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Enhanced Metadata Display should display competitor website as clickable link" name="ReportViewer Component (Step 3) Enhanced Metadata Display should display competitor website as clickable link" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Enhanced Metadata Display should display analysis period" name="ReportViewer Component (Step 3) Enhanced Metadata Display should display analysis period" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Enhanced Metadata Display should display data points count" name="ReportViewer Component (Step 3) Enhanced Metadata Display should display data points count" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Enhanced Metadata Display should display significant changes count" name="ReportViewer Component (Step 3) Enhanced Metadata Display should display significant changes count" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Enhanced Metadata Display should not display metadata section if metadata is missing" name="ReportViewer Component (Step 3) Enhanced Metadata Display should not display metadata section if metadata is missing" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Sections Rendering should render all report sections" name="ReportViewer Component (Step 3) Sections Rendering should render all report sections" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Sections Rendering should render section content" name="ReportViewer Component (Step 3) Sections Rendering should render section content" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Sections Rendering should render sections as h2 headings" name="ReportViewer Component (Step 3) Sections Rendering should render sections as h2 headings" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Content Processing should process bullet points into HTML lists" name="ReportViewer Component (Step 3) Content Processing should process bullet points into HTML lists" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Content Processing should process numbered lists into HTML ordered lists" name="ReportViewer Component (Step 3) Content Processing should process numbered lists into HTML ordered lists" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Content Processing should process sub-headers (### and ####)" name="ReportViewer Component (Step 3) Content Processing should process sub-headers (### and ####)" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Content Processing should process bold text (**text**)" name="ReportViewer Component (Step 3) Content Processing should process bold text (**text**)" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Content Processing should render regular paragraphs" name="ReportViewer Component (Step 3) Content Processing should render regular paragraphs" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Raw Content Fallback should display raw content when sections are not available" name="ReportViewer Component (Step 3) Raw Content Fallback should display raw content when sections are not available" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Raw Content Fallback should display raw content when sections array is empty" name="ReportViewer Component (Step 3) Raw Content Fallback should display raw content when sections array is empty" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Footer should display attribution text" name="ReportViewer Component (Step 3) Footer should display attribution text" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Footer should display report ID when provided" name="ReportViewer Component (Step 3) Footer should display report ID when provided" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Footer should not display report ID when not provided" name="ReportViewer Component (Step 3) Footer should not display report ID when not provided" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Section Separation should separate sections with proper styling" name="ReportViewer Component (Step 3) Section Separation should separate sections with proper styling" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Responsive Design should have responsive metadata grid" name="ReportViewer Component (Step 3) Responsive Design should have responsive metadata grid" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Responsive Design should have responsive enhanced metadata grid" name="ReportViewer Component (Step 3) Responsive Design should have responsive enhanced metadata grid" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Edge Cases should handle missing optional fields gracefully" name="ReportViewer Component (Step 3) Edge Cases should handle missing optional fields gracefully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewer Component (Step 3) Edge Cases should handle empty content gracefully" name="ReportViewer Component (Step 3) Edge Cases should handle empty content gracefully" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="ReportsPage - Read Report Feature (Step 1)" errors="0" failures="0" skipped="15" timestamp="2025-06-06T20:41:10" time="9.631" tests="15">
    <testcase classname="ReportsPage - Read Report Feature (Step 1) Read Report Button Rendering should render &quot;Read Report&quot; button for each report" name="ReportsPage - Read Report Feature (Step 1) Read Report Button Rendering should render &quot;Read Report&quot; button for each report" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportsPage - Read Report Feature (Step 1) Read Report Button Rendering should render &quot;Read Report&quot; button with correct styling" name="ReportsPage - Read Report Feature (Step 1) Read Report Button Rendering should render &quot;Read Report&quot; button with correct styling" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportsPage - Read Report Feature (Step 1) Read Report Button Rendering should render both &quot;Read Report&quot; and &quot;Download&quot; buttons" name="ReportsPage - Read Report Feature (Step 1) Read Report Button Rendering should render both &quot;Read Report&quot; and &quot;Download&quot; buttons" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportsPage - Read Report Feature (Step 1) Read Report Button Links should create correct href for database reports using report ID" name="ReportsPage - Read Report Feature (Step 1) Read Report Button Links should create correct href for database reports using report ID" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportsPage - Read Report Feature (Step 1) Read Report Button Links should create correct href for file reports using filename" name="ReportsPage - Read Report Feature (Step 1) Read Report Button Links should create correct href for file reports using filename" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportsPage - Read Report Feature (Step 1) Read Report Button Links should open links in new tab" name="ReportsPage - Read Report Feature (Step 1) Read Report Button Links should open links in new tab" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportsPage - Read Report Feature (Step 1) Icons and Visual Elements should render Eye icon in Read Report button" name="ReportsPage - Read Report Feature (Step 1) Icons and Visual Elements should render Eye icon in Read Report button" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportsPage - Read Report Feature (Step 1) Icons and Visual Elements should maintain Download button functionality" name="ReportsPage - Read Report Feature (Step 1) Icons and Visual Elements should maintain Download button functionality" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportsPage - Read Report Feature (Step 1) Button Positioning and Layout should position Read Report button before Download button" name="ReportsPage - Read Report Feature (Step 1) Button Positioning and Layout should position Read Report button before Download button" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportsPage - Read Report Feature (Step 1) Button Positioning and Layout should maintain proper spacing between buttons" name="ReportsPage - Read Report Feature (Step 1) Button Positioning and Layout should maintain proper spacing between buttons" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportsPage - Read Report Feature (Step 1) Error and Loading States should not show Read Report buttons during loading" name="ReportsPage - Read Report Feature (Step 1) Error and Loading States should not show Read Report buttons during loading" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportsPage - Read Report Feature (Step 1) Error and Loading States should not show Read Report buttons when reports list is empty" name="ReportsPage - Read Report Feature (Step 1) Error and Loading States should not show Read Report buttons when reports list is empty" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportsPage - Read Report Feature (Step 1) Error and Loading States should handle fetch errors gracefully" name="ReportsPage - Read Report Feature (Step 1) Error and Loading States should handle fetch errors gracefully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportsPage - Read Report Feature (Step 1) Accessibility should have accessible button text" name="ReportsPage - Read Report Feature (Step 1) Accessibility should have accessible button text" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportsPage - Read Report Feature (Step 1) Accessibility should have proper focus management" name="ReportsPage - Read Report Feature (Step 1) Accessibility should have proper focus management" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Navigation Component" errors="0" failures="0" skipped="5" timestamp="2025-06-06T20:41:19" time="0.511" tests="5">
    <testcase classname="Navigation Component should render the navigation component without crashing" name="Navigation Component should render the navigation component without crashing" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Navigation Component should render navigation element" name="Navigation Component should render navigation element" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Navigation Component should contain CompAI brand text" name="Navigation Component should contain CompAI brand text" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Navigation Component should contain navigation items" name="Navigation Component should contain navigation items" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Navigation Component should contain branding text" name="Navigation Component should contain branding text" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="ObservabilityCollector" errors="0" failures="0" skipped="2" timestamp="2025-06-06T20:41:09" time="15.535" tests="24">
    <testcase classname="ObservabilityCollector constructor should initialize with correct properties" name="ObservabilityCollector constructor should initialize with correct properties" time="0.023">
    </testcase>
    <testcase classname="ObservabilityCollector constructor should generate session ID if not provided" name="ObservabilityCollector constructor should generate session ID if not provided" time="0">
    </testcase>
    <testcase classname="ObservabilityCollector trackJourneyStep should track successful journey step" name="ObservabilityCollector trackJourneyStep should track successful journey step" time="0.001">
    </testcase>
    <testcase classname="ObservabilityCollector trackJourneyStep should track failed journey step" name="ObservabilityCollector trackJourneyStep should track failed journey step" time="0.001">
    </testcase>
    <testcase classname="ObservabilityCollector trackJourneyStep should calculate duration between steps" name="ObservabilityCollector trackJourneyStep should calculate duration between steps" time="0.079">
    </testcase>
    <testcase classname="ObservabilityCollector trackMetric should track performance metric" name="ObservabilityCollector trackMetric should track performance metric" time="0.001">
    </testcase>
    <testcase classname="ObservabilityCollector trackMetric should store metric in internal state" name="ObservabilityCollector trackMetric should store metric in internal state" time="0">
    </testcase>
    <testcase classname="ObservabilityCollector trackError should track error with context" name="ObservabilityCollector trackError should track error with context" time="0.001">
    </testcase>
    <testcase classname="ObservabilityCollector trackError should increment error count" name="ObservabilityCollector trackError should increment error count" time="0">
    </testcase>
    <testcase classname="ObservabilityCollector trackInteraction should track user interaction" name="ObservabilityCollector trackInteraction should track user interaction" time="0">
    </testcase>
    <testcase classname="ObservabilityCollector trackInteraction should increment interaction count" name="ObservabilityCollector trackInteraction should increment interaction count" time="0">
    </testcase>
    <testcase classname="ObservabilityCollector generateSessionSummary should generate comprehensive session summary" name="ObservabilityCollector generateSessionSummary should generate comprehensive session summary" time="0.001">
    </testcase>
    <testcase classname="ObservabilityCollector generateSessionSummary should handle empty journey" name="ObservabilityCollector generateSessionSummary should handle empty journey" time="0">
    </testcase>
    <testcase classname="ObservabilityCollector sendSessionSummary should send session summary to logger" name="ObservabilityCollector sendSessionSummary should send session summary to logger" time="0">
    </testcase>
    <testcase classname="observabilityUtils trackApiCall should track successful API call" name="observabilityUtils trackApiCall should track successful API call" time="0">
    </testcase>
    <testcase classname="observabilityUtils trackApiCall should track failed API call" name="observabilityUtils trackApiCall should track failed API call" time="0.019">
    </testcase>
    <testcase classname="observabilityUtils trackComponentRender should track component render performance" name="observabilityUtils trackComponentRender should track component render performance" time="0.002">
    </testcase>
    <testcase classname="observabilityUtils trackComponentRender should track failed component render" name="observabilityUtils trackComponentRender should track failed component render" time="0">
    </testcase>
    <testcase classname="observabilityUtils trackNavigation should track navigation event" name="observabilityUtils trackNavigation should track navigation event" time="0">
    </testcase>
    <testcase classname="observabilityUtils trackPageLoad should track page load performance" name="observabilityUtils trackPageLoad should track page load performance" time="0">
    </testcase>
    <testcase classname="createObservabilityCollector should create new collector instance" name="createObservabilityCollector should create new collector instance" time="0">
    </testcase>
    <testcase classname="createObservabilityCollector should create collector without session ID" name="createObservabilityCollector should create collector without session ID" time="0.001">
    </testcase>
    <testcase classname="Integration Tests should track complete user journey for report viewing" name="Integration Tests should track complete user journey for report viewing" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Integration Tests should handle error scenarios in user journey" name="Integration Tests should handle error scenarios in user journey" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Critical Paths Regression Tests" errors="0" failures="0" skipped="13" timestamp="2025-06-06T20:41:18" time="6.272" tests="13">
    <testcase classname="Critical Paths Regression Tests Report Generation - Critical Smoke Tests should generate a report successfully" name="Critical Paths Regression Tests Report Generation - Critical Smoke Tests should generate a report successfully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Critical Paths Regression Tests Report Generation - Critical Smoke Tests should handle competitor not found gracefully" name="Critical Paths Regression Tests Report Generation - Critical Smoke Tests should handle competitor not found gracefully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Critical Paths Regression Tests Report Generation - Critical Smoke Tests should validate input parameters" name="Critical Paths Regression Tests Report Generation - Critical Smoke Tests should validate input parameters" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Critical Paths Regression Tests Content Analysis - Critical Smoke Tests should perform content analysis successfully" name="Critical Paths Regression Tests Content Analysis - Critical Smoke Tests should perform content analysis successfully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Critical Paths Regression Tests Content Analysis - Critical Smoke Tests should handle AI service failures gracefully" name="Critical Paths Regression Tests Content Analysis - Critical Smoke Tests should handle AI service failures gracefully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Critical Paths Regression Tests Data Integrity - Critical Checks should maintain data consistency in report storage" name="Critical Paths Regression Tests Data Integrity - Critical Checks should maintain data consistency in report storage" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Critical Paths Regression Tests Data Integrity - Critical Checks should handle database transaction failures" name="Critical Paths Regression Tests Data Integrity - Critical Checks should handle database transaction failures" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Critical Paths Regression Tests Data Integrity - Critical Checks should handle malformed data gracefully" name="Critical Paths Regression Tests Data Integrity - Critical Checks should handle malformed data gracefully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Critical Paths Regression Tests Performance - Critical Benchmarks should complete report generation within acceptable time limits" name="Critical Paths Regression Tests Performance - Critical Benchmarks should complete report generation within acceptable time limits" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Critical Paths Regression Tests Performance - Critical Benchmarks should handle concurrent report generations" name="Critical Paths Regression Tests Performance - Critical Benchmarks should handle concurrent report generations" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Critical Paths Regression Tests Error Handling - Critical Recovery should recover from temporary service failures" name="Critical Paths Regression Tests Error Handling - Critical Recovery should recover from temporary service failures" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Critical Paths Regression Tests Error Handling - Critical Recovery should handle malformed data gracefully" name="Critical Paths Regression Tests Error Handling - Critical Recovery should handle malformed data gracefully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Critical Paths Regression Tests Integration - Critical Workflows should complete end-to-end report workflow" name="Critical Paths Regression Tests Integration - Critical Workflows should complete end-to-end report workflow" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="WebsiteScraper" errors="0" failures="0" skipped="20" timestamp="2025-06-06T20:41:18" time="7.07" tests="20">
    <testcase classname="WebsiteScraper Browser Initialization should initialize browser with correct options" name="WebsiteScraper Browser Initialization should initialize browser with correct options" time="0">
      <skipped/>
    </testcase>
    <testcase classname="WebsiteScraper Browser Initialization should reuse existing browser instance" name="WebsiteScraper Browser Initialization should reuse existing browser instance" time="0">
      <skipped/>
    </testcase>
    <testcase classname="WebsiteScraper takeSnapshot should take a complete website snapshot" name="WebsiteScraper takeSnapshot should take a complete website snapshot" time="0">
      <skipped/>
    </testcase>
    <testcase classname="WebsiteScraper takeSnapshot should extract meta description when present" name="WebsiteScraper takeSnapshot should extract meta description when present" time="0">
      <skipped/>
    </testcase>
    <testcase classname="WebsiteScraper takeSnapshot should handle missing meta description" name="WebsiteScraper takeSnapshot should handle missing meta description" time="0">
      <skipped/>
    </testcase>
    <testcase classname="WebsiteScraper takeSnapshot should set viewport correctly" name="WebsiteScraper takeSnapshot should set viewport correctly" time="0">
      <skipped/>
    </testcase>
    <testcase classname="WebsiteScraper takeSnapshot should enable request interception" name="WebsiteScraper takeSnapshot should enable request interception" time="0">
      <skipped/>
    </testcase>
    <testcase classname="WebsiteScraper takeSnapshot should navigate to URL with correct options" name="WebsiteScraper takeSnapshot should navigate to URL with correct options" time="0">
      <skipped/>
    </testcase>
    <testcase classname="WebsiteScraper takeSnapshot should close page after snapshot" name="WebsiteScraper takeSnapshot should close page after snapshot" time="0">
      <skipped/>
    </testcase>
    <testcase classname="WebsiteScraper takeSnapshot should handle navigation errors" name="WebsiteScraper takeSnapshot should handle navigation errors" time="0">
      <skipped/>
    </testcase>
    <testcase classname="WebsiteScraper takeSnapshot should handle page content extraction errors" name="WebsiteScraper takeSnapshot should handle page content extraction errors" time="0">
      <skipped/>
    </testcase>
    <testcase classname="WebsiteScraper takeSnapshot should handle request events correctly" name="WebsiteScraper takeSnapshot should handle request events correctly" time="0">
      <skipped/>
    </testcase>
    <testcase classname="WebsiteScraper takeSnapshot should capture response headers and status" name="WebsiteScraper takeSnapshot should capture response headers and status" time="0">
      <skipped/>
    </testcase>
    <testcase classname="WebsiteScraper takeSnapshot should handle different status codes" name="WebsiteScraper takeSnapshot should handle different status codes" time="0">
      <skipped/>
    </testcase>
    <testcase classname="WebsiteScraper Content Parsing should handle special characters in content" name="WebsiteScraper Content Parsing should handle special characters in content" time="0">
      <skipped/>
    </testcase>
    <testcase classname="WebsiteScraper Content Parsing should handle empty content gracefully" name="WebsiteScraper Content Parsing should handle empty content gracefully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="WebsiteScraper close should close browser when it exists" name="WebsiteScraper close should close browser when it exists" time="0">
      <skipped/>
    </testcase>
    <testcase classname="WebsiteScraper close should handle close when browser does not exist" name="WebsiteScraper close should handle close when browser does not exist" time="0">
      <skipped/>
    </testcase>
    <testcase classname="WebsiteScraper close should handle browser close errors" name="WebsiteScraper close should handle browser close errors" time="0">
      <skipped/>
    </testcase>
    <testcase classname="WebsiteScraper close should set browser to null after closing" name="WebsiteScraper close should set browser to null after closing" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Basic Component Tests" errors="0" failures="0" skipped="3" timestamp="2025-06-06T20:41:20" time="5.897" tests="3">
    <testcase classname="Basic Component Tests should render test component" name="Basic Component Tests should render test component" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Basic Component Tests should contain expected text" name="Basic Component Tests should contain expected text" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Basic Component Tests should render with proper test id" name="Basic Component Tests should render with proper test id" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="ReportViewerPage - Report Viewer (Step 2)" errors="0" failures="0" skipped="15" timestamp="2025-06-06T20:41:20" time="6.006" tests="15">
    <testcase classname="ReportViewerPage - Report Viewer (Step 2) Page Loading and Error States should show loading spinner initially" name="ReportViewerPage - Report Viewer (Step 2) Page Loading and Error States should show loading spinner initially" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewerPage - Report Viewer (Step 2) Page Loading and Error States should show error state when report not found" name="ReportViewerPage - Report Viewer (Step 2) Page Loading and Error States should show error state when report not found" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewerPage - Report Viewer (Step 2) Page Loading and Error States should show error state when fetch fails" name="ReportViewerPage - Report Viewer (Step 2) Page Loading and Error States should show error state when fetch fails" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewerPage - Report Viewer (Step 2) Report Fetching Logic should first try to fetch as database report" name="ReportViewerPage - Report Viewer (Step 2) Report Fetching Logic should first try to fetch as database report" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewerPage - Report Viewer (Step 2) Report Fetching Logic should fallback to file API for .md files when database fails" name="ReportViewerPage - Report Viewer (Step 2) Report Fetching Logic should fallback to file API for .md files when database fails" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewerPage - Report Viewer (Step 2) Markdown Parsing should parse report title from markdown" name="ReportViewerPage - Report Viewer (Step 2) Markdown Parsing should parse report title from markdown" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewerPage - Report Viewer (Step 2) Markdown Parsing should parse report sections" name="ReportViewerPage - Report Viewer (Step 2) Markdown Parsing should parse report sections" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewerPage - Report Viewer (Step 2) Markdown Parsing should extract metadata from Report Details section" name="ReportViewerPage - Report Viewer (Step 2) Markdown Parsing should extract metadata from Report Details section" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewerPage - Report Viewer (Step 2) Markdown Parsing should use first non-header line as description" name="ReportViewerPage - Report Viewer (Step 2) Markdown Parsing should use first non-header line as description" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewerPage - Report Viewer (Step 2) Navigation Controls should render back button that calls router.back()" name="ReportViewerPage - Report Viewer (Step 2) Navigation Controls should render back button that calls router.back()" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewerPage - Report Viewer (Step 2) Navigation Controls should render print button that calls window.print()" name="ReportViewerPage - Report Viewer (Step 2) Navigation Controls should render print button that calls window.print()" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewerPage - Report Viewer (Step 2) Navigation Controls should render download button that triggers file download" name="ReportViewerPage - Report Viewer (Step 2) Navigation Controls should render download button that triggers file download" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewerPage - Report Viewer (Step 2) Header and Footer should render header with navigation controls" name="ReportViewerPage - Report Viewer (Step 2) Header and Footer should render header with navigation controls" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewerPage - Report Viewer (Step 2) Header and Footer should render footer with attribution" name="ReportViewerPage - Report Viewer (Step 2) Header and Footer should render footer with attribution" time="0">
      <skipped/>
    </testcase>
    <testcase classname="ReportViewerPage - Report Viewer (Step 2) Error State Navigation should render Go Back button in error state" name="ReportViewerPage - Report Viewer (Step 2) Error State Navigation should render Go Back button in error state" time="0">
      <skipped/>
    </testcase>
  </testsuite>
</testsuites>